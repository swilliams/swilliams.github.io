<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Scott Williams]]></title>
  <link href="http://blog.swilliams.me/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2014-07-07T15:31:29-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Friction and Teams]]></title>
    <link href="http://blog.swilliams.me/words/2014/07/07/friction-and-teams/"/>
    <updated>2014-07-07T15:23:47-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/07/07/friction-and-teams</id>
    <content type="html"><![CDATA[<p>Developers tend to plow through the path of least resistance. Any amount of friction they encounter tends to be routed over or around. For example, I&rsquo;ve worked at a place where Sharepoint was the mandated document storage for the company. The problem is that Sharepoint is awful and unless it was setup by experts, difficult to find what you&rsquo;re looking for.<sup>1</sup> Since it was so convoluted, developers ignored it.</p>

<p>This lead to bigger problems. A sort of <a href="http://en.wikipedia.org/wiki/Oral_tradition">oral tradition</a> was inadvertently created and persisted. Since developers were ignoring documentation, requirements were missed and features were implemented incorrectly. Fingers were pointed and words were exchanged.</p>

<p>Now, imagine for a moment you were the manager in charge of this lot and suddenly found out that your document system was completely ignored by everyone on your team. Bad managers try to correct this with the heavy-handed approach and enforce the IT policy. I&rsquo;ve seen this happen and it isn&rsquo;t pretty. It usually results in the <a href="http://www.britannica.com/EBchecked/topic/166626/divine-right-of-kings">Divine Right of Management</a> being invoked, and then rapidly returns to status quo when said manager is not looking.</p>

<p>What should you do instead? Keeping that convoluted game of telephone doesn&rsquo;t work, and erects huge barriers for any new person. <a href="http://designingsocialinterfaces.com/patterns/Pave_the_Cowpaths">Paving the cowpaths</a> may not necessarily be the best approach either because it could cement bad practices<sup>2</sup>. Anarchy is not a reliable cowpath.</p>

<p>Being a good manager is about removing the friction from your team to enable them to do good work. What&rsquo;s the friction in the above scenario? Dealing with a crummy document management system. How do you remove that? One team I&rsquo;ve worked with used a Github based workflow for source code and started using the <a href="https://help.github.com/articles/about-github-wikis">wikis</a> on Github. Another place used Trello, which required more management, but it was still easy to look stuff up. Heck, you could even have an expert come over and wrestle Sharepoint into being manageable.</p>

<p>Like everything else, there isn&rsquo;t a silver bullet here. In fact, so-called silver bullets tend to create these scenarios (all of the bullet points on the box sure looked good to somebody in a position of authority). A good manager will know their team and understand where these points of friction occur. It might be impossible to smooth them over entirely, but every single bit you can scrape away will only make your team more productive.</p>

<div class="footnotes">
<p><small>
1. This shouldn&#8217;t be a Sharepoint gripe fest, but here&#8217;s the process you had to go through to find a document if you didn&#8217;t have a good bookmark. 1) Go to the home page. 2) Click on the &#8220;IT Projects&#8221; &#8220;portal&#8221;. 3) Find the right project in a list on the sidebar. 4) Navigate that project&#8217;s folder hierarchy. Each project&#8217;s hierarchy is completely arbitrary and built by its own madman. 5) Find the document eventually. It&#8217;s a Word doc so, 6) Download the doc. 7) Open it. 8) Edit it. 9) Re-upload it.
</small></p>

<p><small>
2. &#8220;Oh just go talk to Henry, he&#8217;s the one who knows about the Widget structure.&#8221; &#8220;Actually Janet was the one who integrated the Widgets with the Core System.&#8221; &#8220;Yeah, I think I have an email in here somewhere describing that. I&#8217;ll get back to you in an hour.&#8221;
</small></p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fujifilm X100s]]></title>
    <link href="http://blog.swilliams.me/words/2014/06/28/fujifilm-x100s/"/>
    <updated>2014-06-28T15:42:35-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/06/28/fujifilm-x100s</id>
    <content type="html"><![CDATA[<figure>
    <a href="http://www.amazon.com/gp/product/B00ATM1MVA/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00ATM1MVA&linkCode=as2&tag=thepetzoo-20&linkId=2PJ4FLG2K25KQBDP"><img alt="The Fujifilm X100s" src="http://ecx.images-amazon.com/images/I/91euWxZBK6L._SL1500_.jpg"></a>
    <figcaption>The Fujifilm X100s</figcaption>
</figure>


<p>I bought a new camera a little while ago, and finally had the opportunity to put it through its paces. <a href="http://www.amazon.com/gp/product/B00ATM1MVA/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ATM1MVA&amp;linkCode=as2&amp;tag=thepetzoo-20&amp;linkId=2PJ4FLG2K25KQBDP">The Fujifilm X100s</a> isn&rsquo;t particularly cheap, so I saved a while to be able to afford it, but so far I&rsquo;m really liking it.</p>

<p>I have three Nikon DSLRs and an assortment of nice lenses to go with them, so why would I want a smaller, almost Point and Shoot camera? For starters, it&rsquo;s much smaller. I love my Nikons, but carrying around a backpack has never been <a href="http://blog.swilliams.me/words/2013/09/04/you-probably-shouldnt-buy-a-dslr/">convenient</a>, especially when you need to take a shot fast. It can fit in a large pocket, and I have a belt-style pouch for it too. Its lens is fixed at about the equivalent of 35mm on an SLR. You&rsquo;d think being stuck at a single focal length would be an issue, but it&rsquo;s a good size for when its use cases (informal portraits, walking around, &ldquo;street&rdquo; photography). Oh yeah, and the pictures that come out of it are gorgeous.</p>

<figure>
    <img alt="" src="http://blog.swilliams.me/images/assets/fujifilm/DSCF0026.jpg">
    <figcaption>The Desert</figcaption>
</figure>




<figure>
    <img alt="" src="http://blog.swilliams.me/images/assets/fujifilm/DSCF0035.jpg">
    <figcaption>Prep for a birthday Party</figcaption>
</figure>




<figure>
    <img alt="" src="http://blog.swilliams.me/images/assets/fujifilm/DSCF0036.jpg">
    <figcaption>Prep for a birthday Party</figcaption>
</figure>


<p>Where doesn&rsquo;t it stand up very well? When you need to get closer. When you need the absolute <em>best</em> image quality. When you need a high frame-rate of shots (sports). I wouldn&rsquo;t shoot a wedding with just the X100s, but it would be very useful for wandering around during the reception.</p>

<p>Despite those issues, this is probably my go to camera for 80% of my needs right now. If it had been available 10 years ago when I was considering a DSLR purchase, I might&rsquo;ve gone with this instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Started to Understand Model Binding Magic in Ember]]></title>
    <link href="http://blog.swilliams.me/words/2014/05/12/how-i-started-to-understand-model-binding-magic-in-ember/"/>
    <updated>2014-05-12T13:16:18-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/05/12/how-i-started-to-understand-model-binding-magic-in-ember</id>
    <content type="html"><![CDATA[<p>I&rsquo;m learning <a href="http://emberjs.com/">Ember.js</a> in efforts to stay <a href="http://blog.swilliams.me/words/2014/01/20/keep-your-developer-saw-sharp/">reasonably up to date</a> with client side web technologies. <a href="http://blog.swilliams.me/words/2014/05/06/oh-cool-you-want-to-be-a-web-developer/">This hasn&rsquo;t been the easiest going.</a></p>

<p>Ember&rsquo;s best feature is that it easily binds values in HTML to their corresponding properties on objects. I&rsquo;ve found the implementations of this a little confusing sometimes. Going through the Getting Started guide has been helpful, though <a href="http://emberjs.com/guides/getting-started/displaying-the-number-of-incomplete-todos/">this part tripped</a> me up for a good hour, specifically this snippet:</p>

<figure class='code'><figcaption><span>Within todos_controller.js </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">remaining</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">filterBy</span><span class="p">(</span><span class="s1">&#39;isCompleted&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;length&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;@each.isCompleted&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>That last line turns the associatied method into a <a href="http://emberjs.com/guides/object-model/computed-properties/">computed property</a>.  My understanding of computed properties was as a means to provide a simple call to complex data (eg. a <code>fullName</code> property that joins <code>firstName</code> and <code>lastName</code> properties). This particular method is on a <em>controller</em>, has a previously foreign syntax (<code>@each</code>), and the template that refers to it still uses it&rsquo;s canonical name (<code>remaining</code>).</p>

<figure>
    <img src="http://blog.swilliams.me/images/assets/ember/zoidberg.gif" alt="Wha?" />
</figure>


<p>In order to understand just what was happening, I pumped the brakes and dug into the sample application. My first question was why they were using a computed property altogether. I whipped up another method and added it to my controller:</p>

<figure class='code'><figcaption><span>todos_controller.js </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">remaining</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">filterBy</span><span class="p">(</span><span class="s1">&#39;isCompleted&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;length&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;@each.isCompleted&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'><span class="nx">derp</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;derp!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>todos {{derp}}<span class="nt">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This resulted in the method body being substituted in the template, which reminded me that <code>{{derp}}</code> was just printing out whatever <code>derp</code> evaluated to, in this case a function.<sup>1</sup> So I made <code>derp</code> a computed property:</p>

<figure class='code'><figcaption><span>todos_controller.js </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">derp</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;derp!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;what&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This worked. My <code>&lt;h1&gt;</code> was now &lsquo;todos derp!&rsquo;. In fact, you could simplify it even more by doing this: <code>property()</code> and leaving off a name altogether. It also demonstrated that the first argument to <code>property</code> didn&rsquo;t have a bearing on what goes in the Template. Next step was to substitute my static text with something useful.</p>

<figure class='code'><figcaption><span>todos_controller.js </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">derp</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">filterBy</span><span class="p">(</span><span class="s1">&#39;isCompleted&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;length&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}.</span><span class="nx">property</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And sure enough, the title was now &lsquo;todos 2&rsquo;. I suspected this would work because my controller extended <code>Ember.ArrayController</code>, giving it access to <code>filterBy</code>. This lead me back to one of my original questions: what is the purpose of <code>'@each.isCompleted'</code>?</p>

<p>I played around with the todo app a little more and noticed that my <code>{{derp}}</code> was not automatically updating when todos where checked off while the original <code>{{remaining}}</code> was. Then it hit me: <code>'@each'</code> must be a special directive for an <code>ArrayController</code> that bound that function to the <code>isCompleted</code> property of <a href="http://emberjs.com/api/classes/Ember.ArrayController.html#property__each"><em>each</em></a> object in its array. Putting a <code>console.log('called');</code> confirmed this suspicion — it&rsquo;s called every time <code>isCompleted</code> is accessed.</p>

<p>After this bit of forensics, things make a little more sense now. I do wish this association was a little more spelled out in the documentation though for us thick-headed developers.</p>

<div class="footnotes">
1. This is what JavaScript does. Open the dev tools and log a function without executing it — the body of that function prints out.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is App.net?]]></title>
    <link href="http://blog.swilliams.me/words/2014/05/06/what-is-app-dot-net/"/>
    <updated>2014-05-06T14:49:05-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/05/06/what-is-app-dot-net</id>
    <content type="html"><![CDATA[<p>Most people who have even heard of it would say that it&rsquo;s a Twitter clone, created out of <a href="http://daltoncaldwell.com/what-twitter-could-have-been">frustrations over the direction it was heading</a>. Currently, the <a href="http://app.net">home page</a> makes it look like an identity and/or messaging service. Over the last couple years, it&rsquo;s bounced around and offered different services. According to the founders, the <a href="http://daltoncaldwell.com/an-audacious-proposal">genesis</a> of it was to create a backend-as-a-service to enable developers to make the next generation of online applications.</p>

<p>The problem was that I don&rsquo;t think App.net ever moved beyond the shadow of &ldquo;It&rsquo;s a Twitter clone.&rdquo; App.net&rsquo;s API does offer the capabilities to make some really <a href="http://riposteapp.net/">slick</a> <a href="http://favd.net/">apps</a>, but there hasn&rsquo;t been any one thing that captured everyone&rsquo;s attention to make them say &ldquo;Wow!&rdquo; There is the <a href="https://alpha.app.net/">microblogging service</a>, the <a href="https://omega.app.net/">messaging service</a>, the <a href="https://broadcast.app.net">broadcast service</a>, the <a href="https://backer.app.net/">crowdfunding service</a> and <a href="http://blog.app.net/2013/01/28/announcing-the-app-net-file-api/">the cloud storage service</a>. If you&rsquo;re being unkind, you could call them the Twitter clone, the iMessage clone, the Push Notification clone, the Kickstarter clone, and the Dropbox clone. Each of those services are good, but none of them have differentiated themselves from their biggest competitors. If all of those went dark tomorrow, everybody would be able to move back to what they were using before without too much trouble.</p>

<p>There was a great initial fervor when App.net launched. Some big names supported it both vocally and financially. Unfortunately, their engagement petered out over time. The most damning evidence of this? Out of all the people on <a href="https://web.archive.org/web/20120801133202/https://join.app.net/">this page</a> the only person who still interacts on App.net regularly is <a href="https://alpha.app.net/garrytan">Garry Tan</a><sup>1</sup>.</p>

<p>I was very bullish on App.net, which makes the <a href="http://blog.app.net/2014/05/06/app-net-state-of-the-union/">latest news</a> saddening. It isn&rsquo;t the end yet, but when you have literally no employees working on a service and suspend the biggest <a href="http://blog.app.net/2012/09/27/announcing-the-app-net-developer-incentive-program/">incentive to develop on your platform</a>, it isn&rsquo;t too far away. Right now the best case I see for App.net is
that it continues along as is, but with little to no growth. I did renew my paid account this year, but I don&rsquo;t know if the service will be around for another renewal next time.</p>

<p>I don&rsquo;t like armchair quarterbacking. Saying what <a href="http://www.theonion.com/articles/woman-a-leading-authority-on-what-shouldnt-be-in-p,35922/">should have been done</a> is too easy and requires no effort on my part. I do think that a lesson to take away from this is that identity is important and needs to be clear to customers.</p>

<div class="footnotes">
1. It looks like <a href="https://alpha.app.net/peterrojas">Peter Rojas</a> and <a href="https://alpha.app.net/andrewchen">Andrew Chen</a> have feeds that syndicate to App.net. Nobody else on that list had any kind of post within the last month.

<p>And as pointed out by <a href="https://alpha.app.net/chriskrycho/post/29913830">Chris Krycho</a>, it looks like Garry&#8217;s posts are just cross-posted from Twitter using <a href="https://zapier.com/">Zapier</a>.</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oh Cool You Want to be a Web Developer?]]></title>
    <link href="http://blog.swilliams.me/words/2014/05/06/oh-cool-you-want-to-be-a-web-developer/"/>
    <updated>2014-05-06T11:07:29-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/05/06/oh-cool-you-want-to-be-a-web-developer</id>
    <content type="html"><![CDATA[<p>Just go and learn any or all of these:</p>

<ul>
<li>HTML 5</li>
<li>CSS 3</li>
<li>JavaScript</li>
<li><a href="http://coffeescript.org">CoffeeScript</a></li>
<li><a href="http://sass-lang.com/">SASS</a></li>
<li><a href="http://lesscss.org/">Less</a></li>
<li><a href="http://jquery.com/">jQuery</a></li>
<li><a href="https://angularjs.org/">Angular</a></li>
<li><a href="http://emberjs.com/">Ember</a></li>
<li><a href="http://gruntjs.com/">Grunt</a></li>
<li><a href="http://gulpjs.com/">Gulp</a></li>
<li><a href="http://bower.io/">Bower</a></li>
<li><a href="http://yeoman.io/">Yeoman</a></li>
<li><a href="http://nodejs.org/">node.js</a></li>
<li><a href="http://bourbon.io/">Bourbon</a></li>
<li><a href="http://bitters.bourbon.io/">Bitters</a></li>
<li><a href="http://compass-style.org/">Compass</a></li>
<li><a href="http://getbootstrap.com/">Bootstrap</a></li>
<li><a href="http://foundation.zurb.com/">Foundation</a></li>
<li><a href="http://handlebarsjs.com/">Handlebars</a></li>
<li><a href="http://mustache.github.io/">Mustache</a></li>
</ul>


<p>This list is not exhaustive. Some of those are optional. By the time you are done reading this, another framework or library will have been created.</p>

<p>This is a <a href="http://blog.swilliams.me/words/2013/12/02/the-frustrations-of-the-journeyman/">frustration</a> that I feel with web development these days. I spent about 2 years learning <a href="http://documentcloud.github.io/backbone/">one</a> client-side framework inside and out, but it&rsquo;s already losing relevance. Angular seems to be a good choice for employment these days, but if I go deep in it, will history repeat itself?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes From Ed Catmull]]></title>
    <link href="http://blog.swilliams.me/words/2014/05/01/notes-from-ed-catmull/"/>
    <updated>2014-05-01T12:29:37-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/05/01/notes-from-ed-catmull</id>
    <content type="html"><![CDATA[<p><a href="http://waltdisneystudios.com/corp/unit/6/bio/53">Ed Catmull</a> knows a thing or two about making Great Things. In 2007 he gave a talk at Stanford about how Pixar does their thing. It&rsquo;s almost an hour long but you should watch it.</p>

<iframe width="420" height="315" src="http://blog.swilliams.me//www.youtube.com/embed/k2h2lvhzMDc" frameborder="0" allowfullscreen></iframe>


<p>Some of the things that resonated with me and are just as applicable in other practices:</p>

<p>Present work <em>every day</em>. Even if it is incomplete or sucks. Why? It forces collaboration. If everybody is bumping up against each other, ideas will spread. Problems don&rsquo;t fester either; if someone is struggling on some task for too long it becomes apparent and somebody else can lend a hand if necessary.</p>

<p>Success hides problems. This might be the biggest one. It&rsquo;s easy to dismiss problems during times of feast. Catmull also mentioned that they have an open-door policy for everyone and strive to make it safe for <em>everyone</em> to tell the truth. This is hard to do. Even if the CEO&rsquo;s door is open, rank-and-file employees will simply feel <a href="http://www.inc.com/magazine/20080901/how-hard-could-it-be-how-i-learned-to-love-middle-managers.html?partner=fogcreek">intimidated walking in and stating their mind</a>.</p>

<p>To solve this, Pixar introduced post-morterms; essentially a discussion after the completion of a project to highlight what worked and what didn&rsquo;t. These can be annoying, which means that people will game them, even unintentionally. Pixar found that they had to change up the post-morterms every time in order to get real value from them.</p>

<p>What it boiled down to was that their goal was to create teams of good people that functioned well together. Good people don&rsquo;t tolerate nonsense. If you give a bad idea to a good group, they&rsquo;ll fix it, or throw it away and come up with a better one. A group of mediocre people will take a good idea and screw it up. Therefore, hiring the right people, and then managing them is critical.</p>

<p>Human organziations are inherently unstable and fall over slowly. The fall is slow, but the collapse is quick. The more I experience I get, the more I see people management as a critical role on any project with more than one person. A good project manager constantly takes information from the team and acts on that in order to avoid the fall.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monument Valley is Pretty]]></title>
    <link href="http://blog.swilliams.me/words/2014/04/23/monument-valley-is-pretty/"/>
    <updated>2014-04-23T20:24:19-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/04/23/monument-valley-is-pretty</id>
    <content type="html"><![CDATA[<p><a href="https://itunes.apple.com/us/app/monument-valley/id728293409?mt=8">Monument Valley</a> is a recently released iOS game. It&rsquo;s received <a href="http://www.macstories.net/reviews/monument-valley-review/">stellar</a> <a href="http://www.techhive.com/article/2144770/you-should-play-monument-valley.html">reviews</a> for its art, and I have to agree. Just about every screen in the game is worthy of a screenshot. So much so, that I&rsquo;ve started to use some of them as wallpapers on my phone. Here are my favorites.</p>

<div class="gallery-image gallery-image-ios-screenshot">
    <a href="http://blog.swilliams.me/images/assets/monument-valley/1.png"><img src="http://blog.swilliams.me/images/assets/monument-valley/1.png" alt="Monument Valley 1" /></a>
</div>




<div class="gallery-image gallery-image-ios-screenshot">
    <a href="http://blog.swilliams.me/images/assets/monument-valley/2.png"><img src="http://blog.swilliams.me/images/assets/monument-valley/2.png" alt="Monument Valley 2" /></a>
</div>




<div class="gallery-image gallery-image-ios-screenshot">
    <a href="http://blog.swilliams.me/images/assets/monument-valley/3.png"><img src="http://blog.swilliams.me/images/assets/monument-valley/3.png" alt="Monument Valley 3" /></a>
</div>




<div class="gallery-image gallery-image-ios-screenshot">
    <a href="http://blog.swilliams.me/images/assets/monument-valley/4.png"><img src="http://blog.swilliams.me/images/assets/monument-valley/4.png" alt="Monument Valley 4" /></a>
</div>




<div class="gallery-image gallery-image-ios-screenshot">
    <a href="http://blog.swilliams.me/images/assets/monument-valley/5.png"><img src="http://blog.swilliams.me/images/assets/monument-valley/5.png" alt="Monument Valley 5" /></a>
</div>




<div class="gallery-image gallery-image-ios-screenshot">
    <a href="http://blog.swilliams.me/images/assets/monument-valley/6.png"><img src="http://blog.swilliams.me/images/assets/monument-valley/6.png" alt="Monument Valley 6" /></a>
</div>


<p>For my money, it doesn&rsquo;t get much better than the last one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing Your Password]]></title>
    <link href="http://blog.swilliams.me/words/2014/04/11/changing-your-password/"/>
    <updated>2014-04-11T08:23:03-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/04/11/changing-your-password</id>
    <content type="html"><![CDATA[<p>With news of the <a href="http://heartbleed.com/">heartbleed vulnerability</a> I&rsquo;ve taken the <strike>paranoid</strike> precautionary measure of changing all my passwords. I have over 200 logins in my <a href="https://agilebits.com/onepassword">1Password</a><sup>1</sup> library, so I&rsquo;ve seen just about every kind of password change process imaginable over the last day or two. My conclusion is that there are a lot of <strong>terrible</strong> implementations of this process.</p>

<p>Security conflicts with convenience, and changing passwords is never convenient. But there are ways to at least make it quick. Here&rsquo;s what I expect when I got to a site to change my password:</p>

<ol>
<li>Sign in.</li>
<li>Click something like &lsquo;Settings&rsquo;, &lsquo;Account&rsquo;, or &lsquo;Profile&rsquo;. Ideally, there should only be one of those on the page to avoid guessing.</li>
<li>Have the word &lsquo;password&rsquo; on that Settings page. Be it a button, link, or inline form, just make it easy to find.</li>
<li>If I need to enter my old password first, make it the first field.</li>
<li>Display some kind of notification that my change was successful.</li>
<li>Optionally, send me an email telling me it changed, just in case a bad guy did it.</li>
</ol>


<p>That&rsquo;s not so bad right? This has been the standard way of doing things ever since <a href="http://en.wikipedia.org/wiki/Cgi-bin">cgi-bin</a> was a thing. But so many websites get it wrong.</p>

<ul>
<li>First of all, <em>have</em> a Change Password form. More than a couple sites I went to don&rsquo;t have one and rely on you to do the Reset My Password dance. This means I have to sign out, go back to the sign in page, click the reset link, enter my email, wait for the email, open the email, click the link in the email, then finally enter a new password. Shame on you if you make me do this. Shame.</li>
<li>Don&rsquo;t restrict password length. 1Password let&rsquo;s me create a 50 character password, yet I&rsquo;d say at least 40% of the sites I went to couldn&rsquo;t handle a password that long.</li>
<li>If you have to restrict length for some reason, tell me exactly what that maximum is.</li>
</ul>


<figure>
    <img alt="Password WTF" src="http://blog.swilliams.me/images/assets/password-wtf.png" />
</figure>


<ul>
<li>Don&rsquo;t restrict what characters I can use. There is no technical reason I shouldn&rsquo;t be able to use spaces or symbols in a password.</li>
<li>Don&rsquo;t restrict copy/paste in the password field. Paypal was the only one I saw that did this, and it boggles my mind. A random, complex password is going to be more secure than one I can easily type in (which can be <a href="http://en.wikipedia.org/wiki/Rainbow_tables">cracked quickly</a>). Don&rsquo;t actively prevent me from trying to make my financial data secure!</li>
</ul>


<p>Security already has its own set of barriers, and a certain subset of people will never take it seriously. As a web developer, it is entirely up to you to keep that subset from growing in size.</p>

<div class="footnotes">
1. You really, really, really, really, really, really, should use it too, or a similar product.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Computers Through the Ages Part III]]></title>
    <link href="http://blog.swilliams.me/words/2014/03/06/my-computers-through-the-ages-part-iii/"/>
    <updated>2014-03-06T13:13:51-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/03/06/my-computers-through-the-ages-part-iii</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve been through the <a href="http://blog.swilliams.me/words/2014/01/09/my-computers-through-the-ages">pre-history</a>, and then the <a href="http://blog.swilliams.me/words/2014/01/25/my-computers-through-the-ages-part-ii">awkward years</a>. Now we come at last to the present. From here on out, it&rsquo;s <a href="http://apple.com">Apple</a> all the way down, so if that ruins your day, please feel free to stop reading and go outside to contemplate your existance.</p>

<p>Why did I switch? Most of it came down to what I use a computer for. I&rsquo;m a software developer by trade. The first part of my career was mostly in the Microsoft stack, but by the late 2000&rsquo;s I got the itch to move on to <a href="http://blog.swilliams.me/words/2013/12/02/the-frustrations-of-the-journeyman/">something else</a>. Every kind of development platform that I&rsquo;m interested in runs better on a Unix-like system. Apple doesn&rsquo;t make me happy 100% of the time, but I don&rsquo;t think I&rsquo;ll be leaving their ecosystem for a while.</p>

<p><strong>24&#8221; iMac</strong> <a href="http://support.apple.com/kb/sp507">(2009)</a> I&rsquo;m not sure what I was expecting when I made the switch, but I wasn&rsquo;t terribly fond of this one. The hardware was great; a beautiful display, pretty fast processor, and a spacious hard drive. I loved that I didn&rsquo;t have a beige butt-ugly tower on my desk anymore. My frustrations were entirely with OS X.  It came with <a href="http://www.apple.com/support/leopard/">10.5 Leopard</a>, with <a href="http://www.apple.com/support/snowleopard/">10.6 Snow Leopard</a> released shortly after the computer showed up on my porch. After upgrading, it had a myriad of reliability problems. What made me grind my teeth were the <a href="http://en.wikipedia.org/wiki/Kernel_panic">kernel panics</a>. A kernel panic is an error in the Operating System that it cannot recover from, stopping everything and requiring a restart. You might be familiar with its colloquial name on Windows: the <a href="http://en.wikipedia.org/wiki/File:Windows_XP_BSOD.png">Blue Screen of Death</a>. I would average one of those every month on my iMac, which is astronomically high for an OS marketed with <a href="http://a3.img.mobypicture.com/570253fecab177d9605be5d157c59e18_view.jpg">&ldquo;it just works&rdquo;</a> as its slogan.</p>

<p>It frustrated me enough that I considered going back to Windows. What held me back was that I had started getting more and more into <a href="http://rubyonrails.org/">Rails</a> development, which (still) doesn&rsquo;t run very well on Windows<sup>1</sup>. I had started to work on a <a href="http://blog.swilliams.me/words/2013/12/26/whither-shootsy-or-how-i-tried-and-failed-a-startup">Rails based project</a> that would have benefited from having a laptop in order to work outside the house. Despite my initial reservations for OS X, I doubled down.</p>

<p><strong>13&#8221; MacBook Pro</strong> <a href="http://support.apple.com/kb/sp583">(2010)</a> This was the cheapest Mac laptop at the time. With impeccable timing, I bought this right before Apple released the new <a href="http://www.apple.com/macbook-air/">MacBook Airs</a>. This wasn&rsquo;t a particularly fast computer, but it showed me how well OS X could work when it doesn&rsquo;t constantly blow up. I don&rsquo;t know if my iMac was a bit of a lemon, or if OS X just works better on laptops, but it was noticeable.</p>

<p>It also made me realize that I could get by with just a laptop. Syncing data between two computers is a bit of a pain, even with things like Dropbox and source control management. On more than one occasion I had to call my wife and walk her through performing an <a href="http://hgbook.red-bean.com/read/a-tour-of-mercurial-the-basics.html#x_68"><code>hg push</code></a> in order to send me the latest bits of a project. I held on to this computer for a little while and then sold it to put together enough scratch for the next one.</p>

<p><strong>15&#8221; MacBook Pro</strong> <a href="http://support.apple.com/kb/sp620">(2011)</a> I went laptop only for the first time with this computer. It was my workhorse for almost 3 years. On it, I created Rails apps, iOS apps, and even managed to use it with my day job in .NET-land (through VMWare). It was reliable as a rock even with me mucking around inside it to upgrade the memory and hard drive. Even though I had this computer longer than most others, there&rsquo;s not a whole lot to say about it, which is a good thing.</p>

<p><strong>13&#8221; MacBook Pro w/Retina</strong> <a href="http://support.apple.com/kb/SP691">(2014)</a> Here we are (finally) in the present. I didn&rsquo;t think the retina screen would be that much of a deal breaker, but I&rsquo;d rather sell my left foot than give it up now. I can leave my power cord at home and fit in an entire work day on the battery. Oh yeah, it&rsquo;s also crazy fast despite only having a dual-core CPU (my last one was a quad). All of that comes in a package just under 3.5 pounds. I&rsquo;ve only had this computer for a couple of months, but it&rsquo;s already the best one I&rsquo;ve ever owned.</p>

<p>I don&rsquo;t know what the future will bring. I like the new <a href="http://www.apple.com/mac-pro/">Mac Pro</a>, but not enough to spring for its $3000+ price tag. And I don&rsquo;t know if I&rsquo;d go back to a desktop again. I&rsquo;d like to hold onto this laptop for as long as I can.</p>

<div class="footnotes">
1. Rails by itself runs fine on Windows. It&#8217;s when you start adding gems into the mix that things start going hinky. And then there&#8217;s the whole cygwin thing. Ugh.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from Squarespace]]></title>
    <link href="http://blog.swilliams.me/words/2014/03/05/migrating-from-squarespace/"/>
    <updated>2014-03-05T09:23:18-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/03/05/migrating-from-squarespace</id>
    <content type="html"><![CDATA[<p>Squarespace is a popular service to host a website or blog. You might have seen their <a href="http://www.youtube.com/watch?v=S0Or1f_RxKQ">Super Bowl commercial</a> or heard about them on one of the hundred podcasts they sponsor. I signed up about a year and a half ago and used it as my main blog. I&rsquo;ve decided to move away and use <a href="http://octopress.org">Octopress</a> to host my blog on <a href="http://octopress.org/">GitHub Pages</a> instead.</p>

<p>Why? Well, for starters, it&rsquo;s slow to use. I think it&rsquo;s a byproduct of the way they organized their <a href="http://en.wikipedia.org/wiki/Single-page_application">single-page application</a> architecture. I find myself having to wait for things to open in modal windows, or to load another menu.</p>

<p>The layout tools are bad. If all you do is write text and link to stuff, this doesn&rsquo;t matter. Sometimes I like to have <a href="http://blog.swilliams.me/words/2014/01/26/demystifying-ruby-dsls">in depth coding posts</a> that have multiple blocks of code within them. This is incredibly painful to do with the Squarespace layout tools. Here&rsquo;s the process:</p>

<ol>
<li>Hover over an existing text block.</li>
<li>Click the appropriate &ldquo;+&rdquo; button.</li>
<li>Scroll down to find the &ldquo;CODE&rdquo; button.</li>
<li>Paste in the code (after making sure the indentation is correct)</li>
<li>Go to step 1 and this time, select Markdown.</li>
<li>Rinse and repeat for <em>every</em> block and image you want.</li>
</ol>


<p>What you see is <em>definitely not</em> what you get. Sizing images to align to the left or right of a paragraph is awful. For some reason, the editing font on the admin page is different than the one on the actual site. This means that even if everything lines up on the admin page, it might not on the live site. Fixing this is tedious. Again, due to the single-pagedness of the admin site, you can&rsquo;t easiliy open the preview in a new tab or window (&lsquo;Open in new page&rsquo; does nothing). You need to open a brand new browser window, navigate to your admin site, then click on the preview button there.</p>

<p>Saving a post in the editor closes the modal that contains it. This means that the workflow for making any kind of adjustment is:</p>

<ol>
<li>Do the thing above to get a second window open to look at the preview.</li>
<li>Click the post in the first window to edit.</li>
<li>Wait a second.</li>
<li>Find the typo to fix. This is extra fun if you have multiple blocks of text.</li>
<li>Fix the typo and hit save. (Modal closes)</li>
<li>Switch over to the preview in the second window and refresh.</li>
<li>If it&rsquo;s not right, repeat steps 2-6 until it is.</li>
</ol>


<p>All of this for about $100/year (or more).</p>

<p>Octopress is a static site generator that is aimed at developers. If you don&rsquo;t know <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, <a href="http://git-scm.com/">git</a>, as well as HTML + CSS consider something else. However, since I am familiar with all of those, it works for me.</p>

<p>The problem is exporting my content from Squarespace. The only export option available is one for <a href="http://wordpress.org/">Wordpress</a>, which dumps everything into an XML file. Since I&rsquo;m not using Wordpress, this didn&rsquo;t work for me. My blog has been quite the sojourner, created orginally on Wordpress, then to Posterous (lol), and finally Squarespace. It&rsquo;s accumulated a bit of cruft. For some reason, older posts did not export properly; if they contained an image and text, the text was deleted.</p>

<p>After some fiddling, I put together a <a href="https://github.com/swilliams/squarespace-exporter">script</a> that would walk each post on the blog, download everything and then move onto the next. I did run into some gotchas though:</p>

<ul>
<li>Some of the older images were named &ldquo;#img.jpg&rdquo;. I ended up <a href="https://github.com/swilliams/squarespace-exporter/blob/master/script.rb#L151">generating</a> a random string for the filename and removing the hashtag.</li>
<li><code>&lt;img&gt;</code> tags used a <code>data-src</code> attribute instead of a standard <code>src</code> attribute. <a href="https://github.com/swilliams/squarespace-exporter/blob/master/script.rb#L181">The fix was to rename the attribute</a>.</li>
<li>There was a veritable boatload of extra markup and attributes on each post, which made things look weird. I ended up parsing the entire HTML of each post and <a href="https://github.com/swilliams/squarespace-exporter/blob/master/script.rb#L223">stripping</a> out all the unnecessary stuff.</li>
</ul>


<p>There are still some issues that I&rsquo;ll need to address on a case by case basis, but it&rsquo;s a good 80% solution right now.</p>

<figure>
    <img src="http://blog.swilliams.me/images/assets/octopress.png" alt="Octopress" />
</figure>


<p>I like Octopress because it is fast, easy for me to manage, and keeps my content in a simple (and portable) format. I just hope that this will last me for a while. It doesn&rsquo;t do nearly as many things as Squarespace, but most of those I don&rsquo;t need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demystifying Ruby DSLs — Part 2]]></title>
    <link href="http://blog.swilliams.me/words/2014/02/21/demystifying-ruby-dsls-part-2/"/>
    <updated>2014-02-21T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/02/21/demystifying-ruby-dsls-part-2</id>
    <content type="html"><![CDATA[<p><a href="http://blog.swilliams.me/words/2014/01/26/demystifying-ruby-dsls">Last time we learned about how to use modules to dynamically add functionality to a class</a>. This time let&rsquo;s take a look at doing that, but customizing our extensions at runtime.</p>

<p>What helped me ultimately understand how these things work is that you are building up classes on the fly. It&rsquo;s kind of like when you <code>include</code> a module, it&rsquo;s editing that class to add more methods to it. Think of a bunch of Legos. Each Lego is a module with various methods on it. At runtime they assemble together to build a castle.</p>

<figure>
    <img alt="Lego Castle by InSapphoWeTrust on Flickr." src="http://blog.swilliams.me/images/assets/lego-annotated.png">
    <figcaption><a href="http://www.flickr.com/photos/56619626@N05/7406185206/in/photolist-chsCQo-chsDcG-chsCVb-chsD97-chsBY3-chsCeN-chsDid-bgETZB-8FZGC9-9nsJ9P-8oTk1n-dCdMj4-f8b3QR-7J1LqD-7BnYDa-7BnZmZ-7BrJZw-7BrLsb-7BnVLP-9XN1mi-cnFar5-chsCy7-gC3qkX-chsCKW-chsCs1-chsCoN-aCZJqe-aCZJe4-chsCcf-chsC41-aCcgjW-aC9BwX-aCcgf3-aC9BE6-aC9BKr-aCcgUf-aCcgRw-aC9C9v-aCcgXo-chsC7J-chsBZw-a5YVbT-em9rGR-em9ru8-emfdMW-em9tEg-emfewq-emfeEm-emfdxf-emfeh9-emfdi5">Lego Castle</a> by <a href="http://www.flickr.com/photos/skinnylawyer/">InSapphoWeTrust</a> on Flickr.</figcaption>
</figure>


<h3>Dynamically Adding</h3>

<p>What if those Legos could generate even more Legos as you were building with them, and then intelligently join themselves together?</p>

<p>If you&rsquo;re familiar with Rails, you&rsquo;ve seen that you can just declare associations within a model — <code>:has_many</code>, <code>:has_one</code>, and so on. Once you add those directives to your class, suddenly you have access to brand spanking new methods. Have you ever wondered how that worked? Let&rsquo;s implement a rudimentary version.</p>

<p>Think for a moment about <code>:has_many</code>. What would you expect the line <code>has_many :gerbils</code> methods to do?  You would have to have a <code>gerbils</code> method to retrieve the little fellas, and another one, <code>gerbils=(new_value)</code> to set them (and others to add them and so on, but <a href="http://en.wikipedia.org/wiki/Keep_it_simple_stupid">KISS</a>). You implement that with a generic <code>get_child_models(child_name)</code> method, but that feels like the Java (™ Oracle Corporation) way&hellip; and I have too much self respect to go down that path. Instead we can take advantage of Ruby&rsquo;s metaprogramming capabilities and generate them dynamically.</p>

<p>One way to do this is with <code>eval</code>.</p>

<h3>A Word on Eval</h3>

<p>Ruby has a few versions of <code>eval</code>. They all take strings or blocks and turn them in code that is executed.</p>

<ul>
<li>There&rsquo;s the <a href="http://www.ruby-doc.org/core-2.1.0/Kernel.html#method-i-eval">standard one</a> that executes arbitrary code.</li>
<li><a href="http://ruby-doc.org/core-2.1.0/Module.html#method-i-class_eval">class_eval</a> — similar to vanilla <code>eval</code>, but executes the code in the context of the Class itself. There&rsquo;s also <code>module_eval</code> which does the same thing (more or less). Example:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Monkey</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="no">Monkey</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">Monkey</span><span class="o">.</span><span class="n">class_eval</span> <span class="sx">%q(def screech() &#39;Eek Eek&#39; end)</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">screech</span> <span class="c1"># Eek Eek</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="">instance_eval</a> — modifies a class, but from an instance point of view, <em>and only for that particular instance</em> (this is called a <a href="http://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/39-ruby-s-object-model/lessons/131-singleton-methods-and-metaclasses">Singleton method</a>).</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Monkey</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="no">Monkey</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">m2</span> <span class="o">=</span> <span class="no">Monkey</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">instance_eval</span> <span class="sx">%q(def screech() &#39;Eek Eek&#39; end)</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">screech</span> <span class="c1"># Eek Eek</span>
</span><span class='line'><span class="n">m2</span><span class="o">.</span><span class="n">screech</span> <span class="c1"># NoMethodError: undefined method `screech&#39; for #&lt;Monkey:0x007fa6f768bac8&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using these techniques you can generate the set of methods for our <code>:has_many</code> implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Associations</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="ss">Associations</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">has_many</span><span class="p">(</span><span class="n">thingies</span><span class="p">)</span>
</span><span class='line'>      <span class="n">code</span> <span class="o">=</span> <span class="sx">%(</span>
</span><span class='line'><span class="sx">        def </span><span class="si">#{</span><span class="n">thingies</span><span class="si">}</span><span class="sx"></span>
</span><span class='line'><span class="sx">            # retrieve stuff from here</span>
</span><span class='line'><span class="sx">        end</span>
</span><span class='line'>
</span><span class='line'><span class="sx">        def </span><span class="si">#{</span><span class="n">thingies</span><span class="si">}</span><span class="sx">=(new_value)</span>
</span><span class='line'><span class="sx">            # set new_value here</span>
</span><span class='line'><span class="sx">        end</span>
</span><span class='line'><span class="sx">      )</span>
</span><span class='line'>      <span class="nb">class_eval</span> <span class="n">code</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if you <code>include Associations</code> in your class, you can call <code>has_many :hamsters</code> or <code>has_many :gerbils</code> or <code>has_many :guinea_pigs</code> and have all of your getters and setters created.</p>

<figure>
    <img alt="This is you with all the gerbil methods." src="http://blog.swilliams.me/images/assets/cashew.jpg">
    <figcaption>This is you with all the gerbil methods.</figcaption>
</figure>


<h3>Caution</h3>

<p>I&rsquo;m not a big fan of <code>eval</code>, at least when using it with strings. The biggest reason is that it makes bugs harder to find. The Ruby interpreter will point out syntax errors when the file loads, but a typo in an evalled string won&rsquo;t get caught until runtime. The longer the string, the more likely something bad will creep in there. And some of these dynamically created methods will be long. I&rsquo;m talking <a href="http://www.amazon.com/gp/product/B0026L7H20/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0026L7H20&amp;linkCode=as2&amp;tag=thepetzoo-20">Lord of the Rings Extended Edition</a> long.</p>

<p>Fortunately there is a better way. The eval methods also take blocks, which work pretty well in most cases. For the purposes of dynamically generating methods, I prefer using <code>define_method</code> <a href="http://ruby-doc.org/core-2.1.0/Module.html#method-i-define_method">source</a>. It&rsquo;s available on <code>Module</code> (and therefore classes too) and, just like it says on the tin, is designed to create methods on the fly and add them to a class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">has_many</span><span class="p">(</span><span class="n">thingies</span><span class="p">)</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="n">thingies</span><span class="o">.</span><span class="n">to_s</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># retrieve stuff from here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">thingies</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># set new_value here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s kinda similar to the eval code, in fact, <code>define_method</code> passes itself along to <code>instance_eval</code>, so when all is said and done, it&rsquo;s merely for our convenience. But is easier to test, and will complain loudly if there&rsquo;s a syntax error.</p>

<p>Working with actual code rather than a string makes refactoring easier too. Let&rsquo;s say you want to enable your users to define their own implementations of the generated rodent methods. Pulling that out into its own method is simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_method_without_clobbering</span> <span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">method_definition</span><span class="p">)</span>
</span><span class='line'>  <span class="k">unless</span> <span class="nb">method_defined?</span> <span class="n">method_name</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="n">method_name</span><span class="p">,</span> <span class="n">method_definition</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">has_many</span><span class="p">(</span><span class="n">thingies</span><span class="p">)</span>
</span><span class='line'>  <span class="n">add_method_without_clobbering</span> <span class="n">thingies</span><span class="o">.</span><span class="n">to_s</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># retrieve stuff from here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">add_method_without_clobbering</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">thingies</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># set new_value here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s still possible with string evals, but is easier to read in my eyes.</p>

<p>That&rsquo;ll wrap up this entry on DSLs. There&rsquo;s only one other big piece of the pie I&rsquo;d like to cover — blocks, but you can do a whole lot without them.</p>

<p>One thing to keep in mind when writing DSLs is that it can be hard to follow along. Document everything, especially the esoteric parts. It might even be a good idea to diagram the path of all the <code>include</code> chain. DSLs can make client code easier to write, but usually at the expense of crazy complexity within the DSL itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demystifying Ruby DSLs]]></title>
    <link href="http://blog.swilliams.me/words/2014/01/26/demystifying-ruby-dsls/"/>
    <updated>2014-01-26T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/01/26/demystifying-ruby-dsls</id>
    <content type="html"><![CDATA[<p>I like <a href="https://www.ruby-lang.org/en/">Ruby</a>. It has a way of appearing clean and simple, while still being expressive. Due to its <a href="http://en.wikipedia.org/wiki/Dynamic_typing#Dynamic_type-checking_and_runtime_type_information">typing system</a> you can bend it in a variety of ways to do certain things that would be very complicated in other languages, or make you write an entire compiler. I&rsquo;m talking, of course, about Domain Specific Languages, or <a href="http://en.m.wikipedia.org/wiki/Domain_specific_language">DSLs</a>. If you&rsquo;ve ever used a popular Ruby library (like Rails, or RSpec, or anything else) then you&rsquo;ve used a DSL. Rails in particular has a couple different ones:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="c1"># Routes</span>
</span><span class='line'> <span class="c1"># config/routes.rb</span>
</span><span class='line'> <span class="ss">DerptyDerp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">resources</span> <span class="ss">:users</span>
</span><span class='line'>   <span class="n">resources</span> <span class="ss">:dinguses</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:show</span><span class="o">]</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'> <span class="c1"># ActiveRecord</span>
</span><span class='line'> <span class="c1"># app/models/user.rb</span>
</span><span class='line'> <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>   <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>   <span class="n">has_one</span> <span class="ss">:dingus</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And so on. At first glance, the code that allows this can be intimidating, especially when it&rsquo;s been broken up and refactored across 20 different classes and modules. Fortunately, there are probably only about 10 things that you really need to know to read along, and to make them yourself.</p>

<h3>Class Methods</h3>

<p>Did you know that you can execute code right from within a class declaration? Well, you can. Try it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Derp</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">can_eat_sandwiches</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I LOVE CATS&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">can_eat_sandwiches</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When that class is read by the interpreter, it&rsquo;ll execute the <code>can_eat_sandwiches</code> method and print the non-sequitur to the console. This&rsquo;ll even work through inheritance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Herp</span> <span class="o">&lt;</span> <span class="no">Derp</span>
</span><span class='line'>  <span class="n">can_eat_sandwiches</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you&rsquo;ll have a wonderful message printed out twice. This technique can be used to do more than just clutter up a log file too! For example, in Rails when you <a href="https://github.com/rails/rails/blob/9c025ab6e9731dde56186b41ba5d4f216a48c831/activemodel/lib/active_model/validations.rb#L140">setup validation</a>, all you&rsquo;re doing is calling another method.</p>

<h3>Put it into a Module</h3>

<p>Sometimes you want to add functionality to a class without locking it into a long inheritance chain. Ruby uses <a href="http://www.tutorialspoint.com/ruby/ruby_modules.htm">Modules</a> to accomplish this, so you can pull your methods into a separate file to include them at will. There&rsquo;s a catch though before you dive in. Traditionally, you&rsquo;d include a module like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TheHerppening</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">can_eat_sandwiches</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sandwichable</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TheHerppening</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you know how modules work, you might&rsquo;ve noticed that will only add <code>can_eat_sandwiches</code> to <em>instances</em> of <code>Sandwichable</code>, not to <code>Sandwichable</code> itself. Which means that calling <code>can_eat_sandwiches</code> directly in the class won&rsquo;t work. But fear not! Ruby can be molded in many dark and fearsome ways. Rather than using <code>include</code>, you can use <code>extend</code> to add methods to a class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Sandwichable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">TheHerppening</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">can_eat_sandwiches</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aaaaand we&rsquo;re back in business. But, say you wanted to have some methods that needed to be on instances, and some for the class? Can you mix both? Sure. Just wrap them in different modules and add them with the appropriate calls. There&rsquo;s even a pattern to follow for naming the modules: <code>ClassMethods</code> and <code>InstanceMethods</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TheHerppening</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">can_eat_sandwiches</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;DING&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">eat_the_sandwich</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;I wish I could marry a sandwich.&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>They can even be in the same file. As a side note, this is also how you can do namespacing in Ruby. Including these can be a little tedious if you have to add this to lots of classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Sandwichable</span>
</span><span class='line'>    <span class="kp">extend</span> <span class="ss">TheHerppening</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'>    <span class="kp">include</span> <span class="ss">TheHerppening</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">can_eat_sandwiches</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not to mention ugly. And if there&rsquo;s one thing a good Ruby coder can&rsquo;t stand, it&rsquo;s ugly code. Let&rsquo;s fix that.</p>

<p><a href="http://ruby-doc.org/core-2.1.0/Module.html">Modules</a> (and classes) have all kinds of meta-programming capabilities built in. I encourage you to go and peruse them at your leisure. What we&rsquo;ll focus on here is the <code>[included](http://ruby-doc.org/core-2.1.0/Module.html#method-i-included)</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dingus</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">send</span> <span class="ss">:include</span><span class="p">,</span> <span class="ss">Dingus</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="ss">Dingus</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of a sudden, your class now has all of the extra stuff from the <code>Dingus</code> module inside it.</p>

<p>That might be jumping ahead a few steps, what with the <code>class &lt;&lt; self</code> and all. Don&rsquo;t forget that in Ruby, <em>everything</em> is a class, even modules. Conceptually it might be easier to understand if you look at <code>Module</code>&rsquo;s ancestors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Module</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="no">Module</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="ss">PP</span><span class="p">:</span><span class="ss">:ObjectMixin</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, a <code>Module</code> is just a subclass of <code>Object</code> and can be treated as such. <a href="http://www.youtube.com/watch?v=WFNEgdwjEhs">Whoa</a>. Specifically, the <code>class &lt;&lt; self</code> allows you to put class level methods on the module (you can also do this to a class as an alternative to <code>def self.whatevers</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dingus</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">say_hi</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;HI&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dingus</span><span class="o">.</span><span class="n">say_hi</span> <span class="c1"># HI</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, <code>included</code> is called when that module is included in a class. This means you can set off a chain reaction of includes with just a single one.</p>

<p>This is just the start. Ruby gives you enough metaprogramming rope to build a hammock and then hang yourself with the leftovers. We&rsquo;ll get into some of the other ways to do this later on, including <a href="http://stackoverflow.com/q/4911353/736">blocks</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Kernel.html#method-i-eval">eval</a>, and the infamous <a href="http://www.ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing">method-missing</a>. I encourage you to start digging into some code, and even trying a little of this yourself. Once you get a few reps in, understanding how DSLs work becomes much easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Computers Through the Ages Part II]]></title>
    <link href="http://blog.swilliams.me/words/2014/01/25/my-computers-through-the-ages-part-ii/"/>
    <updated>2014-01-25T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/01/25/my-computers-through-the-ages-part-ii</id>
    <content type="html"><![CDATA[<p>In <a href="http://blog.swilliams.me/words/2014/01/09/my-computers-through-the-ages">Part 1</a> I talked about my first few computers. They were an important part of my childhood, and shaped the person I would become and the career I chose. When I went to college I started to build and upgrade my own PCs. Things went well enough at first, but then got a little out of hand.</p>

<h3>Dark Ages</h3>

<p><strong>Custom PC #1</strong> (2000) Since I was still in college, I didn&rsquo;t have very much money and bought some dirt cheap parts from websites that may have been run by questionable companies. These parts were leftover from <a href="http://en.wikipedia.org/wiki/Oem">OEMs</a> and didn&rsquo;t have real retail boxes. Some would just show up with a minimal layer of bubble wrap around the bare hardware. I had bought a <a href="http://en.wikipedia.org/wiki/Pentium_iii">Pentium III CPU</a>, but screwed up putting the heatsink on it. It was too unstable to run at its advertised speed, so I had to <em>underclock</em> it or it&rsquo;d just lock up the whole system within minutes. It could run <a href="http://en.wikipedia.org/wiki/Quake_III_Arena">Quake 3</a> well enough though at that speed.</p>

<p><strong>Custom PC #2</strong> (2001) If at first you don&rsquo;t succeed right? This was the only time I strayed away from the Intel and bought an <a href="http://en.wikipedia.org/wiki/Amd_athlon">AMD Athlon processor</a>. I had learned from my mistake and assembled it correctly, but it also had problems and would lock up at odd times. I remember trying to show my parents just what a computer could do by playing an assortment of Led Zeppelin mp3s, and halfway through Stairway it froze and needed to be restarted. I was either not a very good PC builder or kept buying crummy parts. Probably a little from column A and a little from column B.</p>

<p>I hit the nadir of my computer history while putting this computer together. During the assembly I saw that there were some weird red splotches on the inside of the case but couldn&rsquo;t figure out what they were. More started to appear and then I realized that I had cut my hand on a sharp hunk of metal from the bargain basement case and I was bleeding all over it.</p>

<h3>Working Stiff</h3>

<p><strong>Custom PC #3</strong> (2004) I had a real jobby-job and was earning more than the $Nothing I was in college, so I was finally able to afford computer parts that came in actual boxes, and wouldn&rsquo;t require keeping a roll of bandages nearby. I went back to Intel and got a <a href="http://en.wikipedia.org/wiki/Pentium_IV">Pentium 4</a> to run <a href="http://en.wikipedia.org/wiki/Windows_xp">Windows XP</a>. This was my first DIY computer that actually ran ok. It was also the first time I used an LCD monitor. The <a href="http://reviews.cnet.com/lcd-monitors/dell-ultrasharp-1905fp/4505-3174_7-31232074.html">19&#8221; Dell Ultrasharp</a> was a big upgrade to the cumbersome CRTs I had been using.</p>

<p><strong>Custom PC #4</strong> (2007) My last Windows PC, and also the best. My brother-in-law worked at Intel and as &ldquo;payment&rdquo; for taking some pictures at his wedding gave me a nice <a href="http://en.wikipedia.org/wiki/Core_2_duo#Core_2_Duo">Core 2 Duo</a> CPU. The prior one worked well enough, but was very loud. Pentium 4&rsquo;s were known to run hot, and my case required a number of fans to keep mine from melting through to the Earth&rsquo;s core. The Core 2 Duo was much quieter.</p>

<p>Honestly, there wasn&rsquo;t anything very memorable about this one. It was a Camry — reliable, but otherwise unremarkable.</p>

<p>Things were starting to change for me. I had been a software developer working in the <a href="https://msdn.microsoft.com/">Microsoft stack</a> for a long time and felt a seven year itch to move on to different things.</p>

<h3>Fruit</h3>

<p>I never liked Apple computers. When I was growing up in the early-mid 90s, it was the &ldquo;dark&rdquo; times for Apple, when they kept releasing unremarkable computers with ancient notions of software. Even when Steve Jobs returned,  I thought of them as too expensive and fluffed up with a bunch of annoying marketing. I especially despised the original iMac<sup>1</sup> with the <a href="http://www.youtube.com/watch?v=83nS4EGKU04">goofy colors</a>, <a href="http://en.wikipedia.org/wiki/Apple_USB_Mouse">awful mouse</a>, and thought that it was dead in the water because it lacked a floppy drive. This wouldn&rsquo;t be the first time a technical prediction of mine was hilariously off base.</p>

<p>As time went on I did start to like the industrial design of a few models. The original <a href="http://en.wikipedia.org/wiki/PowerBook_G4#Titanium_PowerBook_G4">Titanium Powerbooks</a> (so thin!), and the <a href="http://en.wikipedia.org/wiki/G4_cube">G4 Cube</a> looked especially nice to my eyes, but they were still way too expensive for my budget.</p>

<p>Around the time they switched over to Intel processors I started to reconsider my position. I liked that they were <a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/OSX_Technology_Overview/SystemTechnology/SystemTechnology.html">Unixy</a>, making certain kinds of web development easier. Eventually, some of the more garish designs of OS X were <a href="http://arstechnica.com/apple/2007/10/mac-os-x-10-5/3/">stripped back</a>, and I decided to make the leap.</p>

<figure>
    <img alt="30 Years of the Mac" src="images/assets/30years.png" />
    <figcaption>30 Years of the Mac</figcaption>
</figure>


<p>Apple recently celebrated the <a href="http://www.apple.com/30-years/">30th anniversary of the original Macintosh</a>. I joined the Mac train in 2009, and have [mostly] liked it ever since. Next time I&rsquo;ll go into the specifics of the Macs that I&rsquo;ve owned, and why I recommend them.</p>

<div class="footnotes">
1. It looked like a suppository, ok?
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Your Developer Saw Sharp]]></title>
    <link href="http://blog.swilliams.me/words/2014/01/20/keep-your-developer-saw-sharp/"/>
    <updated>2014-01-20T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/01/20/keep-your-developer-saw-sharp</id>
    <content type="html"><![CDATA[<figure>
    <img alt='"Dremel Moto Jig Saw" from Pete Prodoehl on Flickr' src="http://blog.swilliams.me/images/assets/5184600234_a99779ddc1_z.jpg">
    <figcaption><a href="http://www.flickr.com/photos/raster/5184600234/">&#8220;Dremel Moto Jig Saw&#8221;</a> from <a href="http://www.flickr.com/photos/raster/">Pete Prodoehl</a> on Flickr</figcaption>
</figure>


<p>If you&rsquo;re a software developer, you need to make sure your skills are up to date. If you don&rsquo;t, you&rsquo;re doing yourself a disservice.</p>

<p>This is important for several reasons. First, it keeps you marketable. There&rsquo;s no such thing as true job security. You might be a vitally important cog in an esoteric process at a corporation, but could still be laid off if certain numbers in an executive&rsquo;s spreadsheet don&rsquo;t come out in your favor. Even though it&rsquo;s a buyers&#8217; market for software developers right now, you might suddenly find yourself looking down the pointy end of an interview table needing to answer a question about something that you always meant to study up on, but never did.</p>

<p>Things change, and practices that were once standard aren&rsquo;t any more. In fact, they can be dangerous. For example, I was on a project with a client&rsquo;s DBA who hadn&rsquo;t really kept up with the times. He would&rsquo;ve been a really good SQL Server DBA if it were still 1998. His design for the project included making just under 400 tables, with no fewer than 20 joins for any query. Since the application was very heavily data driven, things bogged down under even light loads. The performance caused many long nights and weekends and &ldquo;aggressive conversations&rdquo; with managers at the client.</p>

<p>It can be <strong>expensive</strong>. The problems in the above anecdote could&rsquo;ve been avoided by adopting a <a href="http://stackoverflow.com/a/460296/736">less normalized</a> approach in the database. Yes, data would&rsquo;ve been duplicated, but hardware has gotten <em>so</em> much cheaper it&rsquo;s financially irresponsible not consider just buying faster stuff. You could save $10,000 on a new server, but if you&rsquo;re paying a team of consultants billing $1,000/hour for <em>weeks</em> of work, <a href="http://www.youtube.com/watch?v=-DGFuHC75aY">you chose poorly</a>.  If StackOverflow got away with just <a href="http://highscalability.com/blog/2011/3/3/stack-overflow-architecture-update-now-at-95-million-page-vi.html">2 database servers in 2011</a>, you can probably do just fine with one.</p>

<p>It makes team dynamics better. I&rsquo;ve been a consultant of some form or fashion for nearly seven years now. I&rsquo;ve seen good projects, and I&rsquo;ve seen bad ones. Bad communication and skill mismatches are traits of projects that go south. When developers are on the same page it makes for much easier conversations. For example, if you are a web developer, I shouldn&rsquo;t have to repeatedly explain what <a href="http://en.wikipedia.org/wiki/REST">REST</a> is in 2014, no matter what platform you&rsquo;re using.</p>

<p>You&rsquo;ll become a better programmer seeing if the grass is greener elsewhere. If all you know is .NET, then you only know the .NET way of doing things. I&rsquo;ve taken to <a href="http://blog.swilliams.me/words/2013/12/16/i-made-an-app">iOS development recently</a>, and at a recent client I used a pattern I learned from working with <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITableView_Class/Reference/Reference.html">UITableViews</a> to do something awesome in JavaScript. Had I never attempted learning Objective C, that wouldn&rsquo;t have happened.</p>

<p>Are you a .NET web developer? Try learning something like <a href="http://guides.rubyonrails.org/getting_started.html">Rails</a>, or <a href="http://nodejs.org/about/">Node</a>, or <a href="https://docs.djangoproject.com/en/1.6/intro/overview/">Python</a>. Rails developer? Try Node, or maybe <a href="https://developer.apple.com/devcenter/ios/index.action">iOS</a> or <a href="http://developer.android.com/sdk/index.html">Android</a>. Mobile developer? Try web development, or a competing platform. Maybe even go with a neckbearded technology like <a href="http://clojure.org/">Clojure</a>. The things you learn from moving outside your environment will only benefit you in your day job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Prepare a MacBook Pro For Sale that was Upgraded to Mavericks]]></title>
    <link href="http://blog.swilliams.me/words/2014/01/13/how-to-prepare-a-macbook-pro-for-sale-that-was-upgraded-to-mavericks/"/>
    <updated>2014-01-13T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/01/13/how-to-prepare-a-macbook-pro-for-sale-that-was-upgraded-to-mavericks</id>
    <content type="html"><![CDATA[<p>I recently upgraded to a newer MacBook Pro<sup>1</sup>. Since I didn&rsquo;t need my older one, I sold it to a friend&rsquo;s family. I wanted them to be able to have as close to a new-out-of-the-box experience as possible, so I wiped the drive and prepared to reinstall <a href="http://www.apple.com/osx/">OS X Mavericks</a>.</p>

<p>Back when OSes used to ship on CDs or DVDs you could put the disc into the drive and boot right into what is called &ldquo;Recovery&rdquo; mode to reinstall things. Since Apple switched over to download only updates, this is no longer the case.</p>

<p>In order to get back into Recovery mode, restart the computer and hold ⌘R while it boots up. From there you can format the drive and reinstall Mavericks, provided you have an Internet connection. If you created a <a href="http://www.techrepublic.com/blog/apple-in-the-enterprise/how-to-create-a-bootable-usb-to-install-os-x-mavericks/">bootable USB drive</a>, that&rsquo;d work too, without needing to be online.</p>

<p>The catch though is that the new user needs to have an Apple ID <em>that has already &ldquo;purchased&rdquo; Mavericks</em> for the install to continue. This&rsquo;ll be my friend&rsquo;s first Mac, so they never had the opportunity to buy Mavericks. This is also especially weird because Mavericks is <strong>free</strong>. There doesn&rsquo;t appear to be a way to transfer ownership to a separate Apple ID. The solution? <a href="https://discussions.apple.com/message/23573490#23573490">Reinstall the original OS the computer came with</a>. Which means this:</p>

<figure>
    <img alt="IMG_1843.jpg" src="http://blog.swilliams.me/images/assets/IMG_1843.jpg">
    <figcaption>Oh, hi, Snow Leopard</figcaption>
</figure>


<p>Yeah, <a href="http://en.wikipedia.org/wiki/Mac_OS_X_Snow_Leopard">OS X 10.6 Snow Leopard</a>. The funny thing about this is that I cleaned out my closet last week and threw away my original Snow Leopard installation DVD thinking I wouldn&rsquo;t need it again. So I <em>found</em> a copy somewhere else. Once that finished installing I handed it off and let them go about updating it to Mavericks.</p>

<p> I don&rsquo;t know how it&rsquo;ll work in a few years when I decide to sell my newest laptop that came with Mavericks already on it. Moral of the story: it&rsquo;s just all too rare when semi-complex software &ldquo;just works&rdquo;.</p>

<div class="footnotes">
1. <a href="http://support.apple.com/kb/SP691">The 13&#8221; retina Pro</a> for those of you keeping score. Holy wow is it fast. And I didn&#8217;t think the retina screen would be that big of a deal, but it is.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Computers Through the Ages]]></title>
    <link href="http://blog.swilliams.me/words/2014/01/09/my-computers-through-the-ages/"/>
    <updated>2014-01-09T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/01/09/my-computers-through-the-ages</id>
    <content type="html"><![CDATA[<p>I just got my latest computer, a 13&#8221; MacBook Pro with a Retina screen. Before my memory fades too much, I want to list the computers that I have (or my family has) owned, and talk a little about the memories associated with them. I wish I could dig up more pictures of some of these, but almost all of them were not important to be deigned worthy of being stored in the cobwebs of Internet history.</p>

<h3>Prehistory</h3>

<p><strong>Compaq Portable</strong> (some point in the late 80&rsquo;s). My dad used to bring this home every so often from his day job at a large bank. It was called <a href="http://en.wikipedia.org/wiki/Compaq_portable">&ldquo;portable&rdquo;</a> even though it weighed 28 pounds. I learned how to type on this thing and wrote a few papers in 3rd grade before my teacher told me to stop and work on my handwriting. I believe it ran MS-DOS 3.0.</p>

<figure>
    <img alt="The Compaq Portable" src="http://blog.swilliams.me/images/assets/1389282253678.jpg" />
    <figcaption>The Compaq Portable</figcaption>
</figure>


<p><strong>IBM &ldquo;Compatible&rdquo;</strong> (early 90&rsquo;s. ) Our first family computer. It had an <a href="http://en.wikipedia.org/wiki/80386">80386</a> that ran at a smoking 25 MHz. It lasted us for years and years. I wrote more school papers on it, learned how to hide certain <a href="http://en.wikipedia.org/wiki/Doom_(video_game">games</a>) my mother wouldn&rsquo;t approve of<sup>1</sup>, and poked around with a little <a href="http://en.wikipedia.org/wiki/Qbasic">QBasic</a>. It ran MS-DOS 5 and had Windows 3.1.</p>

<p>My earliest memory of this computer was learning that &ldquo;hot&rdquo; was slang for &ldquo;stolen&rdquo; because my dad was convinced that some of the parts weren&rsquo;t legal&hellip; I think he was joking. Probably.</p>

<figure>
    <img alt="WordPerfect" src="http://blog.swilliams.me/images/assets/Wordperfect-5.1-dos.png" />
    <figcaption>WordPerfect</figcaption>
</figure>


<p>I learned the ins and outs of <a href="http://en.wikipedia.org/wiki/WordPerfect#WordPerfect_for_DOS">WordPerfect 5.1</a> to great effect. In 6th grade I was able to astonish one of my classmates by being able to print out 25 copies of the same document without having to re-type the whole thing 25 times.</p>

<p>My first bit of &ldquo;programming&rdquo; that I could be proud of was a batch script in DOS that would take 10 minutes to run by listing every single file on the system, counting to an insanely high number, prompt the user over and over, and generally be as annoying as possible. I would then try to get my little sister to run it as often as I could just to watch her get angry. One time I left it in the <a href="http://en.wikipedia.org/wiki/AUTOEXEC.BAT">AUTOEXEC.BAT</a> file when my mom needed to use the computer and got in actual trouble.</p>

<p><strong>Unknown Laptop</strong> (mid-late 90&rsquo;s) Another computer we got to borrow from my dad. This time with a little known operating system called Windows 95. It was a fairly primitive laptop, though I was fascinated by the LCD and the weird colors it had unless you looked at it straight on.</p>

<p>I didn&rsquo;t really use it for much other than writing papers. Although, it was our first computer to really connect to the Internet (the old 386 had a modem, but at 2400 baud it was much to slow to be of any value). In 1997 I signed up for a Hotmail email address and thought I was pretty awesome.</p>

<p><strong>HP Desktop</strong> (early 1998) A huge upgrade from the old family PC. This sported a <a href="http://en.wikipedia.org/wiki/Pentium"><em>Pentium</em></a> processor and Windows 95. I remember being most excited about getting a joystick and being able to run <a href="http://en.wikipedia.org/wiki/TIE_Fighter_(video_game)">TIE Fighter</a>, a game that was already several years old, but one that I had missed out on. It was also our first computer to come with a CD-ROM. I could listen to music <em>on my computer(!)</em>. This was going to be the PC I was going to take to college, but fate intervened.</p>

<h3>My Own Little&hellip; My Precious</h3>

<p><strong>CTX Desktop</strong> (summer 1998) I was supposed to take the above HP to school with me, and my family had grown used to having a modern computer in the house and wanted to get their own. At Best Buy<sup>2</sup> when my dad was picking it up I jokingly asked &ldquo;Hey Dad, how about I take this to school and you guys keep the older HP?&rdquo; To my surprise, he thought about it for a second, then said &ldquo;ok&rdquo;.</p>

<p>That turned out to be fortuitous for me. At The University of Arizona, I learned that it was surprisingly upgradeable for a store-bought PC. By the time I was done with it, I had upgraded the video card, hard drive, memory, sound card, and added a CD burner and network card. Pretty much everything except was replaced for the Celeron processor that shipped with it. I even tinkered with the OS too. Originally, it was loaded with Windows 98. I &ldquo;upgraded&rdquo; it to Windows 2000, then eventually went back to 98 because of weird USB issues.</p>

<p>Since this was the first computer I could actually call my own, I felt obligated to really get to know it. It was on this computer that I learned how to actually write code, do a little design work, <a href="http://en.wikipedia.org/wiki/Napster">pirate music</a>, and play more games. At this point, I definitely got &ldquo;the bug&rdquo;.</p>

<p>After this, I built my own PCs for the next few years. I&rsquo;ll cover those some other time.</p>

<div class="footnotes">
 1. Hello, Mom!
 2. Remember buying computers at Best Buy?
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Please Steal This App Idea]]></title>
    <link href="http://blog.swilliams.me/words/2014/01/06/please-steal-this-app-idea/"/>
    <updated>2014-01-06T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/01/06/please-steal-this-app-idea</id>
    <content type="html"><![CDATA[<p>Spurred on by a <a href="https://twitter.com/swilliams/status/420395505852506112">Twitter conversation</a>, I figured I&rsquo;d write more about my thoughts here. I&rsquo;ve always wanted a GOOD photo editor on the iPad, ever since I saw the <a href="https://www.youtube.com/watch?v=6Fk1V5NqoD4&amp;list=PLPlyGeI5oeICPGwwp4HTdNZkpyP0flmhC">demo</a> of the very first one. There have been a few contendors, but they&rsquo;ve all fallen short.</p>

<p>iPhoto is supposed to be this solution, but the workflow is aggravating. I&rsquo;d love to take a picture on my iPhone, pull up my iPad and edit that picture on the bigger screen, then send it back to my phone (or elsewhere). But there&rsquo;s a lag while iCloud syncs, and then somehow I end up with 4 duplicates when I&rsquo;m done editing, and another lag while iCloud syncs again, <em>sigh</em>.</p>

<p>I&rsquo;ve toyed with the idea of doing it myself in my head, but it&rsquo;d be pretty hard, and time consuming. If anyone is feeling particularly up for a challenge, here&rsquo;s how I&rsquo;d do it.</p>

<p><strong>Pair with a camera.</strong> This is hard. DSLR&rsquo;s <em>still</em> don&rsquo;t have built-in wifi, and neither do most point and shoots<sup>1</sup>. But if someone does have the appropriate adapter, it&rsquo;d be killer. Bonus points for setting up some kind of ad hoc wifi network for a camera to connect to, if that&rsquo;s even possible.</p>

<p><strong>Display photos as soon as they are taken.</strong> When I press the shutter, the photo should appear on the iPad within moments. Since photos (espeically RAW) can be huge, this&rsquo;ll have to be a temporary buffer. If I start to edit a photo, hang onto it, otherwise just keep the last 10 or so around in memory on the iPad. I should be able to swipe through all of the photos in the buffer.</p>

<p><strong>Let me start editing immediately.</strong> Obviously you wouldn&rsquo;t need to add the entirety of Photoshop, but I think a certain subset would be great:</p>

<ul>
<li>RAW controls (temperature/tint, exposure, blacks, brightness, etc)</li>
<li>Curves</li>
<li>Black &amp; White manipulation</li>
<li>&ldquo;Real&rdquo; filters, based on the above controls. We already have Instagram, and don&rsquo;t need another way to make a photo look like it was a Polaroid from the 70&rsquo;s. Heck, let me make my own filters.</li>
<li>Basic touch-ups, kinda like Lightroom (smooth skin, eye brightnes, etc). Imagine just being able to draw a brightness correction with just your finger.</li>
</ul>


<p><strong>Simple export.</strong> This might be a problem on iOS. Don&rsquo;t draw my ire like iPhoto and it&rsquo;s syncing woes. Avoid photos.app until the very end when I <em>want</em> to put a picture in there. Maybe have a companion app for OS X and send a photo there directly from the iPad and avoid the photos app altogether (and save space).</p>

<p>You could whip through that workflow incredibly fast, and not have to fiddle with a mouse and bloated software, or iCloud lag.</p>

<div class="footnotes">
1. I think the camera manufacturers have a secret death wish. You can buy a smartphone with a <a href="http://www.amazon.com/gp/product/B00COYOAYW/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00COYOAYW&linkCode=as2&tag=thepetzoo-20">pretty decent camera, GPS, and wifi built in for $129</a>, but not a <a href="http://www.amazon.com/gp/product/B006U49XM6/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B006U49XM6&linkCode=as2&tag=thepetzoo-20">$6500 dSLR</a>.
    
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whither Shootsy, or, How I Tried and Failed a Startup]]></title>
    <link href="http://blog.swilliams.me/words/2013/12/26/whither-shootsy-or-how-i-tried-and-failed-a-startup/"/>
    <updated>2013-12-26T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2013/12/26/whither-shootsy-or-how-i-tried-and-failed-a-startup</id>
    <content type="html"><![CDATA[<p>Did you know that at one point I had aspirations of being an entrepreneur? For the better part of 2010 and 2011 I spent every free moment I had trying to get a startup on its feet<sup>1</sup>. It was aimed at photographers to help them manage their businesses. We called it Shootsy.</p>

<p>You might have noticed that everything in that paragraph is in the past tense, and that&rsquo;s for good reason. Shootsy is for all intents and purposes, dead. Here&rsquo;s a little bit of the history behind what happened.</p>

<figure>
    <img alt="shootsy-broke.png" src="http://blog.swilliams.me/images/assets/shootsy-broke.png">
</figure>


<p>It&rsquo;s a story that&rsquo;s been told over and over: we simply ran out of time. My co-founder <a href="https://twitter.com/carterdea">Carter</a> (who is now a talented, in-demand freelance designer that you should hire) moved 400 miles away to Los Angeles in the pursuit of a woman who would become his wife. As soon as he found work out there, he promptly got overloaded. My day job picked up and I got overloaded with work too. At the time I had a bad feeling about this, but plowed forward anyway.</p>

<p>The math just didn&rsquo;t work in our favor. If you have a 40 hour a week job, you can realistically<sup>2</sup> expect to have anywhere between 10-20 extra hours for a side project. If you have a family, expect that to get smaller.</p>

<p>Both of our jobs started to demand 50+ hours a week for an extended period of time, and more often than not, I simply had no time, or was just too tired to work on Shootsy. So it sat there. And sat there. And then it sat there some more. Finally after not writing any code for nearly a year, we agreed to make official what we both had known in our heads: it was done.</p>

<p>There was no other way to cut it. I had failed at launching a business.</p>

<p>The part that really stings though? How close we were. We had a few people beta testing it. We had some advisors that were going to connect us with some important people once we had shipped. I felt that the competition was weak enough to carve out a niche for ourselves<sup>3</sup>. Some important photographers were interested in trying it out.</p>

<p>Despite the whole thing, I don&rsquo;t regret trying. I learned some important things about myself in process. I don&rsquo;t know if I&rsquo;m cut out to run an entire business. I&rsquo;m a pretty good second banana, but I can&rsquo;t say with 100% certainty that it&rsquo;s a good idea to have the buck stop with me. That&rsquo;s a hard pill to swallow, and maybe it will change after a few more years, but it&rsquo;s a reality I have to accept.</p>

<p>I don&rsquo;t know if I&rsquo;ll attempt a startup again. <a href="http://blog.swilliams.me/words/2013/12/16/i-made-an-app">An app</a> is easier. But an app is not a business. An app can be just for fun, which is kind of what <a href="https://itunes.apple.com/us/app/zartbonk/id727445952?ls=1&amp;mt=8">Zartbonk</a> is.</p>

<p><a href="https://twitter.com/danbenjamin">Dan Benjamin</a> once said that you can&rsquo;t create a business as a side project. At the time, I thought I would be able to prove him wrong. Now though, he&rsquo;s absolutely right. I plan to make more apps in the future, but I don&rsquo;t think any of them will become my day job any time soon.</p>

<h3>Screenshots</h3>

<figure class="small">
    <a data-title="A Shoot" data-description="" href="http://blog.swilliams.me/images/assets/01b-shoots-details.png" class="image-slide-anchor content-fit">
        <img alt="A Shoot" src="http://blog.swilliams.me/images/assets/01b-shoots-details.png"></a>
    <figcaption>A Shoot</figcaption>
</figure>


<figure class="small">
    <a data-title="Packages and Payments" data-description="" href="http://blog.swilliams.me/images/assets/01e-shoots-money.png" class="image-slide-anchor content-fit">
        <img alt="Packages and Payments" src="http://blog.swilliams.me/images/assets/01e-shoots-money.png"></a>
    <figcaption>Packages and Payments</figcaption>
</figure>


<figure class="small">
    <a data-title="Contacts" data-description="" href="http://blog.swilliams.me/images/assets/02c-contacts-search.png" class="image-slide-anchor content-fit">
        <img alt="Contacts" src="http://blog.swilliams.me/images/assets/02c-contacts-search.png"></a>
    <figcaption>Contacts</figcaption>
</figure>


<figure class="small">
    <a data-title="Locations" data-description="" href="http://blog.swilliams.me/images/assets/04b-locations-map-view.png" class="image-slide-anchor content-fit">
        <img alt="Locations" src="http://blog.swilliams.me/images/assets/04b-locations-map-view.png"></a>
    <figcaption>Locations</figcaption>
</figure>


<figure class="small">
    <a data-title="A Specific Location" data-description="" href="http://blog.swilliams.me/images/assets/04c-locations-view.png" class="image-slide-anchor content-fit">
        <img alt="A Specific Location" src="http://blog.swilliams.me/images/assets/04c-locations-view.png"></a>
    <figcaption>A Specific Location</figcaption>
</figure>


<p>These are some comps that Carter made. They aren&rsquo;t actual screenshots, but the actual app was pretty darn close. If I could, I&rsquo;d play some <a href="https://www.youtube.com/watch?v=nSz16ngdsG0">Sarah McLachlan</a> over it.</p>

<div class="footnotes">
1. I even took a 5 week leave of absence (some unpaid) from my day job to focus exclusively on it.
2. &#8220;Realistically&#8221; as in a sustainable pace. You simply can&#8217;t pull 80 hour weeks continuously without something giving.
3. I still do feel that way. You won&#8217;t ever be acquired for 9 figures, but there&#8217;s enough room to sustain a good business.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting the Minimum in Minimum Viable Product]]></title>
    <link href="http://blog.swilliams.me/words/2013/12/22/putting-the-minimum-in-minimum-viable-product/"/>
    <updated>2013-12-22T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2013/12/22/putting-the-minimum-in-minimum-viable-product</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a common phrase in product development called <a href="http://en.wikipedia.org/wiki/Minimum_viable_product">&ldquo;Minimum Viable Product&rdquo;</a>. It means that the first release of your software product should only do the bare minimum needed to survive. This keeps things simple, and prevents scope creep from sneaking in (I mean you could have your app <em>also</em> <a href="http://www.catb.org/jargon/html/Z/Zawinskis-Law.html">read email</a>, but why?).</p>

<p>For <a href="https://itunes.apple.com/us/app/zartbonk/id727445952?ls=1&amp;mt=8">Zartbonk</a>, this meant that the user had to be able to:</p>

<ul>
<li>Play sounds</li>
<li>Search sounds</li>
<li>Add more sounds (through various means)</li>
</ul>


<p>And all of that had to happen quickly, otherwise what was the point?</p>

<p>That&rsquo;s a good feature list, but there is absolutely more to an app than just checking off a bunch of boxes. I could implement all of those features using giant rectangles with primary colors and almost no interaction. That would certainly be a Minimum Product, but not necessarily a Viable one.</p>

<p>A viable product means that it has enough going for it so that it lives; it doesn&rsquo;t just die on the vine. On a mobile device that means it isn&rsquo;t just relegated to the dreaded last screen, essentially a junk drawer for unloved apps. Or maybe it&rsquo;s just deleted altogether.</p>

<p>I&rsquo;m trying to avoid the junk drawer with Zartbonk. There are a few flourishes here and there to make it fun. Sound clips have their waveforms in the background. The progress bar is accurate as it passes across a clip. When a sound plays in the timeline<sup>1</sup> it&rsquo;s corresponding one in the grid jiggles. You can repeat a sound bite by tapping and holding a play button. I tried to add fades and pretty animations everywhere I could.</p>

<figure>
    <img alt="Jiggle" src="http://blog.swilliams.me/images/assets/jiggle.gif">
    <figcaption>Jiggle</figcaption>
</figure>


<p>All of these things took time. A <em>lot</em> of time. Remember those three bullet points up there? Implementing those was just 20% of the whole time spent on the app. The fine tuning and iterations of design took weeks and weeks.</p>

<p>And even I&rsquo;m not immune to the allure of adding more features in there. The whole purpose of the PRO option is to add more than what might be necessary, and to separate from the competition. Looking back, I might not have actually launched with some of the pro features. The timeline in particular was a very tough nut to crack, and still isn&rsquo;t as streamlined as I&rsquo;d like it.</p>

<p>Perhaps the most important thing to remember is when you have a <em>minimum</em>, it&rsquo;s time to consider adding to that. Bugs need to be fixed. Interfaces may need to be refactored. The biggest issue with Zartbonk right now is that editing is pretty painful, especially if you want to edit more than a couple of clips. It&rsquo;ll probably take a couple of weeks to get something better in, but that&rsquo;s what I&rsquo;m working on now.</p>

<p>I could have delayed even longer on shipping and fixed editing first, but that runs the risk of finding something else that needs to be fixed, which could threaten the entire project.</p>

<p>I&rsquo;m happy with how I launched 1.0<sup>2</sup>. It wasn&rsquo;t perfect, but I think I was able to strike a decent balance between features and viability.</p>

<div class="footnotes">
1. That&#8217;s in Zartbonk PRO. What do you mean you haven&#8217;t upgraded yet?
2. Technically I launched on 1.1, which had some critical bug fixes I didn&#8217;t see until after 1.0 launched.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Made an App!]]></title>
    <link href="http://blog.swilliams.me/words/2013/12/16/i-made-an-app/"/>
    <updated>2013-12-16T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2013/12/16/i-made-an-app</id>
    <content type="html"><![CDATA[<div>
<div><div><div><div>
<p>One of my goals for this year was to create and release an iOS app. I&#8217;m cutting it close, but I think it&#8217;s finally good enough to actually tell people about it.</p>

<p>I was interested in the idea of making a soundboard for the iPad. A soundboard is something that has lots of sound effects that you can find and play quickly. Radio shows and podcasts use them, especially the &#8220;morning zoo&#8221; ones, and now you can run your own.</p>

<p>It&#8217;s called <a href="http://zartbonk.com">Zartbonk</a>, and <a href="https://itunes.apple.com/us/app/zartbonk/id727445952?ls=1&amp;mt=8">I hope you like it</a>. </p>

<p>In order to remove as much friction as possible from getting it into your hands, I&#8217;m going with a &#8220;freemium&#8221; model. The app is <strong>absolutely free</strong>, but has some limitations. You can unlock everything with a single in-app-purchase.</p>

<p>Out of the box it comes with a couple dozen sound effects, including my favorite, the timeless <a href="http://www.youtube.com/watch?v=cdbYsoEasio">Wilhelm Scream</a>, but you can add your own too. You can add sounds from <a href="https://db.tt/7Rr3UKJ">Dropbox</a>, the built-in microphone, or search from thousands of sounds in <a href="http://freesound.org/">freesound&#8217;s library</a>.</p>

<p>I learned <strong>TONS</strong> of things in the process of making this, and I&#8217;ll certainly blog more about my journey from there to here.</p>

<p>I want to hear back from you to. <a href="http://zartbonk.com/contact">Feel free to reach out and contact me if you run into any problems or have questionsp</a>.</p>
</div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<a href="https://itunes.apple.com/us/app/zartbonk/id727445952?ls=1&amp;mt=8" target="_blank">
			
				<div>
					<img alt="appstore.png" src="http://blog.swilliams.me/images/assets/appstore.png">
</div>
			
				</a>
			

			

		</div>
	
	</div>
</div></div></div></div>
</div>]]></content>
  </entry>
  
</feed>
