<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Scott Williams]]></title>
  <link href="http://blog.swilliams.me/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2015-08-09T20:10:34-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finding the Last Photo Taken]]></title>
    <link href="http://blog.swilliams.me/words/2015/08/09/finding-the-last-photo-taken/"/>
    <updated>2015-08-09T19:40:43-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/08/09/finding-the-last-photo-taken</id>
    <content type="html"><![CDATA[<p>Getting the last photo taken is a convenient feature to have in your app when dealing with photo picking. Prior to iOS 8, you could get it by using the <a href="https://developer.apple.com/library/ios/documentation/AssetsLibrary/Reference/AssetsLibraryFramework/index.html#//apple_ref/doc/uid/TP40009730">Assets Library Framework</a> and then <a href="http://stackoverflow.com/a/10200857/736">looping through the various groups</a> to get the right photo.</p>

<p>In iOS 8, the Asset Library is still available, but Apple introduced a new framework to go along with <a href="http://www.apple.com/osx/photos/">Photos.app</a>. It&rsquo;s creatively called the <a href="https://developer.apple.com/library/ios/documentation/Photos/Reference/Photos_Framework/index.html#//apple_ref/doc/uid/TP40014408">Photos Framework</a> and it makes certain things, such as querying for the recent image much easier. To further entice you to use it, the Assets Library is deprecated in iOS 9.</p>

<p>Here&rsquo;s a function that&rsquo;ll get the most recent photo with the Photos Framework:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import UIKit
</span><span class='line'>import Photos
</span><span class='line'>
</span><span class='line'>// I like to typealias my blocks, makes for easier reading
</span><span class='line'>typealias ImageCallback = (UIImage? -&gt; Void)
</span><span class='line'>
</span><span class='line'>func fetchLastPhoto(resizeTo size: CGSize?, imageCallback: ImageCallback) {
</span><span class='line'>    let fetchOptions = PHFetchOptions()
</span><span class='line'>    fetchOptions.sortDescriptors = [NSSortDescriptor(key: "creationDate", ascending: false)]
</span><span class='line'>    
</span><span class='line'>//        fetchOptions.fetchLimit = 1 // Available in iOS 9
</span><span class='line'>
</span><span class='line'>    if let fetchResult = PHAsset.fetchAssetsWithMediaType(.Image, options: fetchOptions) {
</span><span class='line'>        if let asset = fetchResult.firstObject as? PHAsset {
</span><span class='line'>            let manager = PHImageManager.defaultManager()
</span><span class='line'>            let targetSize = size == nil ? CGSize(width: asset.pixelWidth, height: asset.pixelHeight) : size!
</span><span class='line'>            manager.requestImageForAsset(asset,
</span><span class='line'>                targetSize: targetSize,
</span><span class='line'>                contentMode: .AspectFit,
</span><span class='line'>                options: nil,
</span><span class='line'>                resultHandler: { image, info in
</span><span class='line'>                imageCallback(image)
</span><span class='line'>            })
</span><span class='line'>        } else {
</span><span class='line'>            imageCallback(nil)
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a fair amount going on in there. First, we create a <a href="https://developer.apple.com/library/prerelease/ios/documentation/Photos/Reference/PHFetchOptions_Class/index.html#//apple_ref/occ/cl/PHFetchOptions"><code>PHFetchOptions</code></a> object which we can use to pass in additional information to filter the query. In this case we only need to sort by <code>creationDate</code> descending. iOS 9 introduces <code>fetchLimit</code> which could reduce a bit of overhead since we know we only need 1 image.</p>

<p><code>PHFetchOptions</code> also has a <code>predicate</code> property that has a bunch of interesting capabilities, such as restricting the search to specific <code>mediaSubtypes</code> like <code>PhotoHDR</code> or <code>PhotoPanorama</code>. If you want all photos just ignore it; that&rsquo;s determined later. Do note that <em>&ldquo;Photos does not support predicates created with the <code>predicateWithBlock:</code> method.&rdquo;</em>.</p>

<p>Once we have our options we are ready to query. The Photos Framework gives you access to 3 types of things that are stored in Photos.app: <code>PHAsset</code>, <code>PHAssetCollection</code>, and <code>PHCollectionList</code>. We only care about <a href="https://developer.apple.com/library/prerelease/ios/documentation/Photos/Reference/PHAsset_Class/index.html#//apple_ref/occ/cl/PHAsset"><code>PHAsset</code></a> right now. A <code>PHAsset</code> is a representation of the media stored on the device (photo or video). The other two are ways to group those assets in general.</p>

<p>Querying happens through class-level methods on the <code>PHAsset</code> class. There are <a href="https://developer.apple.com/library/prerelease/ios/documentation/Photos/Reference/PHAsset_Class/index.html#//apple_ref/doc/uid/TP40014383-CH1-SW2">a few to choose from</a>, but we want <code>fetchAssetsWithMediaType:options:</code>. This returns a <a href="https://developer.apple.com/library/prerelease/ios/documentation/Photos/Reference/PHFetchResult_Class/index.html#//apple_ref/occ/cl/PHFetchResult"><code>PHFetchResult</code></a> which is kinda like an <code>NSArray</code>, but not exactly. In Swift it&rsquo;s filled with optional <code>AnyObject</code>s. The first one should be the most recently created file so we cast it to a <code>PHAsset</code>.</p>

<p>Now comes the time to convert that <code>PHAsset</code> into what we really want: a <code>UIImage</code>. This is the responsibility of <a href="https://developer.apple.com/library/prerelease/ios/documentation/Photos/Reference/PHImageManager_Class/index.html#//apple_ref/occ/cl/PHImageManager"><code>PHImageManager</code></a>.</p>

<p>Most of the time when querying for images, we just want to resize the photo to fit into a <code>UIImageView</code> so Photos does most of the heavy lifting for you. Give it the size you want and a couple other options and off it will go. This happens asynchronously, so hand off the results to your callback block when it&rsquo;s done. This&rsquo;d be especially handy for generating a bunch of thumbnails.</p>

<p>Photos gives you quite a bit of flexability. We didn&rsquo;t touch on how it helps you to edit assets, manage/query video, or observe changes to photos. I wasn&rsquo;t aware of this framework until today, but it looks like a powerful one worth getting to know if you do anything with the images on your device.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Moments in Customer Service]]></title>
    <link href="http://blog.swilliams.me/words/2015/07/24/great-moments-in-customer-service/"/>
    <updated>2015-07-24T09:02:27-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/07/24/great-moments-in-customer-service</id>
    <content type="html"><![CDATA[<p><a href="http://blog.swilliams.me/words/2014/10/15/the-best-customer-service/">Great Customer Service is not dead</a>! When I was doing freelance/independent work I used <a href="https://www.getharvest.com/">Harvest&rsquo;s</a> Solo plan to track my time and invoice clients. It was affordable for a single person and wasn&rsquo;t over-engineered. Since it was cheaper in the long run I paid for a yearly plan and renewed each time it came up. I would&rsquo;ve recommended them to anyone in a similar position. Now I&rsquo;ll recommend them even more heavily.</p>

<p>A few months ago I took a full-time position and just didn&rsquo;t need the paid account any more. I couldn&rsquo;t figure out how to downgrade though so I sent a request to their customer service. The page told me to expect a response within an hour. Within 5 minutes I got a response from Jennifer telling me that my plan had been downgraded to the free one, AND they refunded the prorated amount for the remainder of the year back to me.</p>

<p>Getting a refund wasn&rsquo;t even on my radar. I was perfectly happy with keeping the paid plan and just not renewing it when the time came. What I love about this is that Harvest didn&rsquo;t waffle around the issue for a long time only to end up doing the bare minimum to get the customer to go away. They were fast, proactive, and exceeded expectations.</p>

<p>That&rsquo;s how you do customer service.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WatchKit Connectivity and File Transfers]]></title>
    <link href="http://blog.swilliams.me/words/2015/07/02/watchkit-connectivity-and-file-transfers/"/>
    <updated>2015-07-02T13:51:36-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/07/02/watchkit-connectivity-and-file-transfers</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been noodling with an idea for a <a href="https://developer.apple.com/watchos/pre-release/">watchOS 2</a> app. It involves <a href="https://developer.apple.com/library/prerelease/watchos/documentation/WatchConnectivity/Reference/WatchConnectivity_framework/index.html#//apple_ref/doc/uid/TP40015269">Connectivity</a> &ndash; transferring files from the Watch to its paired iOS device. The WWDC sessions are very good, but I ran into a couple of snags with the framework. I had <a href="https://twitter.com/swilliams/status/616671359557599232">tweeted something that I thought was a bug</a>, but on closer inspection of the docs it actually wasn&rsquo;t. I <a href="https://twitter.com/swilliams/status/616673013417803776">tweeted another message stating as much</a>, but it hasn&rsquo;t gotten the notice that the original did.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Anyways, here&rsquo;s what I learned.</p>

<p><em>[ed: This is with iOS 9, watchOS 2, and Xcode 7, all in beta 2. Stuff might change.]</em></p>

<h2>You can run both simulators at once</h2>

<p>But it&rsquo;s not obvious. First, run the watchOS simulator. In the scheme control, it&rsquo;s the &ldquo;[App Name] WatchKit App&rdquo; scheme, which has both the iPhone and Apple Watch available (for example, &ldquo;iPhone 6 + Apple Watch &ndash; 38mm&rdquo;), and run it.</p>

<figure class="center">
    <img alt="Xcode Scheme for iPhone6 and Watch" src="http://blog.swilliams.me/images/assets/conn-iphone-6-and-watch.png">
</figure>


<p>When it&rsquo;s running, change the scheme (without stopping the simulator) to the normal iPhone scheme. In this case &ldquo;[App Name] > iPhone 6&rdquo;.</p>

<figure class="center">
    <img alt="Xcode Scheme for iPhone6 and Watch" src="http://blog.swilliams.me/images/assets/conn-iphone-6.png">
</figure>


<p>Now, run this scheme <em>without</em> compiling: hold down ⌘ and click the Run button. The iOS app will now be running in the simulator. Sometimes the watch app will close, but you can open it back up again.</p>

<p>The console and breakpoints may get a little squirrelly, so you probably won&rsquo;t be able to depend on them so well.</p>

<h2>WCSessionDelegate</h2>

<p>Connectivity has one main delegate to implement: <a href="https://developer.apple.com/library/prerelease/watchos/documentation/WatchConnectivity/Reference/WCSessionDelegate_protocol/"><code>WCSessionDelegate</code></a>. This can be implemented on <em>both</em> the iOS and watchOS apps, and different behavior will happen. For example, when you transfer a file, the <strong>receiver</strong> will need to implement <code>session:didReceiveFile:</code>. If you want to receive some kind of notification that the file was sent the <strong>sender</strong> needs to implement <code>session:didFinishFileTransfer:error:</code>.</p>

<p>This seemed counter-intuitive to me at first, but on further reflection, it makes sense. I do wish the docs more clearly illustrated this though.</p>

<h2>You&rsquo;re in the background</h2>

<p>Don&rsquo;t forget that your iOS app is <strong>not</strong> guaranteed to be running when these notifications come in. And they will come in on a background queue too, so don&rsquo;t immediately try to update the UI without getting over to the main queue first.</p>

<h2>Demo</h2>

<p>I created a simple demo app to illustrate all of this. <a href="https://github.com/swilliams/watchkit-connectivity-demo">It&rsquo;s up on GitHub</a>. Take a look at the <code>AppDelegate</code> for the iOS app, the <code>ExtensionDelegate</code> and <code>InterfaceController</code> in the watchOS extension target. This demo was thrown together quickly without regard for best practices, blah blah blah.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>Such is the nature of Twitter, alas.</p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic GitHub Workflow For Collaboration]]></title>
    <link href="http://blog.swilliams.me/words/2015/06/30/basic-github-workflow-for-collaboration/"/>
    <updated>2015-06-30T12:16:16-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/06/30/basic-github-workflow-for-collaboration</id>
    <content type="html"><![CDATA[<p>When you&rsquo;re a solo developer, you can use Git in nearly any darn way you choose. No branching? Ok. Branch on everything? Sure. Want all your commit messages to consist of &ldquo;stuff&rdquo;? Knock yourself out. You might regret some of that in the long run, but it&rsquo;s not hassling anyone else. But, as soon as you add another person into the mix, things will have to change.</p>

<p>One gigantic benefit from collaboration is having a second set of eyes look at your code. GitHub makes this easy if you follow a few steps.</p>

<p><em>[ed: This might be old hat for some of you, but I don&rsquo;t know if I&rsquo;ve ever read an entire guide for this, so I&rsquo;m writing it all down. Please send me <a href="https://twitter.com/swilliams">feedback</a>, nicely, if there&rsquo;s a problem.]</em></p>

<h2>Create an Organization</h2>

<p>This one is optional, but does help in a few ways. The Organization becomes the face of any projects underneath it. It also makes a few things a little easier with regard to deployments, issue tracking, and documentation.</p>

<h2>Everyone Forks from the Organization</h2>

<p>If the repository is called <code>some-org/project-x</code>, then each developer forks that to create <code>swilliams/project-x</code>, <code>sally-developer/project-x</code>, and so on. If a repository is private on the Organization, your forks will be private too, and won&rsquo;t count against your own private project count.</p>

<h2>Clone Your Fork</h2>

<p>Now get your local copy.</p>

<p><code>git clone https://github.com/swilliams/project-x.git</code></p>

<h2>Set up Remotes</h2>

<p>Your fork on GitHub will automatically be your <code>origin</code> remote. Add a remote for the Organizations repository. By convention this is typically called <code>upstream</code>.</p>

<p><code>git remote add upstream https://github.com/some-org/project-x.git</code></p>

<h2>Work in Branches</h2>

<p>Working on a feature? Create a branch <code>feature-abc</code>. Fixing a bug? Create a branch <code>issue-254-login-done-broke</code>. Keep <code>master</code> clean.</p>

<p><code>git checkout -b feature-abc</code></p>

<h2>Push Branches to Origin</h2>

<p>Done with a feature or an issue? Push it back up to <code>origin</code> (your fork).</p>

<p><code>git push origin feature-abc</code> (you can add a <code>-u</code> flag too to track the remote branch too)</p>

<h2>Create a Pull Request</h2>

<p>Why do we go to the hassle of creating all those branches? Because with branches, you can create multiple outstanding Pull Requests at once. If you did all your development in <code>master</code>, any additional commits you push up will be added to an open Pull Request, which can cause issues.</p>

<p>Multiple small Pull Requests are much easier to review. Would you rather review 3 files over 5 commits or 50 files and 75 commits?</p>

<h2>Someone Else Reviews the Pull Request</h2>

<p>Perhaps my favorite piece of functionality in GitHub is the Pull Request review process. Use it to annotate code and discuss. Merge it in if everything is good.</p>

<h2>Rules for the Road</h2>

<ol>
<li>Keep the master branch clean. That should be ready to go live if necessary. This means tests should be passing, everything compiles, nothing important should be broken, etc.</li>
<li>Never commit directly to <code>upstream</code>. Upstream should only be updated through Pull Requests. Exception: pushing tags.</li>
<li>Pull from <code>upstream</code> regularly. The more codebases diverge, the more likely a nasty merge problem will occur.</li>
<li>Keep branches small. Just reiterating it again.</li>
<li>There are exceptions to every rule. Use them intelligently.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Showing Your Screen to a Client]]></title>
    <link href="http://blog.swilliams.me/words/2015/06/18/sharing-your-screen-with-a-client/"/>
    <updated>2015-06-18T19:37:03-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/06/18/sharing-your-screen-with-a-client</id>
    <content type="html"><![CDATA[<p>At some point in your career in technology, you&rsquo;re going to have to make some kind of presentation. This could be connecting your laptop to a projector, sharing your screen over some video conference, or just have people huddled around your desk. Since I care about you, I&rsquo;m gonna share some advice about avoiding common pitfalls that might occur.</p>

<p><strong>Turn off notifications.</strong> Say you&rsquo;re right in the middle of explaining how beautifully designed your database is to an important client, and one of your friends sends you an email.</p>

<figure class="center">
    <img alt="oh dear" src="http://blog.swilliams.me/images/assets/vomit.png" />
    <figcaption>Oh dear.</figcaption>
</figure>


<p>Your only options are to make an awkward joke, or ignore it completely. Hopefully Jane doesn&rsquo;t send any follow-ups.</p>

<p>On OS X you can turn off notifications by clicking the button in the top right of the menu bar, scrolling down, and then turning &ldquo;Do not disturb&rdquo; on.</p>

<figure class="center">
    <img alt="do not disturb" src="http://blog.swilliams.me/images/assets/donotdisturb.png">
</figure>


<p><strong>Hide everything you aren&rsquo;t showing.</strong> Again, say you&rsquo;re presenting something amazing to the top brass at Giant Health Conglomerate Inc. You need to switch from Keynote to a spreadsheet. You minimize Keynote and your Inbox is now in full view. What if there are some strategy emails from your CEO sitting in front of everyone? What if Jane from above has graphically described other things found in her vomit?</p>

<p>On OS X I like to move my presentation and ancillary windows to a <a href="https://support.apple.com/kb/PH18757?locale=en_US">separate space</a>. One with a very plain wallpaper.</p>

<p><strong>Use Chrome? Double check the default sites when you open a new tab.</strong> Nothing instills confidence with a prospective client when you open a new tab and the top 8 sites you visit are right there in the open for everyone to see. &ldquo;Oh, I guess you <em>really</em> like Harry Potter/Star Trek slash fiction?&rdquo;</p>

<p>An Incognito window is a quick way to hide all that.</p>

<p><strong>Similarly, consider clearing your browser history.</strong> Maybe you need to open up a webpage you weren&rsquo;t anticipating. Maybe you&rsquo;re checking the <a href="http://redis.io/documentation">redis documentation</a>, but when you type <code>red</code> into the address bar, all the subreddits you&rsquo;ve ever visited are immediately available. Maybe you just browse <a href="http://www.reddit.com/r/aww">/r/aww</a> and everyone is happy, or maybe you visit more&hellip; <em>unconventional</em>&hellip; ones.</p>

<p>Ultimately it&rsquo;s up to you how many awkward situations you want to have with your co-workers and/or clients. Try to just think about what would happen if your mother/rabbi/priest/psychologist were watching.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archiving Old GitHub Repositories]]></title>
    <link href="http://blog.swilliams.me/words/2015/05/17/archiving-old-github-repositories/"/>
    <updated>2015-05-17T13:37:51-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/05/17/archiving-old-github-repositories</id>
    <content type="html"><![CDATA[<p>What do you do with a codebase for a client project that ended years ago? Since it&rsquo;s client work it shouldn&rsquo;t be made public, but if you keep it &ldquo;live&rdquo; in GitHub your private repository count will creep up. Deleting the repository outright seems wrong; it&rsquo;s not that unusual to have an old client cold call you with an update, and having that old codebase handy can save some headaches. The lazy way to fix this would be to just give GitHub more money to increase the limit. But I felt the itch to solve the problem with code.</p>

<p>Git itself is flexible. It&rsquo;s trivial to clone a repository, put it in a safe place (or alternate service) and call it a day. But with GitHub, that doesn&rsquo;t include Issues. There could be some solid ideas (or bugs) stored in Open Issues that should be preserved. <a href="https://developer.github.com/v3/issues/">GitHub has a great API</a> to retrieve those, and I decided to create a simple Ruby script to make it a smooth process.</p>

<p>Take a look at <a href="https://github.com/Tallwave/github_issue_exporter">GitHub Issue Exporter</a>. It&rsquo;s pretty basic right now — just downloads Issues into a bunch of JSON and will also let you import them back into a new project. The idea is that you clone the repository you want to archive, then export all the open issues, store it all in a safe place, then you can safely delete the repository and free up some space.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Half-baked Business Idea - Augmented Paintball/Airsoft/Laser Tag]]></title>
    <link href="http://blog.swilliams.me/words/2015/04/04/half-baked-business-idea-augmented-paintball-slash-airsoft-slash-laser-tag/"/>
    <updated>2015-04-04T14:08:14-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/04/04/half-baked-business-idea-augmented-paintball-slash-airsoft-slash-laser-tag</id>
    <content type="html"><![CDATA[<p><em>Sometimes ideas pop into my head, and sometimes I think they&rsquo;re awesome. Most times though, they&rsquo;d require way more time and effort to implement properly than I have available. Since I&rsquo;ll never get around to making this myself, I&rsquo;ll just share it here.</em></p>

<p>I was playing some <a href="http://www.teamfortress.com/">Team Fortress 2</a> a little while ago and enjoying myself when I had the epiphany, <em>you could do this in real life</em>. Or at least something similar<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>Modern smartphones have very accurate GPS chips inside of them, such that things like <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html">geofencing</a> are possible<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Why not use that technology to add an additional layer of gameplay on top of things like paintball or airsoft? What if you could turn what is typically an unstructured free-for-all into a real-life tactical Capture the Flag game? Here&rsquo;s how I&rsquo;d do it.</p>

<h3>Setup</h3>

<p>The Creator creates a new game and divvies up players into teams, and assigns a Commander to each team. The Commander has special privileges (defined below).</p>

<h3>The Map</h3>

<figure class="center">
    <img alt="The Map" src="http://blog.swilliams.me/images/assets/halfbaked/01-Map.jpg">
    <figcaption>Some desert</figcaption>
</figure>


<p>Take the strip of desert that you play in. The Creator defines the boundaries for the game. If a Player strays beyond those boundaries for more than, say 10 seconds, they&rsquo;re penalized.</p>

<figure>
    <img alt="Boundaries" src="http://blog.swilliams.me/images/assets/halfbaked/02-Boundaries.jpg">
    <figcaption>Drag to rearrange</figcaption>
</figure>


<p>Next up is defining team based boundaries.</p>

<figure>
    <img alt="Team Boundaries" src="http://blog.swilliams.me/images/assets/halfbaked/03-TeamBoundaries.jpg">
    <figcaption></figcaption>
</figure>


<p>Each team&rsquo;s Commander can setup their own map dependent points of interest: a base, the Flag, etc.</p>

<h3>Gameplay</h3>

<figure>
    <img alt="Red Team" src="http://blog.swilliams.me/images/assets/halfbaked/04-RedCommander.jpg">
    <figcaption></figcaption>
</figure>


<p>The Commander can also see where each of their team members are currently located, and what directions they are going. The Commander can call out orders or instructions, set a rally point and draw directions on the map that will show up on Players devices.</p>

<p>For Capture the Flag, the Flag could be another kind of device like an iBeacon tied to an actual flag. When the Flag is moved it sets off alarms for its team. Moving the other team&rsquo;s Flag back to your base scores points for your team.</p>

<p>Other forms of gameplay can be defined here. If you want to have &ldquo;multiple lives&rdquo; the Commander can set the place you return to &ldquo;regenerate&rdquo;. Once the game starts, these places cannot be changed.</p>

<h3>Communication</h3>

<p>All communication would have to be done by some kind of bluetooth headset and microphone combination. All cues would have to be audio based to avoid having to stare at your screen all the time. Through this you&rsquo;d have:</p>

<ul>
<li>Open communication with your team</li>
<li>Alerts from the game itself (&ldquo;You have left the playing field, you have 10 seconds to get back in&rdquo;, &ldquo;Now entering Blue Space&rdquo;, &ldquo;Your Flag has been taken&rdquo;, etc)</li>
<li>Broadcast something to all Players (&ldquo;Game ends in 10 minutes&rdquo;)</li>
</ul>


<h3>After-game</h3>

<p>When the game is over, players can view a replay and see all the movements and events from the game. This is similar to the Commander&rsquo;s view, but now everyone can see everything. This will let players review tactics and strategies for the next go-around.</p>

<h3>Considerations and Potential Issues</h3>

<p>Phones are fragile. They won&rsquo;t hold up very well to paintpalls or airsoft pellets. You can route around this by keeping them in a <a href="http://www.amazon.com/OtterBox-Defender-iPhone-Frustration-Packaging/dp/B00N1AFY1Q/ref=sr_1_2?ie=UTF8&amp;sr=1-2&amp;s=wireless&amp;keywords=otterbox%2Bdefender%2Biphone%2B6&amp;tag=thepetzoo-20&amp;qid=1428182286">protective case</a> and inside a deep pocket. The headset interaction becomes key since actually pulling out a phone and looking at it would be a good way to lose focus on the action and become a nice target for the other team. Now that smart watches are becoming a thing, these could also provide something useful, but again fragility would have to be considered.</p>

<p>The Commander may have to use their device more often. I would assume they would be in more of a &ldquo;base&rdquo; or out of harm&rsquo;s way to allow this to happen. But hey, if General Patton was up close to enemy lines, then you can too I suppose.</p>

<p>Battery is also an issue. Constant GPS and Network usage will suck a battery down in no time. I think a 100% charge on a modern phone would last long enough for a couple hours, but something like a <a href="http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%253Daps&amp;tag=thepetzoo-20&amp;field-keywords=mophie">Mophie</a> would be recommended.</p>

<p>Lastly, networking could be tricky, especially in remote locations. Having something covered in wifi would ease this restriction (and help battery life) but those logistics could be a bear.</p>

<h3>In Conclusion</h3>

<p>As it says on the box, this is half-baked. I don&rsquo;t even think you&rsquo;d be able to create much of a business out of it, but goshdarnit it would be fun to play. If someone actually did make something like this, I&rsquo;d be all over it, and demand only a modest stake in the business.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>If you know how to double jump in real life, I&#8217;m all ears.</p>
</li>
<li class="footnote" id="fn:2">
  <p>Geofencing means that something happens when your phone enters or exits a pre-defined boundary. For example, you could have your lights automatically turn on when you get home.</p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retroactively Creating a Core Data Migration]]></title>
    <link href="http://blog.swilliams.me/words/2015/04/02/retroactively-creating-a-core-data-migration/"/>
    <updated>2015-04-02T10:15:15-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/04/02/retroactively-creating-a-core-data-migration</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s take a <em>completely hypothetical</em> situation where you&rsquo;re developing an app that uses <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html">Core Data</a> for the local storage and have a bunch of beta testers eagerly awaiting the next version before your product launch. Your previous attitude towards the data model was something along the lines of <em>&ldquo;It&rsquo;s still pre-1.0, I&rsquo;m not bothering with migrations yet, just delete and reinstall, c&#8217;mon.&rdquo;</em> However, you forgot that requiring the beta testers to deal with that isn&rsquo;t exactly a friendly experience for them, and you made at least three changes to the data model since your last Beta release. Now if they run the app it&rsquo;ll crash immediately because the database isn&rsquo;t in sync with the data model.</p>

<p>Oops.</p>

<p>Usually when you make changes to the data model, you do so by creating a new version and telling the <code>NSPersistentStoreCoordinator</code> to perform lightweight migrations, <em>then</em> make your changes. Adding a new version of the data model after changes were made accomplishes nothing. Fortunately, you&rsquo;re not screwed. We&rsquo;re going to jump back in time, grab the old data model then pretend it was there all along.</p>

<p>Your <code>MyProject.xcdatamodeld</code> file is actually a directory. If you browse it in the Finder or Terminal, you&rsquo;ll see more folders inside it, one for each version of your model. Inside those folders is a file simply called <code>contents</code>. This is an XML representation of the editor you see in Xcode.</p>

<h3>Step 1 — Find the data model from the last beta version you released</h3>

<p>Look through the history the <code>xcdatamodeld</code> file in your source control system <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Hopefully you&rsquo;ve been tagging all of your releases and can just checkout that specific one.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; git checkout 1.0-beta4</span></code></pre></td></tr></table></div></figure>


<p>If not, you can mess around with <code>git log</code> to figure out where to go. This snippet can help you see the commits for a single file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; git log --pretty=format:'%h : %s' --graph -n 45 FILENAME</span></code></pre></td></tr></table></div></figure>


<p>Then, checkout the particular commit with the right version.</p>

<h3>Step 2 — Copy the contents file</h3>

<p>Find  the <code>contents</code> file within your <code>.xcdatamodeld</code> file. Copy all that XML somewhere safe.</p>

<p>Go back to your <code>HEAD</code> or wherever you were.</p>

<h3>Step 3 — Create the new version of the data model</h3>

<p>If you didn&rsquo;t know, the process is:</p>

<ul>
<li>Open the <code>.xcdatamodeld</code> file in Xcode</li>
<li>In the Editor menu, click &ldquo;Add Model Version&rdquo;. Follow the instructions.</li>
<li>Open the File Inspector for your <code>.xcdatamodeld</code>. There is a Model Version segment in the inspector, make sure it&rsquo;s on the version you just created.</li>
</ul>


<p>Now you have two data models that are identical. Let&rsquo;s change the history on the original one.</p>

<h3>Step 4 — Change history</h3>

<p>Close Xcode. That&rsquo;s not mandatory but I&rsquo;ve had it crash when mucking about with these files, and it&rsquo;s just not worth the hassle.</p>

<p>Open the <code>contents</code> file for the <strong>original</strong> <code>.xcdatamodeld</code> in a text editor.</p>

<p>Paste in the version you created in Step 2.</p>

<p>Open Xcode. If you haven&rsquo;t set up the <code>NSPersistentStoreCoordinator</code> to run migrations, do so now. <a href="http://www.raywenderlich.com/27657/how-to-perform-a-lightweight-core-data-migration">This tutorial is pretty good</a>.</p>

<p>Now when the app runs, the migrations update the users&#8217; data and keep things from crashing.</p>

<p>Note: This is for <em>lightweight</em> migrations. Custom migrations are more complicated. <a href="http://www.objc.io/issue-4/core-data-migration.html">objc.io</a> has a great article on these. I don&rsquo;t know if you can play fast and loose with the data model file like you can here though.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>You ARE using Source Control, right? Sometimes new developers will ask me why they need Source Control. I usually parrot the usual answers - branching is good, undo mistakes, tool integration, etc - but situations like this are where it really shines. Without source control here, you&#8217;d be hosed. You&#8217;d have to manually fix the XML in the contents file, which would be monumentally hard or altogether impossible depending on what changed and how good your memory is.</p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Factor Authentication for GitHub]]></title>
    <link href="http://blog.swilliams.me/words/2015/04/01/two-factor-authentication-for-github/"/>
    <updated>2015-04-01T10:48:48-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/04/01/two-factor-authentication-for-github</id>
    <content type="html"><![CDATA[<p>In the interest of security I&rsquo;ve started to turn on <a href="http://en.wikipedia.org/wiki/Multi-factor_authentication">Two Factor Authentication</a> (aka 2FA) for some of the services I use. I tried it out with GitHub about a year ago, but turned it off shortly thereafter because I encountered a bunch of problems and didn&rsquo;t have the time to figure them all out. That and <a href="https://support.google.com/accounts/answer/3376859?hl=en">Google&rsquo;s Authenticator app having data loss issues after an update</a> was a big red flag too.</p>

<p>Today it&rsquo;s a little easier to manage. <a href="https://itunes.apple.com/us/app/1password-password-manager/id443987910?mt=12&amp;at=11lxUn">1Password</a> has 2FA support built in now, and there&rsquo;s also <a href="https://itunes.apple.com/us/app/duo-mobile/id422663827?mt=8&amp;at=11lxUn">Duo Mobile&rsquo;s app</a>. Turning it on was pretty easy: Go to the <a href="https://github.com/settings/security">security</a> page, click a few buttons, and follow instructions. Once it was enabled I decided to push some changes for a project, and then this happened:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; git push origin master
</span><span class='line'>remote: Invalid username or password.
</span><span class='line'>fatal: Authentication failed for 'https://github.com/swilliams/my-repo.git/'</span></code></pre></td></tr></table></div></figure>


<p>Umm, ok. I mean, I guess the most secure repository is one that <strong>nobody</strong> can access.</p>

<p>The solution isn&rsquo;t immediately obvious. I looked at <a href="https://help.github.com/articles/caching-your-github-password-in-git/">GitHub&rsquo;s setup docs</a> again, but they didn&rsquo;t mention anything about 2FA. When in doubt, try it again right? This time I got a username/password prompt. I had assumed I would get some sort of additional prompt to enter a single use code for the 2FA, so I pasted in my GitHub password.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; git push origin master
</span><span class='line'>Username for 'https://github.com': swilliams
</span><span class='line'>Password for 'https://swilliams@github.com':
</span><span class='line'>remote: Invalid username or password.
</span><span class='line'>fatal: Authentication failed for 'https://github.com/swilliams/my-repo.git/'</span></code></pre></td></tr></table></div></figure>


<p>No dice.</p>

<p>Googling around a bit finally brought me to <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/">this page, &ldquo;Creating an access token for command-line use&rdquo;</a>. When you enable 2FA you need to use a token as your password for the Terminal. I created this with the default scopes provided<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, then copy/pasted the resulting token into the password prompt in my Terminal window.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>± git push origin master
</span><span class='line'>Username for 'https://github.com': swilliams
</span><span class='line'>Password for 'https://swilliams@github.com':
</span><span class='line'>Counting objects: 80, done.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% (78/78), done.
</span><span class='line'>Writing objects: 100% (80/80), 9.02 KiB | 0 bytes/s, done.
</span><span class='line'>Total 80 (delta 58), reused 0 (delta 0)
</span><span class='line'>To https://github.com/swilliams/my-repo.git
</span><span class='line'>   01efb2c..445a0b6  master -&gt; master</span></code></pre></td></tr></table></div></figure>


<p>Yay!</p>

<p>I <em>think</em> that should handle all the headaches for 2FA with GitHub. I like the warm security feeling it brings, and it seems like the user experience has been cleared up too.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>For standard git operations, I don&#8217;t think you would need any of the other scopes available for apps, and you could probably remove <pre>gist</pre> from it too.</p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tracking Down an EXC_BAD_ACCESS in Swift]]></title>
    <link href="http://blog.swilliams.me/words/2015/03/31/tracking-down-an-exc-bad-access-with-swift/"/>
    <updated>2015-03-31T11:05:51-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/03/31/tracking-down-an-exc-bad-access-with-swift</id>
    <content type="html"><![CDATA[<p>Managing memory has become easier. Things like <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html">ARC</a> take away much of  what was once a painful and bug-ridden task. Things are not always panacea of course; it is still far too possible to do the wrong thing and access memory you are not supposed to and receive the dreaded <code>EXC_BAD_ACCESS</code> error.</p>

<p>Today I was working on a project in Swift. And despite my <a href="">appreciation</a> of the language, the tooling still remains&hellip; <em>suspect</em>. I have covered that topic a <a href="http://blog.swilliams.me/words/2015/01/21/the-madness-of-errors-in-swift/">couple</a> of <a href="http://blog.swilliams.me/words/2014/10/30/dealing-with-xcode-and-swift/">times</a> before.</p>

<p>Sometimes it&rsquo;s obvious where the problem is based on the call-stack. This time it was not so obvious. The problem occurred at the end of a series of steps in a wizard when all the prior screens were finally being released from memory. From what I could tell the error was when one of the view controllers that represented one of the steps in the wizard was being deinitialized, but otherwise I couldn&rsquo;t immediately see where the problem was.</p>

<p>In Objective C you can turn on what&rsquo;s called <a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/MemoryManagementforYourApp/MemoryManagementforYourApp.html">&ldquo;NS Zombies&rdquo; mode</a>, which keeps objects allocated (as a special &ldquo;Zombie&rdquo; object) and then raises warnings you try to access one of those Zombie objects. In my experience this has not worked quite was well with Swift. With Zombies mode enabled the app ran fine without crashing, but also didn&rsquo;t raise any warnings about accessing bad memory. It was a <a href="http://en.wikipedia.org/wiki/Heisenbug">Heisenbug</a>!</p>

<figure class="center">
    <img alt="Heisenberg" src="http://blog.swilliams.me/images/assets/heisenberg.jpg">
    <figcaption>Eh, close enough</figcaption>
</figure>


<p>Next I started to play around with the code thinking that I was improperly handling the lifecycle of some of the properties of several classes. I changed around some lazy properties and made certain other things optional, but this was just wheel spinning.</p>

<p>I backed up and reviewed the callstack again. The last frame before explosion was now at <code>swift_unknownWeakRelease</code> in a helper class referenced by the offending ViewController. This helper had this property:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// SearchBarHelper.swift
</span><span class='line'>private unowned let searchBar: UISearchBar</span></code></pre></td></tr></table></div></figure>


<p>I then re-checked the <a href="https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html">documentation for <code>unowned</code></a>.</p>

<blockquote><p>If you try to access an unowned reference after the instance that it references is deallocated, you will trigger a runtime error. Use unowned references only when you are sure that the reference will always refer to an instance.</p>

<p>Note also that Swift guarantees your app will crash if you try to access an unowned reference after the instance it references is deallocated. You will never encounter unexpected behavior in this situation. Your app will always crash reliably, although you should, of course, prevent it from doing so.</p></blockquote>

<p>That <code>searchBar</code> was originally defined as an <code>IBOutlet</code> on the ViewController:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ViewController.swift
</span><span class='line'>@IBOutlet weak var searchBar: UISearchBar!</span></code></pre></td></tr></table></div></figure>


<p>The lights turned on. <em>Of course</em> it was crashing. An outlet that&rsquo;s a weak property can and will be deallocated when the controller referencing it is no longer visible. I forgot about that when I created the other class to manage certain characteristics about that search bar. So, the <code>searchBar</code> was released at some point, and when the helper was next called (in deallocation) part of its representation in memory was an <code>unowned</code> property that was nil, a state it cannot be in. Thus, <code>EXC_BAD_ACCESS</code>.</p>

<p>The solution was simple, I still didn&rsquo;t want <code>SearchBarHelper</code> to have ownership of the <code>searchBar</code>, so I changed it to a weak optional.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// SearchBarHelper.swift
</span><span class='line'>private weak var searchBar: UISearchBar?</span></code></pre></td></tr></table></div></figure>


<p>Success!</p>

<p>Takeaway lesson: read and understand the documentation. Memory and how it is handled is still something that absolutely must be understood if you want to manage it well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Woe of Newspapers]]></title>
    <link href="http://blog.swilliams.me/words/2015/03/22/the-woe-of-newspapers/"/>
    <updated>2015-03-22T13:59:53-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/03/22/the-woe-of-newspapers</id>
    <content type="html"><![CDATA[<p>The other day a couple of salespeople for the Arizona Republic came knocking on my door. Here was their pitch:</p>

<p>&ldquo;We&rsquo;re going to start delivering you a paper every Wednesday and Sunday. Would you like it in your driveway or on the roof?&rdquo; and then a pause for laughter. I was more confused; her delivery was pretty bad, and there was a distinct waft of desperation.</p>

<p>I started to explain that I didn&rsquo;t want a newspaper even if it was free.</p>

<p>&ldquo;But it&rsquo;s only $.95 per week! You&rsquo;ll make that up with all the coupons you&rsquo;ll be getting!&rdquo; She was pushing the coupons pretty hard. I guess this is why people get newspapers, in order to buy cereal for $.20 off?</p>

<p>I said I didn&rsquo;t really care about coupons and politely told them to have a good afternoon. After extricating myself from the conversation I realized something: not once during their pitch did they mention the actual <em>content</em> of the paper. That&rsquo;s got to be depressing if you&rsquo;re a journalist — according to your sales staff your work is nothing more than a coupon delivery system with some words in between.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scott's Guide to Twitter Happiness]]></title>
    <link href="http://blog.swilliams.me/words/2015/02/27/scotts-guide-to-twitter-happiness/"/>
    <updated>2015-02-27T07:36:32-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/02/27/scotts-guide-to-twitter-happiness</id>
    <content type="html"><![CDATA[<ol>
<li>You don&rsquo;t <em>have</em> to be on Twitter every 2 minutes. If there&rsquo;s a meme you don&rsquo;t like, a perfectly valid option is to put your phone away.</li>
<li>Silliness is good. Everything doesn&rsquo;t have to be all doom and gloom serious all the time.</li>
<li>Change takes time, and is often the result of a succession of small steps with a few medium ones here and there. Be happy when the small steps happen.</li>
<li>Find some joy.</li>
</ol>


<p>Is that a little reductive? Sure. But if you find yourself feeling angrier and angrier over what happens on Twitter, it might be time to reconsider how you&rsquo;re using it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Front to Back #8 — My First Diablo]]></title>
    <link href="http://blog.swilliams.me/words/2015/02/25/front-to-back-number-8-my-first-diablo/"/>
    <updated>2015-02-25T08:54:52-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/02/25/front-to-back-number-8-my-first-diablo</id>
    <content type="html"><![CDATA[<p><a href="http://fronttoback.co/podcast/8">My First Diablo</a> is the newest episode of my <a href="http://fronttoback.co">podcast</a>. It&rsquo;s also the first episode where we have a guest: <a href="http://twitter.com/wickedgood">Steve Lubitz</a> of <a href="http://5by5.tv/isometric">Isometric</a> fame. We talk video games and how that works when you have a bunch of kids in the house. I&rsquo;d wanted to discuss this topic because my kids are now old enough to play console games without getting too frustrated over the experience, and I&rsquo;d been out of the loop for quite some time.</p>

<p>Steve had some solid recommendations and now my wife and I are discussing when would be a good time to re-introduce consoles into the house. That might happen this summer when the kids are done with school, and there will be more time available to figure out limits and such. I&rsquo;m thinking a Wii U would be the right way to go since there&rsquo;s a better selection of kid-friendly games there. What I&rsquo;m not looking forward to is all the controllers/accessories that Nintendo seems to think are required for their games. Most <a href="http://www.amazon.com/Nintendo-Wii-Deluxe-Set-Bundle-3ds/dp/B00MVUKM0A/ref=sr_1_1?sr=8-1&amp;ie=UTF8&amp;keywords=wii%2Bu&amp;tag=thepetzoo-20&amp;qid=1424881179">bundles for the Wii U</a> come with the controller with a screen on it. I can&rsquo;t tell if you can buy more of those or not<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. But you can get <a href="http://www.amazon.com/Nintendo-Wii-Remote-Plus-Black/dp/B00N4OAELY/ref=sr_1_1?ie=UTF8&amp;sr=1-1&amp;s=videogames&amp;keywords=wii%2Bmote&amp;tag=thepetzoo-20&amp;qid=1424881298">Wii-motes</a>, <a href="http://www.amazon.com/Nintendo-Nunchuk-Controller-Black-Wii/dp/B0094X1ZXU/ref=pd_bxgy_vg_img_y?tag=thepetzoo-20">nunchucks</a>, <a href="http://www.amazon.com/Nintendo-Pro-Controller-Black-Wii-u/dp/B00MUY0OFU/ref=pd_sim_vg_3?refRID=0SQ5Z19AHMG8VE30V0TD&amp;tag=thepetzoo-20&amp;ie=UTF8">pro controllers</a>, and various third party gizmos. I&rsquo;m not exactly looking forward to sifting through exactly what kind of those we&rsquo;ll need, nor storing them. I&rsquo;m not even going to touch handheld systems.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Video games were a big part of my childhood (some might say obsessive&hellip; I had a subscription to Nintendo Power without owning a Nintendo system). My hope is that rather than just consuming all the video game minutiae like I did, my kids will just have fun playing them with their family and friends.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>Amazon and other retailers seem to be sold out of official ones.</p>
</li>
<li class="footnote" id="fn:2">
  <p>Scientifically speaking, there are 327 different versions of the Nintendo DS to choose from.</p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Law Doesn't Defend Us; We Defend the Law]]></title>
    <link href="http://blog.swilliams.me/words/2015/02/24/the-law-doesnt-defend-us-we-defend-the-law/"/>
    <updated>2015-02-24T08:51:07-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/02/24/the-law-doesnt-defend-us-we-defend-the-law</id>
    <content type="html"><![CDATA[<p>Recently, <a href="https://firstlook.org/theintercept/greenwald/">Glenn Greenwald</a>, <a href="http://en.wikipedia.org/wiki/Laura_Poitras">Laura Poitras</a>, and <a href="http://en.wikipedia.org/wiki/Edward_Snowden">Edward Snowden</a> took part in an <a href="http://www.reddit.com/r/iama">&lsquo;IAMA&rsquo;</a> <a href="http://www.reddit.com/r/IAmA/comments/2wwdep/we_are_edward_snowden_laura_poitras_and_glenn">converstation on Reddit</a>. It&rsquo;s a long one, and somewhere down the page, <a href="http://www.reddit.com/r/IAmA/comments/2wwdep/we_are_edward_snowden_laura_poitras_and_glenn/coup7ld">this question was asked</a>:</p>

<blockquote><p>What&rsquo;s the best way to make NSA spying an issue in the 2016 Presidential Election? It seems like while it was a big deal in 2013, ISIS and other events have put it on the back burner for now in the media and general public. What are your ideas for how to bring it back to the forefront?</p></blockquote>

<p>Funny how this seems to happen. Snowden gave a tremendous answer. There&rsquo;s too many great quotes to pull from his response, so I&rsquo;ll just copy/paste the <a href="http://www.reddit.com/r/IAmA/comments/2wwdep/we_are_edward_snowden_laura_poitras_and_glenn/courx1i">whole thing</a>.</p>

<blockquote><p>This is a good question, and there are some good traditional answers here. Organizing is important. Activism is important.</p>

<p>At the same time, we should remember that governments don&rsquo;t often reform themselves. One of the arguments in a book I read recently (Bruce Schneier, &ldquo;Data and Goliath&rdquo;), is that perfect enforcement of the law sounds like a good thing, but that may not always be the case. The end of crime sounds pretty compelling, right, so how can that be?</p>

<p>Well, when we look back on history, the progress of Western civilization and human rights is actually founded on the violation of law. America was of course born out of a violent revolution that was an outrageous treason against the crown and established order of the day. History shows that the righting of historical wrongs is often born from acts of unrepentant criminality. Slavery. The protection of persecuted Jews.</p>

<p>But even on less extremist topics, we can find similar examples. How about the prohibition of alcohol? Gay marriage? Marijuana?</p>

<p>Where would we be today if the government, enjoying powers of perfect surveillance and enforcement, had &mdash; entirely within the law &mdash; rounded up, imprisoned, and shamed all of these lawbreakers?</p>

<p>Ultimately, if people lose their willingness to recognize that there are times in our history when legality becomes distinct from morality, we aren&rsquo;t just ceding control of our rights to government, but our agency in determing thour futures.</p>

<p>How does this relate to politics? Well, I suspect that governments today are more concerned with the loss of their ability to control and regulate the behavior of their citizens than they are with their citizens&#8217; discontent.</p>

<p>How do we make that work for us? We can devise means, through the application and sophistication of science, to remind governments that if they will not be responsible stewards of our rights, we the people will implement systems that provide for a means of not just enforcing our rights, but removing from governments the ability to interfere with those rights.</p>

<p>You can see the beginnings of this dynamic today in the statements of government officials complaining about the adoption of encryption by major technology providers. The idea here isn&rsquo;t to fling ourselves into anarchy and do away with government, but to remind the government that there must always be a balance of power between the governing and the governed, and that as the progress of science increasingly empowers communities and individuals, there will be more and more areas of our lives where &mdash; if government insists on behaving poorly and with a callous disregard for the citizen &mdash; we can find ways to reduce or remove their powers on a new &mdash; and permanent &mdash; basis.</p>

<p>Our rights are not granted by governments. They are inherent to our nature. But it&rsquo;s entirely the opposite for governments: their privileges are precisely equal to only those which we suffer them to enjoy.</p>

<p>We haven&rsquo;t had to think about that much in the last few decades because quality of life has been increasing across almost all measures in a significant way, and that has led to a comfortable complacency. But here and there throughout history, we&rsquo;ll occasionally come across these periods where governments think more about what they &ldquo;can&rdquo; do rather than what they &ldquo;should&rdquo; do, and what is lawful will become increasingly distinct from what is moral.</p>

<p>In such times, we&rsquo;d do well to remember that at the end of the day, the law doesn&rsquo;t defend us; we defend the law. And when it becomes contrary to our morals, we have both the right and the responsibility to rebalance it toward just ends.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podcast Technology]]></title>
    <link href="http://blog.swilliams.me/words/2015/02/18/podcast-technology/"/>
    <updated>2015-02-18T08:32:31-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/02/18/podcast-technology</id>
    <content type="html"><![CDATA[<p>You should listen to <a href="http://www.relay.fm/">Relay.fm&rsquo;s</a> new series on Inquisitive, <a href="http://www.relay.fm/inquisitive/27">&ldquo;Behind the App&rdquo;</a>. Myke opens the show with how the iPhone (and smartphones in general) helped bring podcasts to a larger audience. He&rsquo;s absolutely right.</p>

<p>Before smartphones, you had to sync everything to an iPod with your computer before you could listen to it. For me, this usually happened at home, and if I forgot to plug in my iPod and sync it, I&rsquo;d go without new episodes for the day; a fate worse than death. Syncing an iPod at the office was usually out of the question. IT policy at the time disallowed connecting personal hardware to company PCs <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> and blacklisted many of the sites hosting the audio files anyway.</p>

<p>I could live with the first issue, but I would go to great lengths to work around the latter one. Even though the experience wasn&rsquo;t as nice, downloading and listening to a podcast on my work PC was still something. Here&rsquo;s how:</p>

<ul>
<li>SSH into my Linux based web server</li>
<li><a href="http://www.gnu.org/software/wget/manual/wget.html#Overview"><code>wget</code></a> the RSS feed</li>
<li>Find the link to the newest mp3 file</li>
<li><code>wget</code> the mp3</li>
<li>Copy it into a folder publicly accessible on my server (this wasn&rsquo;t blocked by IT)</li>
<li>Download it locally with my web browser (this was Windows and installing something like wget was also strictly verboten from IT)</li>
<li>Listen</li>
</ul>


<p>Easy peesy lemon squeezey, right?<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> Now, if I want to listen to a podcast, I open up <a href="https://overcast.fm/">Overcast</a> and see if there&rsquo;s anything new. The only thing I have to think about now if I want to download over my cellular connection or not.</p>

<p>The future is good.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>For <em>very</em> good reason. God only knows what kind of malware you brought along with your external drive&#8230;</p>
</li>
<li class="footnote" id="fn:2">
  <p>&#8220;OK&#8230; First I&#8217;ll access the secret military spy satellite that&#8217;s in a geosynchronous orbit over the Midwest. Then, I&#8217;ll ID the limo by the vanity plate &#8216;MR. BIGGG&#8217; and get his approximate position. Then, I&#8217;ll reposition the transmitter dish on the remote truck to 17.32 degrees east, hit WESTAR 4 over the Atlantic, bounce the signal down into the Azores, up to COMSAT 6, beam it back to SATCOM 2 transmitter number 137, and down on the dish on the back of Mr. Big&#8217;s limo&#8230; It&#8217;s almost too easy.&#8221; — <a href="http://www.imdb.com/title/tt0105793/">Garth Algar</a></p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sympathy for the Carroll]]></title>
    <link href="http://blog.swilliams.me/words/2015/02/02/sympathy-for-the-carroll/"/>
    <updated>2015-02-02T19:04:14-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/02/02/sympathy-for-the-carroll</id>
    <content type="html"><![CDATA[<p>When listening to a podcast, the host will often forget a word or well known fact. Maybe they&rsquo;ll say something silly like <a href="http://on.cc.com/1rU1N7O">&ldquo;Jedi mind meld&rdquo;</a>. Everyone in the audience knows exactly what they meant, and everyone will likely make that fact known (I&rsquo;ve sure been there, and will likely continue to be).</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/wNq8-4DtvaM" frameborder="0" allowfullscreen></iframe>


<p>Now that I&rsquo;ve released a few episodes of <a href="http://www.fronttoback.co/">my own podcast</a> I&rsquo;ve seen the other side of the microphone. Talking and thinking at the same time is surprisingly difficult after say, 8 words in. I&rsquo;ll find myself stumbling over witty quips and forgetting familiar things that had been otherwise seared into my memory.</p>

<p>So, I have a teensy bit more empathy for Pete Carroll the day after <a href="http://grantland.com/the-triangle/super-bowl-new-england-patriots-seattle-seahawks/">an impressive Super Bowl Loss</a>. Yeah, he probably should&rsquo;ve run Marshawn Lynch on that one play, but I don&rsquo;t know if I would&rsquo;ve had the brain power to make a different decision with under 30 seconds left, in the 4th quarter, of the Super Bowl.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podcast Appearances]]></title>
    <link href="http://blog.swilliams.me/words/2015/01/28/podcast-appearances/"/>
    <updated>2015-01-28T14:36:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/01/28/podcast-appearances</id>
    <content type="html"><![CDATA[<p>Podcasts are Important Business. Here&rsquo;s an update.</p>

<h3>Better Know a Jackal</h3>

<p>The [rabid] fans of the 5by5 podcast network are informally known as &ldquo;Jackals&rdquo;. One of said Jackals, <a href="http://twitter.com/mikebeasterfeld">Mike Beasterfeld</a> had the brilliant idea to create a <a href="http://www.jackals.us/better-know-a-jackal">podcast to interview us</a>. I made it onto <a href="http://www.jackals.us/better-know-a-jackal/28">episode 28</a>. It&rsquo;s a nice little bio that you can use to gather information to steal my identity.</p>

<h3>Less Than Or Equal</h3>

<p>I was a guest on episode 25 of <a href="http://twitter.com/aleen">Aleen Simms&rsquo;s</a> <a href="http://www.lessthanorequal.com/episodes/25">Less Than Or Equal</a> podcast. I had a great time talking with her and we chatted about maturity, growing up, and how having daughters changed me; specifically some specific incidents in my personal history that formed me into what I am today. Speaking of daughters&hellip;</p>

<h3>Front to Back</h3>

<p>We just released our <a href="http://www.fronttoback.co/podcast/2015/1/27/6-practice-kid">6th(!) episode</a>. I&rsquo;ve really enjoyed making this show and have learned more and more about audio editing. This time around I used some <a href="http://en.wikipedia.org/wiki/Dynamic_range_compression">compression</a> to make our voices sound better.</p>

<p>Please check them out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surface Marketing]]></title>
    <link href="http://blog.swilliams.me/words/2015/01/27/surface-marketing/"/>
    <updated>2015-01-27T19:26:01-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/01/27/surface-marketing</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.microsoft.com/surface/en-us">Surface</a> was never the barnburner that Microsoft hoped it would be. People have been <a href="http://www.deccanchronicle.com/140629/technology-mobiles-and-tabs/article/microsoft-discontinue-surface-tablet">predicting</a> <a href="http://arstechnica.com/gadgets/2014/08/surface-2-prices-slashed-hinting-at-discontinuation-or-replacement/">its demise</a> for the <a href="http://bgr.com/2014/10/09/microsoft-surface-pro-3/">last year</a>. It&rsquo;s suffered from <a href="https://www.youtube.com/watch?v=iqyTxiTKxgI">goofy advertising</a> and lately seems to be begging the masses to please think of it instead of an iPad, <a href="https://www.youtube.com/watch?v=1jP4O7rEHQ8">anything but an iPad, oh please</a>! <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>I&rsquo;m certainly no Don Draper, but that&rsquo;s not gonna prevent my <del>ego</del> imagination to think of how I&rsquo;d do it instead. The idea is that the Surface apparently has a nice stylus/pen that can be used by artists. Penny Arcarde&rsquo;s <a href="http://www.penny-arcade.com/news/post/2013/10/28/surface-pro-2">Mike Krahulik has been a fan</a> and used them to draw their popular web comic. That&rsquo;s your angle right there. Now, not many people are artists that would benefit from a refined drawing interface, but plenty of people <em>fancy</em> themselves as such. Nike convinced you that sneakers with compressed air in them would make you Michael Jordan, why isn&rsquo;t Microsoft showing you that Surface would make you <a href="http://en.wikipedia.org/wiki/Jim_Lee">Jim Lee</a>?</p>

<p>Here&rsquo;s your commercial: Camera fades in to reveal someone intently working on a Surface. They&rsquo;re sitting in a comfy chair, or on a couch, or some kind of hipster furniture. We don&rsquo;t see what&rsquo;s on the screen yet but we can see them concentrating and cranking away at <em>something</em> with the pen. Cut to the over-the-shoulder shot. We now see a painting/sketch/comic coming to life.</p>

<p>Cut to closeups of the pen drawing right on the glass. There&rsquo;s no lag. The pen is able to draw with a fine point. There&rsquo;s obvious pressure sensitivity. (Things you pretty much can&rsquo;t do on an iPad, but without calling it by name.) They put the pen down and &ldquo;smudge&rdquo; things with their finger.</p>

<p>Finally the art is done. The artist switches to their website and immediately publishes the work.</p>

<p>Cut to a desk with the notorious Surface keyboard and a wireless mouse right next to it. The Surface clicks in to the keyboard, sits up on the kickstand and a modern 3D PC game (say, Far Cry 4) starts up (oh yeah, it&rsquo;s got an i5 and a GPU). Display the tagline: &ldquo;Make. Publish. Play.&rdquo;</p>

<p>Wouldn&rsquo;t that be more interesting than breakdancing? Wouldn&rsquo;t that get you pumped up just a little bit? These days I&rsquo;m a Microsoft cynic, and that would at least get me to raise an eyebrow and <em>wish</em> my iPad could do something like that.</p>

<p>If Apple is in fact <a href="http://9to5mac.com/2015/01/18/kgi-apple-likely-to-sell-stylus-accessory-alongside-12-inch-ipad-pro/">working on a stylus</a> that avenue will probably close.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>The funny thing is that out of all Apple&#8217;s products, the iPad is the one that has plateaued the most. Why are you aiming at that one?</p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Madness of Errors in Swift]]></title>
    <link href="http://blog.swilliams.me/words/2015/01/21/the-madness-of-errors-in-swift/"/>
    <updated>2015-01-21T20:18:43-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/01/21/the-madness-of-errors-in-swift</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s take a common scenario. You are making an HTTP request and are checking the response for an error. If there is one, you&rsquo;d like to post a notification and let some error handler deal with it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    Alamofire.request(.GET, someURL).response { (request, response, data, error) in
</span><span class='line'>        if error != nil {
</span><span class='line'>            let userInfo = ["error": error]
</span><span class='line'>            let nc = NSNotificationCenter.defaultCenter()
</span><span class='line'>            nc.postNotificationName("HTTPERROR", object: nil, userInfo: userInfo)
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>Uh oh, there&rsquo;s a compiler error on the <code>userInfo</code> argument with the message &ldquo;Extra argument &lsquo;userInfo&rsquo; in call&rdquo;. Huh? <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/index.html#//apple_ref/occ/instm/NSNotificationCenter/postNotificationName:object:userInfo:"><code>postNotificationName</code> definitely allows for a <code>userInfo</code> parameter</a>. Maybe it&rsquo;s a hidden typing error? According to the docs <code>userInfo</code> is supposed to be an optional dictionary like of type: <code>[NSObject : AnyObject]</code>. My key is a String which is bridged from <code>NSString</code>, which is an <code>NSObject</code> and <code>NSError</code> is also an <code>AnyObject</code>, so what gives?</p>

<figure class="center">
    <img alt="Lying" src="http://blog.swilliams.me/images/assets/xcode-lying-cat.jpg">
    <figcaption></figcaption>
</figure>


<p>After banging my head on the wall for a while I remembered that the <code>error</code> variable from <a href="https://github.com/Alamofire/Alamofire">AlamoFire</a> is an optional. Therefore, the correct declaration for <code>userInfo</code> is to unwrap the error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let userInfo = ["error": error!]</span></code></pre></td></tr></table></div></figure>


<p>And voilà, no more compilation errors.</p>

<p>&ldquo;Extra argument &lsquo;userInfo&rsquo; in call&rdquo; is a crappy error message. The proper one should have been something about values in the <code>userInfo</code> dictionary not being optional.</p>

<p>Swift is full of these unfortunately. Between these and your friendly SourceKit crashes it&rsquo;s getting untenable. My wish for 2015 is for Apple to address these shortcomings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O Christmas Roast]]></title>
    <link href="http://blog.swilliams.me/words/2014/12/29/o-christmas-roast/"/>
    <updated>2014-12-29T15:55:42-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/12/29/o-christmas-roast</id>
    <content type="html"><![CDATA[<p><em>I posted this on Twitter. Here it is for posterity.</em></p>

<p>O Christmas Roast, O Christmas Roast!<br />
Thy rawness shall be ending<br />
O Christmas Roast, O Christmas Roast!<br />
Thy rawness shall be ending<br /></p>

<p>Inside the oven you shall go<br />
So that the juice within you flows<br />
O Christmas Roast, O Christmas Roast!<br />
Thy rawness shall be ending<br /></p>

<p>O Christmas Roast, O Christmas Roast!<br />
Such gravy will you make me!<br />
O Christmas Roast, O Christmas Roast!<br />
Such gravy will you make me!<br /></p>

<p>The thermometer will pierce your side<br />
Until your temp reads 125<br />
O Christmas Roast, O Christmas Roast!<br />
Such gravy will you make me!<br /></p>

<p>O Christmas Roast, O Christmas Roast!<br />
We&rsquo;ll set our teeth upon thee!<br />
O Christmas Roast, O Christmas Roast!<br />
We&rsquo;ll set our teeth upon thee!<br /></p>

<p>Two yards of plastic will we turn<br />
To avoid a chilling freezer burn<br />
O Christmas Roast, O Christmas Roast!<br />
We&rsquo;ll save you for another meal<br /></p>

<p>Each tasty bite<br />
Each dab of meat<br />
No other bite will fill my cheeks<br /></p>

<p>O Christmas Roast, O Christmas Roast!<br />
Within our guts digesting<br />
Within our guts digesting<br /></p>
]]></content>
  </entry>
  
</feed>
