<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Scott Williams]]></title>
  <link href="http://swilliams.github.io/atom.xml" rel="self"/>
  <link href="http://swilliams.github.io/"/>
  <updated>2014-03-05T10:42:59-07:00</updated>
  <id>http://swilliams.github.io/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating from Squarespace]]></title>
    <link href="http://swilliams.github.io/words/2014/03/05/migrating-from-squarespace/"/>
    <updated>2014-03-05T09:23:18-07:00</updated>
    <id>http://swilliams.github.io/words/2014/03/05/migrating-from-squarespace</id>
    <content type="html"><![CDATA[<p>Squarespace is a popular service to host a website or blog. You might have seen their <a href="http://www.youtube.com/watch?v=S0Or1f_RxKQ">Super Bowl commercial</a> or heard about them on one of the hundred podcasts they sponsor. I signed up about a year and a half ago and used it as my main blog. I&rsquo;ve decided to move away and use <a href="http://octopress.org">Octopress</a> to host my blog on <a href="http://octopress.org/">GitHub Pages</a> instead.</p>

<p>Why? Well, for starters, it&rsquo;s slow to use. I think it&rsquo;s a byproduct of the way they organized their <a href="http://en.wikipedia.org/wiki/Single-page_application">single-page application</a> architecture. I find myself having to wait for things to open in modal windows, or to load another menu.</p>

<p>The layout tools are bad. If all you do is write text and link to stuff, this doesn&rsquo;t matter. Sometimes I like to have <a href="http://swilliams.github.io/words/2014/01/26/demystifying-ruby-dsls">in depth coding posts</a> that have multiple blocks of code within them. This is incredibly painful to do with the Squarespace layout tools. Here&rsquo;s the process:</p>

<ol>
<li>Hover over an existing text block.</li>
<li>Click the appropriate &ldquo;+&rdquo; button.</li>
<li>Scroll down to find the &ldquo;CODE&rdquo; button.</li>
<li>Paste in the code (after making sure the indentation is correct)</li>
<li>Go to step 1 and this time, select Markdown.</li>
<li>Rinse and repeat for <em>every</em> block and image you want.</li>
</ol>


<p>What you see is <em>definitely not</em> what you get. Sizing images to align to the left or right of a paragraph is awful. For some reason, the editing font on the admin page is different than the one on the actual site. This means that even if everything lines up on the admin page, it might not on the live site. Fixing this is tedious. Again, due to the single-pagedness of the admin site, you can&rsquo;t easiliy open the preview in a new tab or window (&lsquo;Open in new page&rsquo; does nothing). You need to open a brand new browser window, navigate to your admin site, then click on the preview button there.</p>

<p>Saving a post in the editor closes the modal that contains it. This means that the workflow for making any kind of adjustment is:</p>

<ol>
<li>Do the thing above to get a second window open to look at the preview.</li>
<li>Click the post in the first window to edit.</li>
<li>Wait a second.</li>
<li>Find the typo to fix. This is extra fun if you have multiple blocks of text.</li>
<li>Fix the typo and hit save. (Modal closes)</li>
<li>Switch over to the preview in the second window and refresh.</li>
<li>If it&rsquo;s not right, repeat steps 2-6 until it is.</li>
</ol>


<p>All of this for about $100/year (or more).</p>

<p>Octopress is a static site generator that is aimed at developers. If you don&rsquo;t know <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, <a href="http://git-scm.com/">git</a>, as well as HTML + CSS consider something else. However, since I am familiar with all of those, it works for me.</p>

<p>The problem is exporting my content from Squarespace. The only export option available is one for <a href="http://wordpress.org/">Wordpress</a>, which dumps everything into an XML file. Since I&rsquo;m not using Wordpress, this didn&rsquo;t work for me. My blog has been quite the sojourner, created orginally on Wordpress, then to Posterous (lol), and finally Squarespace. It&rsquo;s accumulated a bit of cruft. For some reason, older posts did not export properly; if they contained an image and text, the text was deleted.</p>

<p>After some fiddling, I put together a <a href="https://github.com/swilliams/squarespace-exporter">script</a> that would walk each post on the blog, download everything and then move onto the next. I did run into some gotchas though:</p>

<ul>
<li>Some of the older images were named &ldquo;#img.jpg&rdquo;. I ended up <a href="https://github.com/swilliams/squarespace-exporter/blob/master/script.rb#L151">generating</a> a random string for the filename and removing the hashtag.</li>
<li><code>&lt;img&gt;</code> tags used a <code>data-src</code> attribute instead of a standard <code>src</code> attribute. <a href="https://github.com/swilliams/squarespace-exporter/blob/master/script.rb#L181">The fix was to rename the attribute</a>.</li>
<li>There was a veritable boatload of extra markup and attributes on each post, which made things look weird. I ended up parsing the entire HTML of each post and <a href="https://github.com/swilliams/squarespace-exporter/blob/master/script.rb#L223">stripping</a> out all the unnecessary stuff.</li>
</ul>


<p>There are still some issues that I&rsquo;ll need to address on a case by case basis, but it&rsquo;s a good 80% solution right now.</p>

<figure>
    <img src="http://swilliams.github.io/images/assets/octopress.png" alt="Octopress" />
</figure>


<p>I like Octopress because it is fast, easy for me to manage, and keeps my content in a simple (and portable) format. I just hope that this will last me for a while. It doesn&rsquo;t do nearly as many things as Squarespace, but most of those I don&rsquo;t need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demystifying Ruby DSLs — Part 2]]></title>
    <link href="http://swilliams.github.io/words/2014/02/21/demystifying-ruby-dsls-part-2/"/>
    <updated>2014-02-21T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2014/02/21/demystifying-ruby-dsls-part-2</id>
    <content type="html"><![CDATA[<p><a href="http://swilliams.github.io/words/2014/01/26/demystifying-ruby-dsls">Last time we learned about how to use modules to dynamically add functionality to a class</a>. This time let&rsquo;s take a look at doing that, but customizing our extensions at runtime.</p>

<p>What helped me ultimately understand how these things work is that you are building up classes on the fly. It&rsquo;s kind of like when you <code>include</code> a module, it&rsquo;s editing that class to add more methods to it. Think of a bunch of Legos. Each Lego is a module with various methods on it. At runtime they assemble together to build a castle.</p>

<figure>
    <img alt="Lego Castle by InSapphoWeTrust on Flickr." src="http://swilliams.github.io/images/assets/lego-annotated.png">
    <figcaption><a href="http://www.flickr.com/photos/56619626@N05/7406185206/in/photolist-chsCQo-chsDcG-chsCVb-chsD97-chsBY3-chsCeN-chsDid-bgETZB-8FZGC9-9nsJ9P-8oTk1n-dCdMj4-f8b3QR-7J1LqD-7BnYDa-7BnZmZ-7BrJZw-7BrLsb-7BnVLP-9XN1mi-cnFar5-chsCy7-gC3qkX-chsCKW-chsCs1-chsCoN-aCZJqe-aCZJe4-chsCcf-chsC41-aCcgjW-aC9BwX-aCcgf3-aC9BE6-aC9BKr-aCcgUf-aCcgRw-aC9C9v-aCcgXo-chsC7J-chsBZw-a5YVbT-em9rGR-em9ru8-emfdMW-em9tEg-emfewq-emfeEm-emfdxf-emfeh9-emfdi5">Lego Castle</a> by <a href="http://www.flickr.com/photos/skinnylawyer/">InSapphoWeTrust</a> on Flickr.</figcaption>
</figure>


<h3>Dynamically Adding</h3>

<p>What if those Legos could generate even more Legos as you were building with them, and then intelligently join themselves together?</p>

<p>If you&rsquo;re familiar with Rails, you&rsquo;ve seen that you can just declare associations within a model — <code>:has_many</code>, <code>:has_one</code>, and so on. Once you add those directives to your class, suddenly you have access to brand spanking new methods. Have you ever wondered how that worked? Let&rsquo;s implement a rudimentary version.</p>

<p>Think for a moment about <code>:has_many</code>. What would you expect the line <code>has_many :gerbils</code> methods to do?  You would have to have a <code>gerbils</code> method to retrieve the little fellas, and another one, <code>gerbils=(new_value)</code> to set them (and others to add them and so on, but <a href="http://en.wikipedia.org/wiki/Keep_it_simple_stupid">KISS</a>). You implement that with a generic <code>get_child_models(child_name)</code> method, but that feels like the Java (™ Oracle Corporation) way&hellip; and I have too much self respect to go down that path. Instead we can take advantage of Ruby&rsquo;s metaprogramming capabilities and generate them dynamically.</p>

<p>One way to do this is with <code>eval</code>.</p>

<h3>A Word on Eval</h3>

<p>Ruby has a few versions of <code>eval</code>. They all take strings or blocks and turn them in code that is executed.</p>

<ul>
<li>There&rsquo;s the <a href="http://www.ruby-doc.org/core-2.1.0/Kernel.html#method-i-eval">standard one</a> that executes arbitrary code.</li>
<li><a href="http://ruby-doc.org/core-2.1.0/Module.html#method-i-class_eval">class_eval</a> — similar to vanilla <code>eval</code>, but executes the code in the context of the Class itself. There&rsquo;s also <code>module_eval</code> which does the same thing (more or less). Example:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Monkey</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="no">Monkey</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">Monkey</span><span class="o">.</span><span class="n">class_eval</span> <span class="sx">%q(def screech() &#39;Eek Eek&#39; end)</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">screech</span> <span class="c1"># Eek Eek</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="">instance_eval</a> — modifies a class, but from an instance point of view, <em>and only for that particular instance</em> (this is called a <a href="http://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/39-ruby-s-object-model/lessons/131-singleton-methods-and-metaclasses">Singleton method</a>).</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Monkey</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="no">Monkey</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">m2</span> <span class="o">=</span> <span class="no">Monkey</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">instance_eval</span> <span class="sx">%q(def screech() &#39;Eek Eek&#39; end)</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">screech</span> <span class="c1"># Eek Eek</span>
</span><span class='line'><span class="n">m2</span><span class="o">.</span><span class="n">screech</span> <span class="c1"># NoMethodError: undefined method `screech&#39; for #&lt;Monkey:0x007fa6f768bac8&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using these techniques you can generate the set of methods for our <code>:has_many</code> implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Associations</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="ss">Associations</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">has_many</span><span class="p">(</span><span class="n">thingies</span><span class="p">)</span>
</span><span class='line'>      <span class="n">code</span> <span class="o">=</span> <span class="sx">%(</span>
</span><span class='line'><span class="sx">        def </span><span class="si">#{</span><span class="n">thingies</span><span class="si">}</span><span class="sx"></span>
</span><span class='line'><span class="sx">            # retrieve stuff from here</span>
</span><span class='line'><span class="sx">        end</span>
</span><span class='line'>
</span><span class='line'><span class="sx">        def </span><span class="si">#{</span><span class="n">thingies</span><span class="si">}</span><span class="sx">=(new_value)</span>
</span><span class='line'><span class="sx">            # set new_value here</span>
</span><span class='line'><span class="sx">        end</span>
</span><span class='line'><span class="sx">      )</span>
</span><span class='line'>      <span class="nb">class_eval</span> <span class="n">code</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if you <code>include Associations</code> in your class, you can call <code>has_many :hamsters</code> or <code>has_many :gerbils</code> or <code>has_many :guinea_pigs</code> and have all of your getters and setters created.</p>

<figure>
    <img alt="This is you with all the gerbil methods." src="http://swilliams.github.io/images/assets/cashew.jpg">
    <figcaption>This is you with all the gerbil methods.</figcaption>
</figure>


<h3>Caution</h3>

<p>I&rsquo;m not a big fan of <code>eval</code>, at least when using it with strings. The biggest reason is that it makes bugs harder to find. The Ruby interpreter will point out syntax errors when the file loads, but a typo in an evalled string won&rsquo;t get caught until runtime. The longer the string, the more likely something bad will creep in there. And some of these dynamically created methods will be long. I&rsquo;m talking <a href="http://www.amazon.com/gp/product/B0026L7H20/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0026L7H20&amp;linkCode=as2&amp;tag=thepetzoo-20">Lord of the Rings Extended Edition</a> long.</p>

<p>Fortunately there is a better way. The eval methods also take blocks, which work pretty well in most cases. For the purposes of dynamically generating methods, I prefer using <code>define_method</code> <a href="http://ruby-doc.org/core-2.1.0/Module.html#method-i-define_method">source</a>. It&rsquo;s available on <code>Module</code> (and therefore classes too) and, just like it says on the tin, is designed to create methods on the fly and add them to a class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">has_many</span><span class="p">(</span><span class="n">thingies</span><span class="p">)</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="n">thingies</span><span class="o">.</span><span class="n">to_s</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># retrieve stuff from here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">thingies</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># set new_value here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s kinda similar to the eval code, in fact, <code>define_method</code> passes itself along to <code>instance_eval</code>, so when all is said and done, it&rsquo;s merely for our convenience. But is easier to test, and will complain loudly if there&rsquo;s a syntax error.</p>

<p>Working with actual code rather than a string makes refactoring easier too. Let&rsquo;s say you want to enable your users to define their own implementations of the generated rodent methods. Pulling that out into its own method is simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_method_without_clobbering</span> <span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">method_definition</span><span class="p">)</span>
</span><span class='line'>  <span class="k">unless</span> <span class="nb">method_defined?</span> <span class="n">method_name</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="n">method_name</span><span class="p">,</span> <span class="n">method_definition</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">has_many</span><span class="p">(</span><span class="n">thingies</span><span class="p">)</span>
</span><span class='line'>  <span class="n">add_method_without_clobbering</span> <span class="n">thingies</span><span class="o">.</span><span class="n">to_s</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># retrieve stuff from here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">add_method_without_clobbering</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">thingies</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># set new_value here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s still possible with string evals, but is easier to read in my eyes.</p>

<p>That&rsquo;ll wrap up this entry on DSLs. There&rsquo;s only one other big piece of the pie I&rsquo;d like to cover — blocks, but you can do a whole lot without them.</p>

<p>One thing to keep in mind when writing DSLs is that it can be hard to follow along. Document everything, especially the esoteric parts. It might even be a good idea to diagram the path of all the <code>include</code> chain. DSLs can make client code easier to write, but usually at the expense of crazy complexity within the DSL itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demystifying Ruby DSLs]]></title>
    <link href="http://swilliams.github.io/words/2014/01/26/demystifying-ruby-dsls/"/>
    <updated>2014-01-26T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2014/01/26/demystifying-ruby-dsls</id>
    <content type="html"><![CDATA[<p>I like <a href="https://www.ruby-lang.org/en/">Ruby</a>. It has a way of appearing clean and simple, while still being expressive. Due to its <a href="http://en.wikipedia.org/wiki/Dynamic_typing#Dynamic_type-checking_and_runtime_type_information">typing system</a> you can bend it in a variety of ways to do certain things that would be very complicated in other languages, or make you write an entire compiler. I&rsquo;m talking, of course, about Domain Specific Languages, or <a href="http://en.m.wikipedia.org/wiki/Domain_specific_language">DSLs</a>. If you&rsquo;ve ever used a popular Ruby library (like Rails, or RSpec, or anything else) then you&rsquo;ve used a DSL. Rails in particular has a couple different ones:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="c1"># Routes</span>
</span><span class='line'> <span class="c1"># config/routes.rb</span>
</span><span class='line'> <span class="ss">DerptyDerp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">resources</span> <span class="ss">:users</span>
</span><span class='line'>   <span class="n">resources</span> <span class="ss">:dinguses</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:show</span><span class="o">]</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'> <span class="c1"># ActiveRecord</span>
</span><span class='line'> <span class="c1"># app/models/user.rb</span>
</span><span class='line'> <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>   <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>   <span class="n">has_one</span> <span class="ss">:dingus</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And so on. At first glance, the code that allows this can be intimidating, especially when it&rsquo;s been broken up and refactored across 20 different classes and modules. Fortunately, there are probably only about 10 things that you really need to know to read along, and to make them yourself.</p>

<h3>Class Methods</h3>

<p>Did you know that you can execute code right from within a class declaration? Well, you can. Try it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Derp</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">can_eat_sandwiches</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I LOVE CATS&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">can_eat_sandwiches</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When that class is read by the interpreter, it&rsquo;ll execute the <code>can_eat_sandwiches</code> method and print the non-sequitur to the console. This&rsquo;ll even work through inheritance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Herp</span> <span class="o">&lt;</span> <span class="no">Derp</span>
</span><span class='line'>  <span class="n">can_eat_sandwiches</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you&rsquo;ll have a wonderful message printed out twice. This technique can be used to do more than just clutter up a log file too! For example, in Rails when you <a href="https://github.com/rails/rails/blob/9c025ab6e9731dde56186b41ba5d4f216a48c831/activemodel/lib/active_model/validations.rb#L140">setup validation</a>, all you&rsquo;re doing is calling another method.</p>

<h3>Put it into a Module</h3>

<p>Sometimes you want to add functionality to a class without locking it into a long inheritance chain. Ruby uses <a href="http://www.tutorialspoint.com/ruby/ruby_modules.htm">Modules</a> to accomplish this, so you can pull your methods into a separate file to include them at will. There&rsquo;s a catch though before you dive in. Traditionally, you&rsquo;d include a module like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TheHerppening</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">can_eat_sandwiches</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sandwichable</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">TheHerppening</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you know how modules work, you might&rsquo;ve noticed that will only add <code>can_eat_sandwiches</code> to <em>instances</em> of <code>Sandwichable</code>, not to <code>Sandwichable</code> itself. Which means that calling <code>can_eat_sandwiches</code> directly in the class won&rsquo;t work. But fear not! Ruby can be molded in many dark and fearsome ways. Rather than using <code>include</code>, you can use <code>extend</code> to add methods to a class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Sandwichable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">TheHerppening</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">can_eat_sandwiches</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aaaaand we&rsquo;re back in business. But, say you wanted to have some methods that needed to be on instances, and some for the class? Can you mix both? Sure. Just wrap them in different modules and add them with the appropriate calls. There&rsquo;s even a pattern to follow for naming the modules: <code>ClassMethods</code> and <code>InstanceMethods</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TheHerppening</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">can_eat_sandwiches</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;DING&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">eat_the_sandwich</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;I wish I could marry a sandwich.&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>They can even be in the same file. As a side note, this is also how you can do namespacing in Ruby. Including these can be a little tedious if you have to add this to lots of classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Sandwichable</span>
</span><span class='line'>    <span class="kp">extend</span> <span class="ss">TheHerppening</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'>    <span class="kp">include</span> <span class="ss">TheHerppening</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">can_eat_sandwiches</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not to mention ugly. And if there&rsquo;s one thing a good Ruby coder can&rsquo;t stand, it&rsquo;s ugly code. Let&rsquo;s fix that.</p>

<p><a href="http://ruby-doc.org/core-2.1.0/Module.html">Modules</a> (and classes) have all kinds of meta-programming capabilities built in. I encourage you to go and peruse them at your leisure. What we&rsquo;ll focus on here is the <code>[included](http://ruby-doc.org/core-2.1.0/Module.html#method-i-included)</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dingus</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">send</span> <span class="ss">:include</span><span class="p">,</span> <span class="ss">Dingus</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="ss">Dingus</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of a sudden, your class now has all of the extra stuff from the <code>Dingus</code> module inside it.</p>

<p>That might be jumping ahead a few steps, what with the <code>class &lt;&lt; self</code> and all. Don&rsquo;t forget that in Ruby, <em>everything</em> is a class, even modules. Conceptually it might be easier to understand if you look at <code>Module</code>&rsquo;s ancestors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="no">Module</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="no">Module</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="ss">PP</span><span class="p">:</span><span class="ss">:ObjectMixin</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, a <code>Module</code> is just a subclass of <code>Object</code> and can be treated as such. <a href="http://www.youtube.com/watch?v=WFNEgdwjEhs">Whoa</a>. Specifically, the <code>class &lt;&lt; self</code> allows you to put class level methods on the module (you can also do this to a class as an alternative to <code>def self.whatevers</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dingus</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">say_hi</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;HI&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dingus</span><span class="o">.</span><span class="n">say_hi</span> <span class="c1"># HI</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, <code>included</code> is called when that module is included in a class. This means you can set off a chain reaction of includes with just a single one.</p>

<p>This is just the start. Ruby gives you enough metaprogramming rope to build a hammock and then hang yourself with the leftovers. We&rsquo;ll get into some of the other ways to do this later on, including <a href="http://stackoverflow.com/q/4911353/736">blocks</a>, <a href="http://www.ruby-doc.org/core-2.1.0/Kernel.html#method-i-eval">eval</a>, and the infamous <a href="http://www.ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing">method-missing</a>. I encourage you to start digging into some code, and even trying a little of this yourself. Once you get a few reps in, understanding how DSLs work becomes much easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Computers Through the Ages Part II]]></title>
    <link href="http://swilliams.github.io/words/2014/01/25/my-computers-through-the-ages-part-ii/"/>
    <updated>2014-01-25T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2014/01/25/my-computers-through-the-ages-part-ii</id>
    <content type="html"><![CDATA[<p>In <a href="http://swilliams.github.io/words/2014/01/09/my-computers-through-the-ages">Part 1</a> I talked about my first few computers. They were an important part of my childhood, and shaped the person I would become and the career I chose. When I went to college I started to build and upgrade my own PCs. Things went well enough at first, but then got a little out of hand.</p>

<h3>Dark Ages</h3>

<p><strong>Custom PC #1</strong> (2000) Since I was still in college, I didn&rsquo;t have very much money and bought some dirt cheap parts from websites that may have been run by questionable companies. These parts were leftover from <a href="http://en.wikipedia.org/wiki/Oem">OEMs</a> and didn&rsquo;t have real retail boxes. Some would just show up with a minimal layer of bubble wrap around the bare hardware. I had bought a <a href="http://en.wikipedia.org/wiki/Pentium_iii">Pentium III CPU</a>, but screwed up putting the heatsink on it. It was too unstable to run at its advertised speed, so I had to <em>underclock</em> it or it&rsquo;d just lock up the whole system within minutes. It could run <a href="http://en.wikipedia.org/wiki/Quake_III_Arena">Quake 3</a> well enough though at that speed.</p>

<p><strong>Custom PC #2</strong> (2001) If at first you don&rsquo;t succeed right? This was the only time I strayed away from the Intel and bought an <a href="http://en.wikipedia.org/wiki/Amd_athlon">AMD Athlon processor</a>. I had learned from my mistake and assembled it correctly, but it also had problems and would lock up at odd times. I remember trying to show my parents just what a computer could do by playing an assortment of Led Zeppelin mp3s, and halfway through Stairway it froze and needed to be restarted. I was either not a very good PC builder or kept buying crummy parts. Probably a little from column A and a little from column B.</p>

<p>I hit the nadir of my computer history while putting this computer together. During the assembly I saw that there were some weird red splotches on the inside of the case but couldn&rsquo;t figure out what they were. More started to appear and then I realized that I had cut my hand on a sharp hunk of metal from the bargain basement case and I was bleeding all over it.</p>

<h3>Working Stiff</h3>

<p><strong>Custom PC #3</strong> (2004) I had a real jobby-job and was earning more than the $Nothing I was in college, so I was finally able to afford computer parts that came in actual boxes, and wouldn&rsquo;t require keeping a roll of bandages nearby. I went back to Intel and got a <a href="http://en.wikipedia.org/wiki/Pentium_IV">Pentium 4</a> to run <a href="http://en.wikipedia.org/wiki/Windows_xp">Windows XP</a>. This was my first DIY computer that actually ran ok. It was also the first time I used an LCD monitor. The <a href="http://reviews.cnet.com/lcd-monitors/dell-ultrasharp-1905fp/4505-3174_7-31232074.html">19&#8221; Dell Ultrasharp</a> was a big upgrade to the cumbersome CRTs I had been using.</p>

<p><strong>Custom PC #4</strong> (2007) My last Windows PC, and also the best. My brother-in-law worked at Intel and as &ldquo;payment&rdquo; for taking some pictures at his wedding gave me a nice <a href="http://en.wikipedia.org/wiki/Core_2_duo#Core_2_Duo">Core 2 Duo</a> CPU. The prior one worked well enough, but was very loud. Pentium 4&rsquo;s were known to run hot, and my case required a number of fans to keep mine from melting through to the Earth&rsquo;s core. The Core 2 Duo was much quieter.</p>

<p>Honestly, there wasn&rsquo;t anything very memorable about this one. It was a Camry — reliable, but otherwise unremarkable.</p>

<p>Things were starting to change for me. I had been a software developer working in the <a href="https://msdn.microsoft.com/">Microsoft stack</a> for a long time and felt a seven year itch to move on to different things.</p>

<h3>Fruit</h3>

<p>I never liked Apple computers. When I was growing up in the early-mid 90s, it was the &ldquo;dark&rdquo; times for Apple, when they kept releasing unremarkable computers with ancient notions of software. Even when Steve Jobs returned,  I thought of them as too expensive and fluffed up with a bunch of annoying marketing. I especially despised the original iMac<sup>1</sup> with the <a href="http://www.youtube.com/watch?v=83nS4EGKU04">goofy colors</a>, <a href="http://en.wikipedia.org/wiki/Apple_USB_Mouse">awful mouse</a>, and thought that it was dead in the water because it lacked a floppy drive. This wouldn&rsquo;t be the first time a technical prediction of mine was hilariously off base.</p>

<p>As time went on I did start to like the industrial design of a few models. The original <a href="http://en.wikipedia.org/wiki/PowerBook_G4#Titanium_PowerBook_G4">Titanium Powerbooks</a> (so thin!), and the <a href="http://en.wikipedia.org/wiki/G4_cube">G4 Cube</a> looked especially nice to my eyes, but they were still way too expensive for my budget.</p>

<p>Around the time they switched over to Intel processors I started to reconsider my position. I liked that they were <a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/OSX_Technology_Overview/SystemTechnology/SystemTechnology.html">Unixy</a>, making certain kinds of web development easier. Eventually, some of the more garish designs of OS X were <a href="http://arstechnica.com/apple/2007/10/mac-os-x-10-5/3/">stripped back</a>, and I decided to make the leap.</p>

<figure>
    <img alt="30 Years of the Mac" src="images/assets/30years.png" />
    <figcaption>30 Years of the Mac</figcaption>
</figure>


<p>Apple recently celebrated the <a href="http://www.apple.com/30-years/">30th anniversary of the original Macintosh</a>. I joined the Mac train in 2009, and have [mostly] liked it ever since. Next time I&rsquo;ll go into the specifics of the Macs that I&rsquo;ve owned, and why I recommend them.</p>

<div class="footnotes">
1. It looked like a suppository, ok?
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Your Developer Saw Sharp]]></title>
    <link href="http://swilliams.github.io/words/2014/01/20/keep-your-developer-saw-sharp/"/>
    <updated>2014-01-20T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2014/01/20/keep-your-developer-saw-sharp</id>
    <content type="html"><![CDATA[<figure>
    <img alt='"Dremel Moto Jig Saw" from Pete Prodoehl on Flickr' src="http://swilliams.github.io/images/assets/5184600234_a99779ddc1_z.jpg">
    <figcaption><a href="http://www.flickr.com/photos/raster/5184600234/">&#8220;Dremel Moto Jig Saw&#8221;</a> from <a href="http://www.flickr.com/photos/raster/">Pete Prodoehl</a> on Flickr</figcaption>
</figure>


<p>If you&rsquo;re a software developer, you need to make sure your skills are up to date. If you don&rsquo;t, you&rsquo;re doing yourself a disservice.</p>

<p>This is important for several reasons. First, it keeps you marketable. There&rsquo;s no such thing as true job security. You might be a vitally important cog in an esoteric process at a corporation, but could still be laid off if certain numbers in an executive&rsquo;s spreadsheet don&rsquo;t come out in your favor. Even though it&rsquo;s a buyers&#8217; market for software developers right now, you might suddenly find yourself looking down the pointy end of an interview table needing to answer a question about something that you always meant to study up on, but never did.</p>

<p>Things change, and practices that were once standard aren&rsquo;t any more. In fact, they can be dangerous. For example, I was on a project with a client&rsquo;s DBA who hadn&rsquo;t really kept up with the times. He would&rsquo;ve been a really good SQL Server DBA if it were still 1998. His design for the project included making just under 400 tables, with no fewer than 20 joins for any query. Since the application was very heavily data driven, things bogged down under even light loads. The performance caused many long nights and weekends and &ldquo;aggressive conversations&rdquo; with managers at the client.</p>

<p>It can be <strong>expensive</strong>. The problems in the above anecdote could&rsquo;ve been avoided by adopting a <a href="http://stackoverflow.com/a/460296/736">less normalized</a> approach in the database. Yes, data would&rsquo;ve been duplicated, but hardware has gotten <em>so</em> much cheaper it&rsquo;s financially irresponsible not consider just buying faster stuff. You could save $10,000 on a new server, but if you&rsquo;re paying a team of consultants billing $1,000/hour for <em>weeks</em> of work, <a href="http://www.youtube.com/watch?v=-DGFuHC75aY">you chose poorly</a>.  If StackOverflow got away with just <a href="http://highscalability.com/blog/2011/3/3/stack-overflow-architecture-update-now-at-95-million-page-vi.html">2 database servers in 2011</a>, you can probably do just fine with one.</p>

<p>It makes team dynamics better. I&rsquo;ve been a consultant of some form or fashion for nearly seven years now. I&rsquo;ve seen good projects, and I&rsquo;ve seen bad ones. Bad communication and skill mismatches are traits of projects that go south. When developers are on the same page it makes for much easier conversations. For example, if you are a web developer, I shouldn&rsquo;t have to repeatedly explain what <a href="http://en.wikipedia.org/wiki/REST">REST</a> is in 2014, no matter what platform you&rsquo;re using.</p>

<p>You&rsquo;ll become a better programmer seeing if the grass is greener elsewhere. If all you know is .NET, then you only know the .NET way of doing things. I&rsquo;ve taken to <a href="http://blog.swilliams.me/words/2013/12/16/i-made-an-app">iOS development recently</a>, and at a recent client I used a pattern I learned from working with <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITableView_Class/Reference/Reference.html">UITableViews</a> to do something awesome in JavaScript. Had I never attempted learning Objective C, that wouldn&rsquo;t have happened.</p>

<p>Are you a .NET web developer? Try learning something like <a href="http://guides.rubyonrails.org/getting_started.html">Rails</a>, or <a href="http://nodejs.org/about/">Node</a>, or <a href="https://docs.djangoproject.com/en/1.6/intro/overview/">Python</a>. Rails developer? Try Node, or maybe <a href="https://developer.apple.com/devcenter/ios/index.action">iOS</a> or <a href="http://developer.android.com/sdk/index.html">Android</a>. Mobile developer? Try web development, or a competing platform. Maybe even go with a neckbearded technology like <a href="http://clojure.org/">Clojure</a>. The things you learn from moving outside your environment will only benefit you in your day job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Prepare a MacBook Pro For Sale that was Upgraded to Mavericks]]></title>
    <link href="http://swilliams.github.io/words/2014/01/13/how-to-prepare-a-macbook-pro-for-sale-that-was-upgraded-to-mavericks/"/>
    <updated>2014-01-13T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2014/01/13/how-to-prepare-a-macbook-pro-for-sale-that-was-upgraded-to-mavericks</id>
    <content type="html"><![CDATA[<p>I recently upgraded to a newer MacBook Pro<sup>1</sup>. Since I didn&rsquo;t need my older one, I sold it to a friend&rsquo;s family. I wanted them to be able to have as close to a new-out-of-the-box experience as possible, so I wiped the drive and prepared to reinstall <a href="http://www.apple.com/osx/">OS X Mavericks</a>.</p>

<p>Back when OSes used to ship on CDs or DVDs you could put the disc into the drive and boot right into what is called &ldquo;Recovery&rdquo; mode to reinstall things. Since Apple switched over to download only updates, this is no longer the case.</p>

<p>In order to get back into Recovery mode, restart the computer and hold ⌘R while it boots up. From there you can format the drive and reinstall Mavericks, provided you have an Internet connection. If you created a <a href="http://www.techrepublic.com/blog/apple-in-the-enterprise/how-to-create-a-bootable-usb-to-install-os-x-mavericks/">bootable USB drive</a>, that&rsquo;d work too, without needing to be online.</p>

<p>The catch though is that the new user needs to have an Apple ID <em>that has already &ldquo;purchased&rdquo; Mavericks</em> for the install to continue. This&rsquo;ll be my friend&rsquo;s first Mac, so they never had the opportunity to buy Mavericks. This is also especially weird because Mavericks is <strong>free</strong>. There doesn&rsquo;t appear to be a way to transfer ownership to a separate Apple ID. The solution? <a href="https://discussions.apple.com/message/23573490#23573490">Reinstall the original OS the computer came with</a>. Which means this:</p>

<figure>
    <img alt="IMG_1843.jpg" src="http://swilliams.github.io/images/assets/IMG_1843.jpg">
    <figcaption>Oh, hi, Snow Leopard</figcaption>
</figure>


<p>Yeah, <a href="http://en.wikipedia.org/wiki/Mac_OS_X_Snow_Leopard">OS X 10.6 Snow Leopard</a>. The funny thing about this is that I cleaned out my closet last week and threw away my original Snow Leopard installation DVD thinking I wouldn&rsquo;t need it again. So I <em>found</em> a copy somewhere else. Once that finished installing I handed it off and let them go about updating it to Mavericks.</p>

<p> I don&rsquo;t know how it&rsquo;ll work in a few years when I decide to sell my newest laptop that came with Mavericks already on it. Moral of the story: it&rsquo;s just all too rare when semi-complex software &ldquo;just works&rdquo;.</p>

<div class="footnotes">
1. <a href="http://support.apple.com/kb/SP691">The 13&#8221; retina Pro</a> for those of you keeping score. Holy wow is it fast. And I didn&#8217;t think the retina screen would be that big of a deal, but it is.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Computers Through the Ages]]></title>
    <link href="http://swilliams.github.io/words/2014/01/09/my-computers-through-the-ages/"/>
    <updated>2014-01-09T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2014/01/09/my-computers-through-the-ages</id>
    <content type="html"><![CDATA[<p>I just got my latest computer, a 13&#8221; MacBook Pro with a Retina screen. Before my memory fades too much, I want to list the computers that I have (or my family has) owned, and talk a little about the memories associated with them. I wish I could dig up more pictures of some of these, but almost all of them were not important to be deigned worthy of being stored in the cobwebs of Internet history.</p>

<h3>Prehistory</h3>

<p><strong>Compaq Portable</strong> (some point in the late 80&rsquo;s). My dad used to bring this home every so often from his day job at a large bank. It was called <a href="http://en.wikipedia.org/wiki/Compaq_portable">&ldquo;portable&rdquo;</a> even though it weighed 28 pounds. I learned how to type on this thing and wrote a few papers in 3rd grade before my teacher told me to stop and work on my handwriting. I believe it ran MS-DOS 3.0.</p>

<figure>
    <img alt="The Compaq Portable" src="http://swilliams.github.io/images/assets/1389282253678.jpg" />
    <figcaption>The Compaq Portable</figcaption>
</figure>


<p><strong>IBM &ldquo;Compatible&rdquo;</strong> (early 90&rsquo;s. ) Our first family computer. It had an <a href="http://en.wikipedia.org/wiki/80386">80386</a> that ran at a smoking 25 MHz. It lasted us for years and years. I wrote more school papers on it, learned how to hide certain <a href="http://en.wikipedia.org/wiki/Doom_(video_game">games</a>) my mother wouldn&rsquo;t approve of<sup>1</sup>, and poked around with a little <a href="http://en.wikipedia.org/wiki/Qbasic">QBasic</a>. It ran MS-DOS 5 and had Windows 3.1.</p>

<p>My earliest memory of this computer was learning that &ldquo;hot&rdquo; was slang for &ldquo;stolen&rdquo; because my dad was convinced that some of the parts weren&rsquo;t legal&hellip; I think he was joking. Probably.</p>

<figure>
    <img alt="WordPerfect" src="http://swilliams.github.io/images/assets/Wordperfect-5.1-dos.png" />
    <figcaption>WordPerfect</figcaption>
</figure>


<p>I learned the ins and outs of <a href="http://en.wikipedia.org/wiki/WordPerfect#WordPerfect_for_DOS">WordPerfect 5.1</a> to great effect. In 6th grade I was able to astonish one of my classmates by being able to print out 25 copies of the same document without having to re-type the whole thing 25 times.</p>

<p>My first bit of &ldquo;programming&rdquo; that I could be proud of was a batch script in DOS that would take 10 minutes to run by listing every single file on the system, counting to an insanely high number, prompt the user over and over, and generally be as annoying as possible. I would then try to get my little sister to run it as often as I could just to watch her get angry. One time I left it in the <a href="http://en.wikipedia.org/wiki/AUTOEXEC.BAT">AUTOEXEC.BAT</a> file when my mom needed to use the computer and got in actual trouble.</p>

<p><strong>Unknown Laptop</strong> (mid-late 90&rsquo;s) Another computer we got to borrow from my dad. This time with a little known operating system called Windows 95. It was a fairly primitive laptop, though I was fascinated by the LCD and the weird colors it had unless you looked at it straight on.</p>

<p>I didn&rsquo;t really use it for much other than writing papers. Although, it was our first computer to really connect to the Internet (the old 386 had a modem, but at 2400 baud it was much to slow to be of any value). In 1997 I signed up for a Hotmail email address and thought I was pretty awesome.</p>

<p><strong>HP Desktop</strong> (early 1998) A huge upgrade from the old family PC. This sported a <a href="http://en.wikipedia.org/wiki/Pentium"><em>Pentium</em></a> processor and Windows 95. I remember being most excited about getting a joystick and being able to run <a href="http://en.wikipedia.org/wiki/TIE_Fighter_(video_game)">TIE Fighter</a>, a game that was already several years old, but one that I had missed out on. It was also our first computer to come with a CD-ROM. I could listen to music <em>on my computer(!)</em>. This was going to be the PC I was going to take to college, but fate intervened.</p>

<h3>My Own Little&hellip; My Precious</h3>

<p><strong>CTX Desktop</strong> (summer 1998) I was supposed to take the above HP to school with me, and my family had grown used to having a modern computer in the house and wanted to get their own. At Best Buy<sup>2</sup> when my dad was picking it up I jokingly asked &ldquo;Hey Dad, how about I take this to school and you guys keep the older HP?&rdquo; To my surprise, he thought about it for a second, then said &ldquo;ok&rdquo;.</p>

<p>That turned out to be fortuitous for me. At The University of Arizona, I learned that it was surprisingly upgradeable for a store-bought PC. By the time I was done with it, I had upgraded the video card, hard drive, memory, sound card, and added a CD burner and network card. Pretty much everything except was replaced for the Celeron processor that shipped with it. I even tinkered with the OS too. Originally, it was loaded with Windows 98. I &ldquo;upgraded&rdquo; it to Windows 2000, then eventually went back to 98 because of weird USB issues.</p>

<p>Since this was the first computer I could actually call my own, I felt obligated to really get to know it. It was on this computer that I learned how to actually write code, do a little design work, <a href="http://en.wikipedia.org/wiki/Napster">pirate music</a>, and play more games. At this point, I definitely got &ldquo;the bug&rdquo;.</p>

<p>After this, I built my own PCs for the next few years. I&rsquo;ll cover those some other time.</p>

<div class="footnotes">
 1. Hello, Mom!
 2. Remember buying computers at Best Buy?
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Please Steal This App Idea]]></title>
    <link href="http://swilliams.github.io/words/2014/01/06/please-steal-this-app-idea/"/>
    <updated>2014-01-06T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2014/01/06/please-steal-this-app-idea</id>
    <content type="html"><![CDATA[<p>Spurred on by a <a href="https://twitter.com/swilliams/status/420395505852506112">Twitter conversation</a>, I figured I&rsquo;d write more about my thoughts here. I&rsquo;ve always wanted a GOOD photo editor on the iPad, ever since I saw the <a href="https://www.youtube.com/watch?v=6Fk1V5NqoD4&amp;list=PLPlyGeI5oeICPGwwp4HTdNZkpyP0flmhC">demo</a> of the very first one. There have been a few contendors, but they&rsquo;ve all fallen short.</p>

<p>iPhoto is supposed to be this solution, but the workflow is aggravating. I&rsquo;d love to take a picture on my iPhone, pull up my iPad and edit that picture on the bigger screen, then send it back to my phone (or elsewhere). But there&rsquo;s a lag while iCloud syncs, and then somehow I end up with 4 duplicates when I&rsquo;m done editing, and another lag while iCloud syncs again, <em>sigh</em>.</p>

<p>I&rsquo;ve toyed with the idea of doing it myself in my head, but it&rsquo;d be pretty hard, and time consuming. If anyone is feeling particularly up for a challenge, here&rsquo;s how I&rsquo;d do it.</p>

<p><strong>Pair with a camera.</strong> This is hard. DSLR&rsquo;s <em>still</em> don&rsquo;t have built-in wifi, and neither do most point and shoots<sup>1</sup>. But if someone does have the appropriate adapter, it&rsquo;d be killer. Bonus points for setting up some kind of ad hoc wifi network for a camera to connect to, if that&rsquo;s even possible.</p>

<p><strong>Display photos as soon as they are taken.</strong> When I press the shutter, the photo should appear on the iPad within moments. Since photos (espeically RAW) can be huge, this&rsquo;ll have to be a temporary buffer. If I start to edit a photo, hang onto it, otherwise just keep the last 10 or so around in memory on the iPad. I should be able to swipe through all of the photos in the buffer.</p>

<p><strong>Let me start editing immediately.</strong> Obviously you wouldn&rsquo;t need to add the entirety of Photoshop, but I think a certain subset would be great:</p>

<ul>
<li>RAW controls (temperature/tint, exposure, blacks, brightness, etc)</li>
<li>Curves</li>
<li>Black &amp; White manipulation</li>
<li>&ldquo;Real&rdquo; filters, based on the above controls. We already have Instagram, and don&rsquo;t need another way to make a photo look like it was a Polaroid from the 70&rsquo;s. Heck, let me make my own filters.</li>
<li>Basic touch-ups, kinda like Lightroom (smooth skin, eye brightnes, etc). Imagine just being able to draw a brightness correction with just your finger.</li>
</ul>


<p><strong>Simple export.</strong> This might be a problem on iOS. Don&rsquo;t draw my ire like iPhoto and it&rsquo;s syncing woes. Avoid photos.app until the very end when I <em>want</em> to put a picture in there. Maybe have a companion app for OS X and send a photo there directly from the iPad and avoid the photos app altogether (and save space).</p>

<p>You could whip through that workflow incredibly fast, and not have to fiddle with a mouse and bloated software, or iCloud lag.</p>

<div class="footnotes">
1. I think the camera manufacturers have a secret death wish. You can buy a smartphone with a <a href="http://www.amazon.com/gp/product/B00COYOAYW/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00COYOAYW&linkCode=as2&tag=thepetzoo-20">pretty decent camera, GPS, and wifi built in for $129</a>, but not a <a href="http://www.amazon.com/gp/product/B006U49XM6/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B006U49XM6&linkCode=as2&tag=thepetzoo-20">$6500 dSLR</a>.
    
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whither Shootsy, or, How I Tried and Failed a Startup]]></title>
    <link href="http://swilliams.github.io/words/2013/12/26/whither-shootsy-or-how-i-tried-and-failed-a-startup/"/>
    <updated>2013-12-26T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/12/26/whither-shootsy-or-how-i-tried-and-failed-a-startup</id>
    <content type="html"><![CDATA[<p>Did you know that at one point I had aspirations of being an entrepreneur? For the better part of 2010 and 2011 I spent every free moment I had trying to get a startup on its feet<sup>1</sup>. It was aimed at photographers to help them manage their businesses. We called it Shootsy.</p>

<p>You might have noticed that everything in that paragraph is in the past tense, and that&rsquo;s for good reason. Shootsy is for all intents and purposes, dead. Here&rsquo;s a little bit of the history behind what happened.</p>

<figure>
    <img alt="shootsy-broke.png" src="http://swilliams.github.io/images/assets/shootsy-broke.png">
</figure>


<p>It&rsquo;s a story that&rsquo;s been told over and over: we simply ran out of time. My co-founder <a href="https://twitter.com/carterdea">Carter</a> (who is now a talented, in-demand freelance designer that you should hire) moved 400 miles away to Los Angeles in the pursuit of a woman who would become his wife. As soon as he found work out there, he promptly got overloaded. My day job picked up and I got overloaded with work too. At the time I had a bad feeling about this, but plowed forward anyway.</p>

<p>The math just didn&rsquo;t work in our favor. If you have a 40 hour a week job, you can realistically<sup>2</sup> expect to have anywhere between 10-20 extra hours for a side project. If you have a family, expect that to get smaller.</p>

<p>Both of our jobs started to demand 50+ hours a week for an extended period of time, and more often than not, I simply had no time, or was just too tired to work on Shootsy. So it sat there. And sat there. And then it sat there some more. Finally after not writing any code for nearly a year, we agreed to make official what we both had known in our heads: it was done.</p>

<p>There was no other way to cut it. I had failed at launching a business.</p>

<p>The part that really stings though? How close we were. We had a few people beta testing it. We had some advisors that were going to connect us with some important people once we had shipped. I felt that the competition was weak enough to carve out a niche for ourselves<sup>3</sup>. Some important photographers were interested in trying it out.</p>

<p>Despite the whole thing, I don&rsquo;t regret trying. I learned some important things about myself in process. I don&rsquo;t know if I&rsquo;m cut out to run an entire business. I&rsquo;m a pretty good second banana, but I can&rsquo;t say with 100% certainty that it&rsquo;s a good idea to have the buck stop with me. That&rsquo;s a hard pill to swallow, and maybe it will change after a few more years, but it&rsquo;s a reality I have to accept.</p>

<p>I don&rsquo;t know if I&rsquo;ll attempt a startup again. <a href="http://swilliams.github.io/words/2013/12/16/i-made-an-app">An app</a> is easier. But an app is not a business. An app can be just for fun, which is kind of what <a href="https://itunes.apple.com/us/app/zartbonk/id727445952?ls=1&amp;mt=8">Zartbonk</a> is.</p>

<p><a href="https://twitter.com/danbenjamin">Dan Benjamin</a> once said that you can&rsquo;t create a business as a side project. At the time, I thought I would be able to prove him wrong. Now though, he&rsquo;s absolutely right. I plan to make more apps in the future, but I don&rsquo;t think any of them will become my day job any time soon.</p>

<h3>Screenshots</h3>

<figure class="small">
    <a data-title="A Shoot" data-description="" href="http://swilliams.github.io/images/assets/01b-shoots-details.png" class="image-slide-anchor content-fit">
        <img alt="A Shoot" src="http://swilliams.github.io/images/assets/01b-shoots-details.png"></a>
    <figcaption>A Shoot</figcaption>
</figure>


<figure class="small">
    <a data-title="Packages and Payments" data-description="" href="http://swilliams.github.io/images/assets/01e-shoots-money.png" class="image-slide-anchor content-fit">
        <img alt="Packages and Payments" src="http://swilliams.github.io/images/assets/01e-shoots-money.png"></a>
    <figcaption>Packages and Payments</figcaption>
</figure>


<figure class="small">
    <a data-title="Contacts" data-description="" href="http://swilliams.github.io/images/assets/02c-contacts-search.png" class="image-slide-anchor content-fit">
        <img alt="Contacts" src="http://swilliams.github.io/images/assets/02c-contacts-search.png"></a>
    <figcaption>Contacts</figcaption>
</figure>


<figure class="small">
    <a data-title="Locations" data-description="" href="http://swilliams.github.io/images/assets/04b-locations-map-view.png" class="image-slide-anchor content-fit">
        <img alt="Locations" src="http://swilliams.github.io/images/assets/04b-locations-map-view.png"></a>
    <figcaption>Locations</figcaption>
</figure>


<figure class="small">
    <a data-title="A Specific Location" data-description="" href="http://swilliams.github.io/images/assets/04c-locations-view.png" class="image-slide-anchor content-fit">
        <img alt="A Specific Location" src="http://swilliams.github.io/images/assets/04c-locations-view.png"></a>
    <figcaption>A Specific Location</figcaption>
</figure>


<p>These are some comps that Carter made. They aren&rsquo;t actual screenshots, but the actual app was pretty darn close. If I could, I&rsquo;d play some <a href="https://www.youtube.com/watch?v=nSz16ngdsG0">Sarah McLachlan</a> over it.</p>

<div class="footnotes">
1. I even took a 5 week leave of absence (some unpaid) from my day job to focus exclusively on it.
2. &#8220;Realistically&#8221; as in a sustainable pace. You simply can&#8217;t pull 80 hour weeks continuously without something giving.
3. I still do feel that way. You won&#8217;t ever be acquired for 9 figures, but there&#8217;s enough room to sustain a good business.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting the Minimum in Minimum Viable Product]]></title>
    <link href="http://swilliams.github.io/words/2013/12/22/putting-the-minimum-in-minimum-viable-product/"/>
    <updated>2013-12-22T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/12/22/putting-the-minimum-in-minimum-viable-product</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a common phrase in product development called <a href="http://en.wikipedia.org/wiki/Minimum_viable_product">&ldquo;Minimum Viable Product&rdquo;</a>. It means that the first release of your software product should only do the bare minimum needed to survive. This keeps things simple, and prevents scope creep from sneaking in (I mean you could have your app <em>also</em> <a href="http://www.catb.org/jargon/html/Z/Zawinskis-Law.html">read email</a>, but why?).</p>

<p>For <a href="https://itunes.apple.com/us/app/zartbonk/id727445952?ls=1&amp;mt=8">Zartbonk</a>, this meant that the user had to be able to:</p>

<ul>
<li>Play sounds</li>
<li>Search sounds</li>
<li>Add more sounds (through various means)</li>
</ul>


<p>And all of that had to happen quickly, otherwise what was the point?</p>

<p>That&rsquo;s a good feature list, but there is absolutely more to an app than just checking off a bunch of boxes. I could implement all of those features using giant rectangles with primary colors and almost no interaction. That would certainly be a Minimum Product, but not necessarily a Viable one.</p>

<p>A viable product means that it has enough going for it so that it lives; it doesn&rsquo;t just die on the vine. On a mobile device that means it isn&rsquo;t just relegated to the dreaded last screen, essentially a junk drawer for unloved apps. Or maybe it&rsquo;s just deleted altogether.</p>

<p>I&rsquo;m trying to avoid the junk drawer with Zartbonk. There are a few flourishes here and there to make it fun. Sound clips have their waveforms in the background. The progress bar is accurate as it passes across a clip. When a sound plays in the timeline<sup>1</sup> it&rsquo;s corresponding one in the grid jiggles. You can repeat a sound bite by tapping and holding a play button. I tried to add fades and pretty animations everywhere I could.</p>

<figure>
    <img alt="Jiggle" src="http://swilliams.github.io/images/assets/jiggle.gif">
    <figcaption>Jiggle</figcaption>
</figure>


<p>All of these things took time. A <em>lot</em> of time. Remember those three bullet points up there? Implementing those was just 20% of the whole time spent on the app. The fine tuning and iterations of design took weeks and weeks.</p>

<p>And even I&rsquo;m not immune to the allure of adding more features in there. The whole purpose of the PRO option is to add more than what might be necessary, and to separate from the competition. Looking back, I might not have actually launched with some of the pro features. The timeline in particular was a very tough nut to crack, and still isn&rsquo;t as streamlined as I&rsquo;d like it.</p>

<p>Perhaps the most important thing to remember is when you have a <em>minimum</em>, it&rsquo;s time to consider adding to that. Bugs need to be fixed. Interfaces may need to be refactored. The biggest issue with Zartbonk right now is that editing is pretty painful, especially if you want to edit more than a couple of clips. It&rsquo;ll probably take a couple of weeks to get something better in, but that&rsquo;s what I&rsquo;m working on now.</p>

<p>I could have delayed even longer on shipping and fixed editing first, but that runs the risk of finding something else that needs to be fixed, which could threaten the entire project.</p>

<p>I&rsquo;m happy with how I launched 1.0<sup>2</sup>. It wasn&rsquo;t perfect, but I think I was able to strike a decent balance between features and viability.</p>

<div class="footnotes">
1. That&#8217;s in Zartbonk PRO. What do you mean you haven&#8217;t upgraded yet?
2. Technically I launched on 1.1, which had some critical bug fixes I didn&#8217;t see until after 1.0 launched.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Made an App!]]></title>
    <link href="http://swilliams.github.io/words/2013/12/16/i-made-an-app/"/>
    <updated>2013-12-16T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/12/16/i-made-an-app</id>
    <content type="html"><![CDATA[<div>
<div><div><div><div>
<p>One of my goals for this year was to create and release an iOS app. I&#8217;m cutting it close, but I think it&#8217;s finally good enough to actually tell people about it.</p>

<p>I was interested in the idea of making a soundboard for the iPad. A soundboard is something that has lots of sound effects that you can find and play quickly. Radio shows and podcasts use them, especially the &#8220;morning zoo&#8221; ones, and now you can run your own.</p>

<p>It&#8217;s called <a href="http://zartbonk.com">Zartbonk</a>, and <a href="https://itunes.apple.com/us/app/zartbonk/id727445952?ls=1&amp;mt=8">I hope you like it</a>. </p>

<p>In order to remove as much friction as possible from getting it into your hands, I&#8217;m going with a &#8220;freemium&#8221; model. The app is <strong>absolutely free</strong>, but has some limitations. You can unlock everything with a single in-app-purchase.</p>

<p>Out of the box it comes with a couple dozen sound effects, including my favorite, the timeless <a href="http://www.youtube.com/watch?v=cdbYsoEasio">Wilhelm Scream</a>, but you can add your own too. You can add sounds from <a href="https://db.tt/7Rr3UKJ">Dropbox</a>, the built-in microphone, or search from thousands of sounds in <a href="http://freesound.org/">freesound&#8217;s library</a>.</p>

<p>I learned <strong>TONS</strong> of things in the process of making this, and I&#8217;ll certainly blog more about my journey from there to here.</p>

<p>I want to hear back from you to. <a href="http://zartbonk.com/contact">Feel free to reach out and contact me if you run into any problems or have questionsp</a>.</p>
</div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<a href="https://itunes.apple.com/us/app/zartbonk/id727445952?ls=1&amp;mt=8" target="_blank">
			
				<div>
					<img alt="appstore.png" src="http://swilliams.github.io/images/assets/appstore.png">
</div>
			
				</a>
			

			

		</div>
	
	</div>
</div></div></div></div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Feliz Navidad Ever]]></title>
    <link href="http://swilliams.github.io/words/2013/12/16/best-feliz-navidad-ever/"/>
    <updated>2013-12-16T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/12/16/best-feliz-navidad-ever</id>
    <content type="html"><![CDATA[<div>
<div><div><div><div>
<p><a href="http://en.wikipedia.org/wiki/Feliz_Navidad_(song)">Feliz Navidad</a> is a terrible song, and you should play it whenever possible to harass your friends into submission.</p>

<p>One of my favorite podcasts, <a href="http://5by5.tv/incomparable">The Incomparable</a>, opened <a href="http://5by5.tv/incomparable/173">episode 173</a> with this masterpiece. When I heard it, I knew it would be even better as a ringtone, so here we are.</p>

<p>Listen to it here, or download it <a href="https://dl.dropboxusercontent.com/u/392461/best-feliz-navidad.m4r">directly as a ringtone</a>.</p>
</div></div></div></div>
<div><div></div></div>
<div><div><div><div><div></div></div></div></div></div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A New Appreciation for the Climactic Duel in The Empire Strikes Back]]></title>
    <link href="http://swilliams.github.io/words/2013/12/15/a-new-appreciation-for-the-climactic-duel-in-the-empire-strikes-back/"/>
    <updated>2013-12-15T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/12/15/a-new-appreciation-for-the-climactic-duel-in-the-empire-strikes-back</id>
    <content type="html"><![CDATA[<div>
<div><div><div><div>
<p>I recently watched the original Star Wars trilogy<sup>1</sup> with my 5 year old. She&#8217;s really enjoyed it and caught the bug. I&#8217;ve watched those movies probably 50 times each, but it was a new experience to watch it with my daughter. One of the things that I enjoyed in particular was the level of detail in Empire during Luke&#8217;s duel with Darth Vader.</p>

<p>The lighting and framing sets the mood appropriately. This is the darkest movie, and not very many good things happen to our heroes. Vader&#8217;s purpose here is twofold, first to capture Luke and take him to the Emperor, but also to see how strong he was. </p>
</div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt="vlcsnap-2013-12-12-22h34m32s42.png" src="http://swilliams.github.io/images/assets/vlcsnap-2013-12-12-22h34m32s42.png">
</div>
			

			

		</div>
	
	</div>
</div></div></div></div>
<div><div><div><div>
<p>What I didn&#8217;t quite notice before is that he starts the duel *one-handed*. In Episode IV he used a standard two hand grip, but here with the kid fresh out of Yoda-school he felt confident enough to just use the one. It worked pretty well for him and he disarmed Luke in short order. </p>
<p>Luke eventually manages to surprise Vader and knock him off a ledge, leading to the second encounter.</p>
</div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt="vlcsnap-2013-12-12-22h37m28s234.png" src="http://swilliams.github.io/images/assets/vlcsnap-2013-12-12-22h37m28s234.png">
</div>
			

			

		</div>
	
	</div>
</div></div></div></div>
<div><div><div><div><p>I love the camera angle here. Vader looms hugely in the foreground and slowly approaches Luke. </p></div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt="vlcsnap-2013-12-12-22h37m56s22.png" src="http://swilliams.github.io/images/assets/vlcsnap-2013-12-12-22h37m56s22.png">
</div>
			

			

		</div>
	
	</div>
</div></div></div></div>
<div><div><div><div>
<p>He very noticeably switches to a two-handed grip and proceeds to again show Luke exactly who is in control. At this point Luke realizes just how out-classed he is by swinging blindly around and by only luck survives and escapes.</p>

<p>For some reason, Luke decides to be stupid and looks for Vader again.</p>
</div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt="vlcsnap-2013-12-12-22h39m40s54.png" src="http://swilliams.github.io/images/assets/vlcsnap-2013-12-12-22h39m40s54.png">
</div>
			

			

		</div>
	
	</div>
</div></div></div></div>
<div><div><div><div><p>At this point, Vader is through messing around. He attacks viciously over and over<sup>2</sup>. Again, I <em>love</em> the camera work here. It&#8217;s a little bit lower to make Vader seem even bigger than he normally is. At this point you can understand how it was this guy that killed off most of the Jedi.</p></div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt="vlcsnap-2013-12-12-22h39m59s235.png" src="http://swilliams.github.io/images/assets/vlcsnap-2013-12-12-22h39m59s235.png">
</div>
			

			

		</div>
	
	</div>
</div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt="vlcsnap-2013-12-12-22h40m48s219.png" src="http://swilliams.github.io/images/assets/vlcsnap-2013-12-12-22h40m48s219.png">
</div>
			

			

		</div>
	
	</div>
</div></div></div></div>
<div><div><div><div>
<p>Yikes.</p>

<p>Luke doesn&#8217;t stand a chance. He&#8217;s knocked down again, showing possibly my favorite part of this scene. Mark Hammill wasn&#8217;t ever in danger of winning any Academy Awards, but the he nails the fear here.</p>
</div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt="vlcsnap-2013-12-12-22h41m18s7.png" src="http://swilliams.github.io/images/assets/vlcsnap-2013-12-12-22h41m18s7.png">
</div>
			

			

		</div>
	
	</div>
</div></div></div></div>
<div><div><div><div><p>Luke somehow manages to get back up and resume the fight, even scoring a graze on Vader&#8217;s shoulder. Vader&#8217;s had enough and with a couple quick motions cuts off Luke&#8217;s hand and proceeds to the classic &#8220;I am your father&#8221; scene. Once again the camera work is great: it&#8217;s from Luke&#8217;s point of view staring up to a triumphant Vader.</p></div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt="vlcsnap-2013-12-12-22h41m41s244.png" src="http://swilliams.github.io/images/assets/vlcsnap-2013-12-12-22h41m41s244.png">
</div>
			

			

		</div>
	
	</div>
</div></div></div></div>
<div><div><div><div>
<p>Compare his costume to Luke&#8217;s, which is now tattered. The scene ends shortly thereafter with Luke escaping.</p>

<p>My daughter is a bit talkative and will generally ask the types of questions a five year will ask during a movie. &#8220;Where is Princess Leia?&#8221; (just outside the frame, don&#8217;t worry about it) &#8220;Why are they doing that?&#8221; (a good movie will show you why, keep watching) &#8220;What&#8217;s his name again?&#8221; (Lando). But during the last bit of the fight and the reveal she just sat there and stared enrapt at the television.</p>

<p>That&#8217;s quality film-making.</p>

<hr class="footnotes">
<p><small>
1. I managed to get <a href="http://www.amazon.com/gp/product/B001EN71DG/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B001EN71DG&amp;linkCode=as2&amp;tag=thepetzoo-20">The Theatrical Edition on DVD</a> when it was on sale at normal prices. And also the <a href="http://originaltrilogy.com/forum/topic.cfm/Harmys-STAR-WARS-Despecialized-Edition-HD-V25-MKV-IS-OUT-NOW/topic/12713/">&#8220;despecialized&#8221; version in HD too</a>, so no painfully obvious CG dinosaurs in the background for us.
</small></p>

<p><small>
2. One of the things I liked about the end of Return of the Jedi (even though it is not nearly as good) is that the fighting style was reversed when Luke nearly kills Vader. He jumps out of the shadows and overpowers his opponent with brute force quickly and decisviely before dismembering him. The camera even follows suit with Luke ultimately standing over his fallen foe. This was much more subtle and well-executed than the ham-fisted &#8220;rhyming&#8221; that the prequels did.</small></p>
</div></div></div></div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lack of Commercials]]></title>
    <link href="http://swilliams.github.io/words/2013/12/14/lack-of-commercials/"/>
    <updated>2013-12-14T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/12/14/lack-of-commercials</id>
    <content type="html"><![CDATA[<div><div><div><div><div>
<p><a href="http://swilliams.github.io/words/i-think-the-cable-companies-are-screwed">We cut our cable a couple of years ago</a> and have been using Netflix/Hulu/iTunes as our primary source of television ever since. Our oldest daughter was just 3 at the time, so she has almost no knowledge of commercials. A good bi-product of that is her opinions haven&#8217;t been swayed toy and fast food advertisers. I don&#8217;t think she even knows what a Happy Meal is.</p>

<p>An unintended side effect is that she doesn&#8217;t know how excited she should have been when my wife surprised her with an outing to go see <a href="http://www.imdb.com/title/tt2294629/?ref_=nv_sr_1">Frozen</a> this morning. “What&#8217;s that?” she asked, disinterested. Fortunately, once she was told there was a princess in it she was much more excited<sup>1</sup>. </p>

<p>I suspect this will change as she makes her way through grade school and her friends start talking about toys and things like that, but for now it&#8217;s nice.</p>

<p><small>1. There <em>is</em> a princess in it, right?</small></p>
</div></div></div></div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Thinking You're a Special Unicorn]]></title>
    <link href="http://swilliams.github.io/words/2013/12/09/stop-thinking-youre-a-special-unicorn/"/>
    <updated>2013-12-09T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/12/09/stop-thinking-youre-a-special-unicorn</id>
    <content type="html"><![CDATA[<div>
<div><div></div></div>
<div>
<div><div><div>
<p><a href="http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer">This image</a> has been circling the Internet recently. It demonstrates the peril of interrupting a programmer deep in thought: they lose their focus and can&#8217;t immediately jump back to where it was.</p>

<p>While this is definitely true, it is also true for every single other job that requires critical thought or analysis. Which is just about anything more complex than <a href="http://www.youtube.com/watch?v=8i5OrcxwFUA">ditch digging</a>.</p>

<p>I believe that one of the roots of the evils<sup>1</sup> in software development right now stems from pride. The notion that you&#8217;re inherently better just because you can string together a couple of while loops and use the Terminal is ridiculous.</p>

<p><small>1. Sexism, elitism, and general douche-baginess.</small></p>
</div></div></div>
<div><div><div>
	<div>
	
		<div>
			
				<a href="http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer" target="_blank">
			
				<div>
					<img alt="PtMx9GJ.png" src="http://swilliams.github.io/images/assets/PtMx9GJ.png">
</div>
			
				</a>
			

			

		</div>
	
	</div>
</div></div></div>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Frustrations of the Journeyman]]></title>
    <link href="http://swilliams.github.io/words/2013/12/02/the-frustrations-of-the-journeyman/"/>
    <updated>2013-12-02T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/12/02/the-frustrations-of-the-journeyman</id>
    <content type="html"><![CDATA[<div>
<div>
<div><div><div><p>I was a .NET programmer from almost the beginning. I did a lot of work in 1.0 and 1.1, and was excited when things like <a href="http://msdn.microsoft.com/en-us/library/ms172192.aspx">generics</a> and <a href="http://msdn.microsoft.com/en-us/library/vstudio/0yw3tz5k.aspx">anonymous methods</a> showed up in 2.0, and <a href="http://en.wikipedia.org/wiki/Language_Integrated_Query">LINQ</a><sup>1</sup> rocked my world (and still does) in 3.5, and more syntactic good stuff in 4. But I often wondered what it would be like for someone new to .NET in 2013. It was easy to learn the new stuff as it came out; it always built on existing technologies and smoothed rough edges. But to jump in without having several years of background? What would that be like?</p></div></div></div>
<div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt='"Leaving a Trail" by "las - initially" on flickr.' src="http://swilliams.github.io/images/assets/4263948022_2fdefd3f93.jpg">
</div>
			

			
			<div>
				<div><p>&#8220;Leaving a Trail&#8221; by <a target="_blank" href="http://www.flickr.com/photos/21561428@N03/4263948022/in/photolist-7uMRcd-b6p4Qr-b6p5oe-cnzrTo-948QCJ-dEXL2r-dEXLbF-c6yHFb-c6yHDY-c6yHCj-aSVejM-7YbeAL-aSVeuX-92Yzn4-bpYmH4-d4mkNQ-d4mkmb-ciQ4ZU-8qhCdU-adYqHx-8pSFUK-8DtDWD-dFQwJi-dv2x8q-aBf2MM-8DtDwa-7PPzpG-82Qzh9-hWMGHe-dFApof-88CUdB-99drcu-cHZFtW-cHZKDL-9DUicT-cHZGUj-aDU9T5-dLYbaP-eaVSMJ-edert3-ed8KLv-edeqP9-ed8KHD-eaVTHy-ed8KGe-eaVTiS-eaVTRy-ederxh-edeqHS-eaQgXc-edeqUb">&#8220;las - initially&#8221; on flickr</a>.</p></div>
			</div>
			

		</div>
	
	</div>
</div></div></div>
</div>
<div><div><div><div>
<p>Well, now I know. I had grown kind of tired of .NET after doing it for ten years and needed a change. I decided to make the leap over the summer and focused on <a href="http://rubyonrails.org/">Rails</a> and iOS.</p>

<p>The most frustrating part of this changeup has been finding work that I want to do. I tried a bit of a moonshot and <a href="http://swilliams.github.io/words/2013/5/14/fear-of-falling-fear-of-failing-fear-of-rejection">tried to land a job at Github</a>. I did get an interview and it went pretty well, but they decided to go with someone with more experience in Rails. I don&#8217;t blame them for that, they probably got dozens (or more) applications from people who had been working with it for years and could hit the ground running. Still was a bit of a bummer though.</p>

<p>The good news is that I&#8217;m having an easier time sliding back into Rails. Web development is mostly the same if you&#8217;re using curly braces or not. I had done a big project in it a few years ago and all of the paying work I&#8217;ve had since the leap has been with Rails. I&#8217;ve learned how to <a href="https://github.com/swilliams/how-to-ride-a-dragon">write a DSL</a> and shipped some <a href="http://rubygems.org/">gems</a> and other nice things for my clients.</p>

<p>iOS is a tougher racket. It&#8217;s has been around for about 5 years, but the underpinnings of it date waaaay back to <a href="http://en.wikipedia.org/wiki/NeXT">NeXT</a> in the 80s. Needless to say there have been quite a few updates to it over the years. Sometimes it feels like drinking from the firehouse to pick things up in it.</p>

<p>The worst part is that I know I&#8217;m missing stuff. When I was developing <a href="http://zartbonk.com">Zartbonk</a>, one of the earlier iterations wasn&#8217;t working quickly enough to smoothly scroll across the screen. I happened to come across <a href="http://www.objc.io/issue-3/moving-pixels-onto-the-screen.html#opaque_vs_transparent">this section</a> in an <a href="http://www.objc.io/">obc.io</a> article and realized I wasn&#8217;t setting the <code>opaque</code> property correctly on most of the views in the app. 5 minutes and a few checkboxes later I had a 10% boost in frame rate. It makes me wonder what other low hanging fruit are out there that I&#8217;ve missed.</p>

<p>That feeling can be demoralizing, but fortunately I know that coding is an iterative process, and there is measurable improvement in my iOS code just over a few months. I just wish I could download the whole Cocoa Touch library to my brain Matrix style.</p>
</div></div></div></div>
<div><div><div><div><div><div><div><div>
<img src="http://i1.ytimg.com/vi/6AOpomu9V6Q/hqdefault.jpg"><div></div>
<div></div>
</div></div></div></div></div></div></div></div>
<div><div><div><div>
<p>Since that won&#8217;t work, I&#8217;ll just keep trucking. My first iOS app is pretty much done (with a few more fixes and features to add). I have a good idea for my second. As the reps increase, so will the quality, and so will the work.</p>

<ol>
<li>Seriously guys, LINQ is one of the best language features I&#8217;ve seen, ever.</li>
</ol>
</div></div></div></div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Bluetooth Keyboard Events With Modifier Keys in iOS 7]]></title>
    <link href="http://swilliams.github.io/words/2013/09/19/handling-keyboard-events-with-modifier-keys-in-ios-7/"/>
    <updated>2013-09-19T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/09/19/handling-keyboard-events-with-modifier-keys-in-ios-7</id>
    <content type="html"><![CDATA[<p>Before iOS 7, if you had a Bluetooth keyboard attached to your iPad, you could only access modifier keys (Command, Control, etc) through <a href="http://stackoverflow.com/questions/14791056/ios-how-to-detect-the-escape-control-keys-on-a-hardware-bluetooth-keyboard">private APIs</a>. You could sneak it in through <a href="http://stackoverflow.com/a/14940898/736">selector trickery</a> and allegedly Apple would turn a blind eye. Fortunately with iOS 7, there&rsquo;s now a public API to do this.</p>

<p>First, let&rsquo;s talk a bit about the <a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html">Responder Chain</a>. This is how events are managed in iOS. Most of the <code>UIKit</code> classes you use inherit from <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIResponder_Class/Reference/Reference.html#//apple_ref/occ/cl/UIResponder"><code>UIResponder</code></a> which means that you&rsquo;ll have access to the appropriate methods. This means that you can set the scope for your keyboard shortcuts at any level in the app. I wanted to use have them registered for the entire app, so I subclassed <a href="https://developer.apple.com/library/ios/DOCUMENTATION/UIKit/Reference/UIApplication_Class/Reference/Reference.html"><code>UIApplication</code></a>, though you could use a similar approach in a view or the view controller too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// STWApplication.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">STWApplication</span> : <span class="nc">UIApplication</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">_commands</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// STWApplication.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">STWApplication</span>
</span><span class='line'><span class="c1">// more coming soon</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we&rsquo;re subclassing <code>UIApplication</code>, edit <code>main.m</code> to tell it that we&rsquo;re doing so in <code>UIApplicationMain</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">appName</span> <span class="o">=</span> <span class="s">@&quot;STWApplication&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">appName</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">STWAppDelegate</span> <span class="n">class</span><span class="p">]));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, now let&rsquo;s tell the app what key combinations are valid. iOS 7 adds a <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIResponder_Class/Reference/Reference.html#//apple_ref/occ/instp/UIResponder/keyCommands"><code>keyCommands</code></a> property to UIResponder. All we need to do is override that and returning an array of <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKeyCommand_class/Reference/Reference.html#//apple_ref/occ/cl/UIKeyCommand"><code>UIKeyCommands</code></a>. Since we&rsquo;re using a <code>UIApplication</code> subclass, add this in there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">keyCommands</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_commands</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIKeyCommand</span> <span class="o">*</span><span class="n">commandF</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIKeyCommand</span> <span class="nl">keyCommandWithInput:</span><span class="s">@&quot;f&quot;</span>
</span><span class='line'>                   <span class="nl">modifierFlags:</span><span class="n">UIKeyModifierCommand</span>
</span><span class='line'>                          <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleShortcut:</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">_commands</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithArray:</span><span class="err">@</span><span class="p">[</span><span class="n">commandF</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_commands</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Every time a keyboard event is raised, if it matches <kbd>⌘F</kbd>, the selector <code>handleShortcut</code> will be called on the responder chain. That means you can define that method multiple times and only the most specific will be called. For example, if you defined it in <code>STWApplication</code> and in the View Controller, the <code>STWApplication</code> version will <em>never</em> be called. Speaking of <code>handleShortcut</code>, here it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handleShortcut:</span><span class="p">(</span><span class="n">UIKeyCommand</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyCommand</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;You pressed ⌘F! Good Job!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>UIKeyCommand</code> is pretty neat. The <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIKeyCommand_class/Reference/Reference.html#//apple_ref/doc/c_ref/UIKeyModifierFlags"><code>modifierFlags</code></a> means that the app can watch for Caps Lock, Shift, Control, Alt/Option, Command, and the Number Pad. Additionally, there are some constants that  can be used for special keys like the arrows and Escape. The <a href="">developer forums</a> also had some people getting access to Tab and Return by looking for <code>\t</code> and <code>\r</code>, but I don&rsquo;t know how well those work.</p>

<p>Also, make sure you aren&rsquo;t trying to override system shortcuts. Per the docs: &ldquo;Key commands that map to known system events (such as cut, copy and paste) are automatically routed to the appropriate responder methods.&rdquo; So don&rsquo;t do that.</p>

<p>Now, remember how I said &ldquo;every time a keyboard event is raised&rdquo;? These events will only happen when a text input is the first responder. This means that if you want to have some fancy global shortcuts (say ⌘F to jump to a search box) you&rsquo;ll still need to do a trick with <code>UITextField</code> (or similar). That&rsquo;s a little beyond the scope of this article, but the gist is add a UITextField to a view, hide it, and make sure it stays first responder when appropriate in order to keep firing off those events.</p>

<p>I for one am psyched that this is now available. It&rsquo;s definitely more of a power user feature, but those of us who like to use Bluetooth keyboards with our iPads will derive tremendous benefit from it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on the New iPhone]]></title>
    <link href="http://swilliams.github.io/words/2013/09/11/thoughts-on-the-new-iphone/"/>
    <updated>2013-09-11T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/09/11/thoughts-on-the-new-iphone</id>
    <content type="html"><![CDATA[<div><div><div><div><div><p>Buy it. Or don&#8217;t. I don&#8217;t really care.</p></div></div></div></div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Probably Shouldn't Buy a DSLR]]></title>
    <link href="http://swilliams.github.io/words/2013/09/04/you-probably-shouldnt-buy-a-dslr/"/>
    <updated>2013-09-04T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/09/04/you-probably-shouldnt-buy-a-dslr</id>
    <content type="html"><![CDATA[<div>
<div><div><div><div>
<p>I have three digital <a href="http://en.wikipedia.org/wiki/Single-lens_reflex_camera">SLR</a> cameras<sup>1</sup>, and a bunch of nice lenses to go with them. I&#8217;ve been an <a href="http://swilliamsphoto.com">amateur photographer</a>, and have taken tens of thousands (if not more) photos of weddings, portraits, and landscapes over the years. I love my photography gear, and even though I don&#8217;t use it quite as much as I used to, I&#8217;m not going to be changing it any time soon.</p>

<p>But, with a few exceptions, I don&#8217;t think anyone should buy a DSLR anymore.</p>

<p>DSLRs are big. Like, Orca big. Newer models have gone on been hitting the <a href="http://www.youtube.com/watch?v=zXqOZ1JkFFE">Slim-Fast</a>, but you are never going to be able to fit one in a pocket or purse any time soon. This means you will need a dedicated bag or backpack, which means you won&#8217;t be taking it with you, ever. Part of the reason smartphones have replaced point &amp; shoots is that you always have it with you.</p>

<p>DSLRs are like gym memberships. People pay lots of money for them, use them for about a month, and then never again.</p>

<p>Instead, if you really want to drop several hundred dollars on a camera, get a small <a href="http://en.wikipedia.org/wiki/Mirrorless_interchangeable-lens_camera">mirrorless</a>. They&#8217;re a little bit cheaper, will give you the same quality, and are <strong>much</strong> smaller. If I were starting over today, I&#8217;d get one. <a href="http://zackarias.com/for-photographers/gear-gadgets/fuji-x100s-follow-up-review-life-without-dslrs/">Even some pros are using them for day to day work.</a>.</p>
</div></div></div></div>
<div><div><div><div>
	<div>
	
		<div>
			
				<div>
					<img alt="The Sony NEX-F3" src="http://swilliams.github.io/images/assets/NEXF3KB.png">
</div>
			

			
			<div>
				<div><p>The Sony NEX-F3</p></div>
			</div>
			

		</div>
	
	</div>
</div></div></div></div>
<div><div><div><div>
<p>Here are some models to check out:</p>

<ul>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/B00836H2BI/thepetzoo-20">Sony NEX-F3</a> - <a href="http://thewirecutter.com/reviews/the-sony-nex-f3-is-our-favorite-affordable-mirrorless-camera-so-far/">The Wirecutter likes this one</a>
</li>
<li><a href="http://www.amazon.com/gp/product/B0096WDAIM/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0096WDAIM&amp;linkCode=as2&amp;tag=thepetzoo-20">Olympus E-PM2</a></li>
<li>
<a href="http://www.amazon.com/gp/product/B00DCM0E5Y/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00DCM0E5Y&amp;linkCode=as2&amp;tag=thepetzoo-20">Fujifilm X-M1</a> - A bit pricier</li>
</ul>
<p>All of these are small and light. All of them will take great photos. And, you might actually take it with you.</p>

<h3 id="exceptions">Exceptions</h3>

<p>Here are the two people who should probably stick with DSLRs: the Student and the Professional. </p>

<p>By Student I mean someone who wants to <em>learn</em> photography. Someone who wants to know what f-stops are, how they interact with shutter speeds and ISO. If you just want to take pictures of your kids or pets, then go with one of the mirror-less ones.</p>

<p>And, by Professional, I mean someone who wants to make money with their camera. For a bunch of reasons not worth getting into, an SLR is probably the right choice for them. Professional doesn&#8217;t have to be full-time either (I&#8217;m certainly not).</p>

<p><small>
Footnotes:</small></p>

<ol>
<li>All Nikon: a D50 (my first), a D200 (my backup), and a D300 (the moneymaker).
</li>
</ol>
</div></div></div></div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[50 Years]]></title>
    <link href="http://swilliams.github.io/words/2013/08/28/50-years/"/>
    <updated>2013-08-28T00:00:00-07:00</updated>
    <id>http://swilliams.github.io/words/2013/08/28/50-years</id>
    <content type="html"><![CDATA[<div>
<div><div><div><div><p>50 Years ago this happened.</p></div></div></div></div>
<div><div><div><div><div><div><div><div>
<img src="http://i1.ytimg.com/vi/smEqnnklfYs/hqdefault.jpg"><div></div>
<div></div>
</div></div></div></div></div></div></div></div>
<div><div><div><div><p>Non-violence is one of the things I admire the most about Martin Luther King, Jr. It&#8217;s crazy when you think about it. It goes against human nature. The first thing that pops into my mind when I am wronged is vengeance or &#8220;getting back&#8221;. Now, imagine having hundreds of years of oppression against you and people who look like you. I&#8217;d be seething with anger. And yet, here&#8217;s this man saying &#8220;Let us not seek to satisfy our thirst for freedom by drinking from the cup of bitterness and hatred.&#8221; Just amazing.</p></div></div></div></div>
</div>]]></content>
  </entry>
  
</feed>
