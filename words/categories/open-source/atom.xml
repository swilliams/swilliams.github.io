<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open-source | Scott Williams]]></title>
  <link href="http://blog.swilliams.me/words/categories/open-source/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2018-11-30T10:39:51-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Gliphy]]></title>
    <link href="http://blog.swilliams.me/words/2016/05/15/introducing-gliphy/"/>
    <updated>2016-05-15T13:47:59-07:00</updated>
    <id>http://blog.swilliams.me/words/2016/05/15/introducing-gliphy</id>
    <content type="html"><![CDATA[<p>I&rsquo;m very happy to introduce a new open source library that I&rsquo;ve been building. It&rsquo;s called <a href="https://github.com/tallwave/gliphy">Gliphy</a> and it makes implementing <a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html#//apple_ref/doc/uid/TP40009542-CH4-SW65">Dynamic Type</a> on iOS with Swift a breeze.</p>

<p>Accessibility is one of those things that everyone knows they should be better at implementing, but falls to the wayside when deadlines are looming. I liked the idea of supporting Dynamic Type in the apps I write, but it was kind of a slog to implement it. There are two main ways to do it right out of the gate with what is built in to iOS, code and Interface Builder.</p>

<p>Let&rsquo;s go with code first. The easiest way to get the preferred font for a given text style.</p>

<p><code>swift
titleLabel.font = UIFont.preferredFontForTextStyle(UIFontTextStyleHeadline)
</code>
iOS will set whatever the &ldquo;Headline&rdquo; style is to your <code>titleLabel</code>&rsquo;s font. If a user changes their default font size in Settings, it&rsquo;ll scale with that.</p>

<p>Interface Builder makes it fairly simple too:</p>

<p><figure></p>

<pre><code>&lt;img alt="Interface Builder" src="https://raw.githubusercontent.com/Tallwave/Gliphy/gh-pages/images/ib.png"&gt;
&lt;figcaption&gt;Choose a style from the font menu in Interface Builder&lt;/figcaption&gt;
</code></pre>

<p></figure></p>

<p>But there&rsquo;s a catch. If a user launches your app, then changes the font size, your app won&rsquo;t display any new changes until it has quit and is relaunched. You can watch for the <code>UIContentSizeCategoryDidChangeNotification</code> notification though and then re-render your text based views then<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. So, regardless of your choice you&rsquo;ll have to code out <em>a lot</em> of labels, buttons, and text fields. In a normal app, that&rsquo;s hundreds of lines of boring code.</p>

<p>The other big downside is that you&rsquo;re limited to the system font. So, San Francisco on iOS 9 and Helvetica Neue on older versions. I like those fonts just fine, but sometimes you need to switch it up.</p>

<h2>BNRDynamicTextManager</h2>

<p>I first came across <a href="https://www.bignerdranch.com/">Big Nerd Ranch&rsquo;s</a> <a href="https://github.com/bignerdranch/BNRDynamicTypeManager">BNRDynamicTextManager</a> library and found it to be pretty useful. You still have to wire up each field (or use subclasses), and you&rsquo;re still stuck with the system font, but it handled all the notification watching for you. Here&rsquo;s a sample:</p>

<p>```objc
[[BNRDynamicTypeManager sharedInstance] watchLabel:label</p>

<pre><code>                                     textStyle:UIFontTextStyleBody];
</code></pre>

<p>```</p>

<p>The library was lightweight and easy to understand<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, which got me thinking.</p>

<h2>Gliphy</h2>

<p>I decided to port BNRDynamicTextManager to Swift and see if I could add some functionality to it. Porting it wasn&rsquo;t a big deal, although I made a couple of changes to better match Swift&rsquo;s idioms. I then added a couple of nice features on top.</p>

<p><strong>Big Feature 1 — Custom Fonts</strong><br />
Watcher methods can take the name of a custom font:</p>

<p>```swift
DynamicTypeManager.sharedInstance.watchLabel(titleLabel,</p>

<pre><code>                                         textStyle: UIFontTextStyleTitle1,
                                         fontName: "MarkerFelt-Thin")
</code></pre>

<p><code>``
This will apply the font size of the "Headline" style to your label, but keep the glorious MarkerFelt font. If the</code>fontName` is not associated with an installed font, it will fall back to the system font.</p>

<p><strong>Big Feature 2 — Custom Styles</strong><br />
iOS 7 brought us six text styles, and iOS 9 brought four more<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. They cover a decent range of use cases, but sometimes you still want your own. You can do that with the <code>DynamicFontRegistry</code> class:</p>

<p>```swift
// This could be in AppDelegate, some custom Theme class, or wherever
DynamicFontRegistry.registry.addTextStyle(&ldquo;UIFontTextStyleReallyReallyBigTitle&rdquo;,</p>

<pre><code>                                      scaledFrom: UIFontTextStyleHeadline,
                                      byFactor: 4)
</code></pre>

<p>```
In order to keep with the feel of how Dynamic Type works, you pick a style to serve as a base reference for the new one and then scale it from there. That way you don&rsquo;t hardcode a point size. You can then watch it the same way you would before:</p>

<p>```swift
DynamicTypeManager.sharedInstance.watchLabel(titleLabel,</p>

<pre><code>                                         textStyle: "UIFontTextStyleReallyReallyBigTitle"", 
                                         fontName: "MarkerFelt-Thin")
</code></pre>

<p>```</p>

<p><strong>Big Feature 3 — Global Styles</strong><br />
I liked how it was working now, but it was still a long process to cover all the text based views that could be in an app. I wanted a solution that would make it super easy to handle the 90% scenario. Enter the <code>StyleWatcher</code> and <code>StyleConfig</code> constructs. The <code>StyleWatcher</code> will recursively examine each subview in a parent view and watch them with the <code>DynamicTypeManager</code> if they have a text style associated with them. That way you can set up the text-styles solely UI within Interface Builder and remove an entire swath of code. Additionally, you can set a global style that the watcher will use to find your custom font (or style).</p>

<p><code>swift
// AppDelegate
// Setting up the global styles
StyleWatcher.defaultConfig.label[UIFontTextStyleTitle1] = "MarkerFelt-Thin"
StyleWatcher.defaultConfig.label[UIFontTextStyleTitle1] = "MarkerFelt-Thin"
StyleWatcher.defaultConfig.textField[UIFontTextStyleBody] = "Avenir-Light"
</code>
Once that has been set up, tell the watcher to watch a view:</p>

<p>```swift
// In some View Controller
let watcher = StyleWatcher()</p>

<p>override func viewDidLoad() {</p>

<pre><code>super.viewDidLoad()
watcher.watchViews(inView: view)
</code></pre>

<p>}
```
And the magic will happen.</p>

<p>You can customize that process too. The <code>watchViews</code> method can take its own <code>StyleConfig</code> as well, allowing you to define multiple different styles and applying them where necessary.</p>

<p>I&rsquo;m pretty happy with the way Gliphy turned out. The <a href="https://github.com/tallwave/gliphy">code</a> is pretty straightforward too; no mind bending swiftisms required. There are some downsides though. Attributed strings aren&rsquo;t handled at all, and due to their nature, they probably will never be. Gliphy only watches four kinds of views: labels, buttons, textfields, and textviews, (plus their subclasses) and is a little difficult to extend beyond that.</p>

<p>All said though, it should make supporting Dynamic Type something more than an afterthought in your apps.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>There is a bug in the iOS simulator and Xcode 7.3. You can change the font size, but the notification will not fire. It still works on a device though.</p>
</li>
<li class="footnote" id="fn:2">
  <p>I raise my glass to <a href="https://github.com/jgallagher">jgallagher</a> for that.</p>
</li>
<li class="footnote" id="fn:3">
  <p>Here they are:
  <ul>
    <li>UIFontTextStyleHeadline</li>
    <li>UIFontTextStyleSubheadline</li>
    <li>UIFontTextStyleBody</li>
    <li>UIFontTextStyleFootnote</li>
    <li>UIFontTextStyleCaption1</li>
    <li>UIFontTextStyleCaption2</li>
    <li>UIFontTextStyleTitle1</li>
    <li>UIFontTextStyleTitle2</li>
    <li>UIFontTextStyleTitle3</li>
    <li>UIFontTextStyleCallout</li>        
  </ul>
  </p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
</feed>
