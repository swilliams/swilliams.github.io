<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ember, | Scott Williams]]></title>
  <link href="http://blog.swilliams.me/words/categories/ember/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2018-11-02T10:41:45-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google OAuth, Ember, Hapi]]></title>
    <link href="http://blog.swilliams.me/words/2016/09/07/google-oauth-ember-hapi/"/>
    <updated>2016-09-07T08:10:50-07:00</updated>
    <id>http://blog.swilliams.me/words/2016/09/07/google-oauth-ember-hapi</id>
    <content type="html"><![CDATA[<p>OAuth is, to borrow a phrase, a bag of hurt. Not just any bag, but the kind that is thrown over your head right before you&rsquo;re thrown into a van and driven down to Tijuana and ransomed for $50,000. I don&rsquo;t like OAuth.</p>

<p>Sometimes, though you need to use it. I&rsquo;m working on an internal tool at <a href="http://tallwave.com">work</a> and want to make sure that only co-workers can use it. I could do the username/password thing, but the world has enough of those. We use Google docs for the office, so everyone has a Google account that could, theoretically, be used to sign in. Thus, OAuth.</p>

<p>The tool itself is a web app that uses <a href="http://emberjs.com/">Ember</a> on the front-end and <a href="http://hapijs.com/">Hapi</a> and <a href="https://www.mongodb.com/">MongoDB</a> as the API and database. It&rsquo;s my first time using Hapi, and I like it quite a bit, seems like a really good tool for API building.</p>

<p>Since this is a completely separate client and server, it adds a bit of a wrinkle to the OAuth dance. There are plenty of &ldquo;Sign in with X&rdquo; libraries out there, but they mostly seem to be written with the intent that the user will only be interacting with that service. In other words, if I was building a Google Docs client app, my life would be easier, but no, I am only authenticating a user&rsquo;s account and then treating that as the key to my own system&hellip; which makes it more manual. It also doesn&rsquo;t help that Google&rsquo;s OAuth documentation is lousy. There are many different ways to authenticate, and <a href="https://github.com/google/google-auth-library-nodejs">multiple</a> <a href="https://github.com/google/google-api-nodejs-client">libraries</a> to support the different ways, and they&rsquo;ve changed over time, so searching for help is difficult.</p>

<p>Here&rsquo;s how it&rsquo;s supposed to work:</p>

<ol>
<li>The client (Ember) &ldquo;signs in with Google&rdquo;. If this is successful it receives an <code>authorizationCode</code>. This code by itself is useless, it just means the user signed in ok.</li>
<li>The server (Hapi) needs to validate this code and turn it into an <code>accessToken</code>.</li>
<li>If <em>that</em> is successful, we can query the Google API (from the server still) for the account information, verify that they are from Tallwave, and then send credentials back down to the client.</li>
<li>The client receives the credentials, stores them locally, and includes them for subsequent API requests.</li>
</ol>


<p>Errors need to be handled at all the steps along the way too.</p>

<p><strong>Step 1 — Client Side</strong></p>

<p><a href="https://github.com/Vestorly/torii">Torii</a> is a pretty good (though a wee bit out of date) library for Ember that handles a good amount of the Google sign in process. Follow its installation instructions and setup the configuration and the proper adapter. Here&rsquo;s my <code>environment.js</code> entry:</p>

<p>```javascript
/<em> The following properties are in ENV </em>/
torii: {
  sessionServiceName: &lsquo;session&rsquo;,
  providers: {</p>

<pre><code>'google-oauth2': {
  redirectUri: signinURL,
  apiKey: googleOAuthAPIKey,
  scope: 'profile email'
}
</code></pre>

<p>  }
}
```</p>

<p>The <a href="https://developers.google.com/+/web/api/rest/oauth#authorization-scopes"><code>scope</code></a> property is important. That allows you to query for the user&rsquo;s account later on. The only other point with Torii worth mentioning is how I sent the authorization code to my API. The <code>open</code> method on the <code>torii-adapters/application.js</code> is called after Google auth finishes, and that is where you create the &ldquo;session&rdquo; for authentication.</p>

<p>By default Ember uses the JSON API for the API layer, and I tend to go with the flow. But in this case, since we&rsquo;re sending a single value to the server and will throw it away immediately after&hellip; Setting up a model seems overkill for that. We can drop down to regular old jQuery for this.</p>

<p>```javascript
// This is in torii-adapters/application.js
open(authentication) {
  return new Ember.RSVP.Promise((resolve, reject) => {</p>

<pre><code>Ember.$.ajax({
  method: 'POST',
  data: { authorizationCode: authentication.authorizationCode },
  url: '', // this is the authentication URL in your API
  success: Ember.run.bind(null, resolve), // forward success/error to the Promise
  error: Ember.run.bind(null, reject)
});
</code></pre>

<p>  }).then((account) => {</p>

<pre><code>this.get('sessionStore').save(account);
return { currentUser: account };
</code></pre>

<p>  });
}
```
Worth pointing out is that we are expecting our API to return some JSON that will be:</p>

<ol>
<li>Stored locally (<code>sessionStore</code> is a <a href="https://guides.emberjs.com/v2.7.0/applications/services/">service</a>, which we&rsquo;ll define later), and will be retrieved later.</li>
<li>Returning the <code>currentUser</code> object will merge it into the underlying session, so that it can be retrieved in routes, components, templates etc. This isn&rsquo;t permanent storage though, if the user refreshes the page, it&rsquo;ll be gone, hence <code>sessionStore</code>.</li>
</ol>


<p><strong>Step 2 — On the Server</strong></p>

<p>This is where the fun begins. If you&rsquo;re playing at home, I used Node 5 and Hapi 13.x.x. First, you&rsquo;ll need to get your credentials from the <a href="https://console.developers.google.com">Google Developer Console</a>. I&rsquo;m not going to walk through those steps, but you&rsquo;ll need an OAuth client ID for a Web Application. Specifically, you&rsquo;ll need the client id, client secret, and redirect URL (yes, even though you won&rsquo;t be redirecting to anything at this point).</p>

<p>Then, install the <code>googleapis</code> dependency.</p>

<p><code>
npm install googleapis --save
</code>
Now, let&rsquo;s build a service that sends Google an <code>authorizationCode</code> and gets an accessToken back. You&rsquo;ll call this service from your route handler.</p>

<p>```javascript</p>

<p>const Google = require(&lsquo;googleapis&rsquo;);
const OAuth2 = Google.auth.OAuth2;
const profile = Google.oauth2(&lsquo;v2&rsquo;);</p>

<p>// pull these from an ENV variable or something else
const oauthClient = new OAuth2(CLIENT_ID, CLIENT_SECRET, REDIRECT_URL);
// Omitting the REDIRECT_URL will throw an error</p>

<p>module.exports = {
  // callback is a function whose signature is (error, tokens)
  getTokens(authorizationCode, callback) {</p>

<pre><code>oauthClient.getToken(authorizationCode, (err, tokens) =&gt; {
  if (err) { // the authorization code was bad
    callback(err);
    return;
  }
  // At this point, we have an access token.
  oauthClient.credentials = tokens;

  // Each Google API method takes a params object, 
  // which is where you provide your auth credentials
  const params = {
    auth: oauthClient
  };

  // Retrieve the user's account
  profile.userinfo.v2.me.get(params, (err, response) =&gt; {
    if (err) {
      callback(err);
      return;
    }
    // The response object contains all of the account info

    // This is where you validate if the user is allowed or not.

    // If the user is valid, create a new session for them and save it.
    // It's up to you where you want to save this session. Could be 
    // a redis cache, http session, whatever your needs are.

    // After that, we're going to send our session token and user 
    // account back.


    const sessionJSON = {
      token: someSessionToken,
      account: response
    };
    callback(null, newSession);
  }
});
</code></pre>

<p>  }
};
```</p>

<p>That&rsquo;s kind of a mouthful and could definitely stand a good refactoring, but it goes through the steps needed to get some information from Google. You can see more <a href="http://google.github.io/google-api-nodejs-client/12.4.0/index.html">APIs</a> you can call, but the documentation on a lot of them is rather sparse. For example, adding the <code>oauthClient</code> to <code>params</code> is not apparent, but necessary for each call.</p>

<p>We&rsquo;ve now determined if the user should actually have access to what they just signed in to and sent the response back to the client. That&rsquo;s pretty good! Refresh your beverage, take a deep breath and then let&rsquo;s get handle that response and get our client in order to keep moving.</p>

<p><strong>Step 3 — Back on the Client</strong></p>

<p>You might have noticed again that we did not send the session information back in JSON API format either. This was intentional since we aren&rsquo;t going to be storing this in the standard Ember store, and therefore don&rsquo;t need the additional benefit of using something that standardized. You could if you wanted to, but for this occasion, I did not want to set up a model (or in this case model<em>s</em> to support the nested structure).</p>

<p>Back up in our <code>Ember.RSVP.Promise</code> handler there was this line:</p>

<p><code>javascript
// In torii-adapters/application.js
this.get('sessionStore').save(account);
</code></p>

<p>Once you receive a response, you&rsquo;ll need to store it. You could use Ember Data, but that felt overkill to me; I needed to access the tokens within the response for subsequent API calls, and nothing else. I ended up building an <a href="https://guides.emberjs.com/v2.8.0/applications/services/">Ember service</a> that serialized the content and stored it in <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">localStorage</a>. You can go your own way too.</p>

<p><strong>Step 4 — Making authenticated requests</strong></p>

<p>We&rsquo;re authorized (or have displayed a fancy error message) and are ready to make actual requests to get actual data. I like to authenticate my API requests by including my authorization token in the <code>Authorization</code> header on requests. Ember allows for this by overriding the <code>headers</code> computed property in your Adapter:</p>

<p>```javascript
// adapters/application.js
  headers: Ember.computed(function() {</p>

<pre><code>const account = this.get('sessionStore').fetch();
if (account) {
  return {
    'Authorization': account._id
  };
}
return {};
</code></pre>

<p>  }).volatile()
```</p>

<p><strong>Step 5 — Verify authentication on the server</strong></p>

<p>There are may ways to <a href="http://hapijs.com/tutorials/auth">authenticate requests with Hapi</a>. Hapi calls these &ldquo;Schemes&rdquo;. A Scheme is made up of multiple Strategies but since we only have one, we&rsquo;ll just refer to it as a Scheme.</p>

<p>You define a Scheme as a function that takes a <code>server</code> and some <code>options</code> as arguments and go from there. Here&rsquo;s <code>api-auth.js</code>:</p>

<p>```javascript
module.exports = function (server, options) {</p>

<p>  return {</p>

<pre><code>// These are the standard Hapi request/reply arguments
authenticate: function (request, reply) {

  // Get the session token from the HTTP Headers of the request
  const req = request.raw.req;
  const authorization = req.headers.authorization;
  // Fail quickly if it isn't present.
  if (!authorization) {
    return reply(Boom.unauthorized(null, 'Basic'));
  }

  // Pull the credentials from the session store that are 
  // associated with the session token. Fail if it's not valid.
  if (!tokenIsValid) {
    return reply(Boom.unauthorized('Authenication failed', 'Basic'), null);
  }

  // Authenticated, so send the credentials along the chain in 
  // case they need to be used later.
  return reply.continue({ credentials: credentials });
}
</code></pre>

<p>  };
};
```</p>

<p>Now that we&rsquo;ve defined our Scheme, we need to register it with Hapi. Wherever the server is set up add this:</p>

<p>```javascript
// Import our Scheme
const apiScheme = require(&lsquo;./config/api-scheme&rsquo;);</p>

<p>exports.register = function (server, options, next) {</p>

<p>  // Auth
  // Schemes have a name which you define here.
  server.auth.scheme(&lsquo;auth-scheme&rsquo;, apiScheme);</p>

<p>  // Strategies also have a name. This is what you&rsquo;ll refer
  // to when setting schemes for routes.
  server.auth.strategy(&lsquo;basic-strategy&rsquo;, &lsquo;auth-scheme&rsquo;);</p>

<p>  // You can declare all routes to use a one Strategy by default.
  server.auth.default(&lsquo;basic-strategy&rsquo;);</p>

<p>  // Routes might go here
};
```</p>

<p>If you do use a default auth strategy, you can override that on individual routes in their handler config:</p>

<p>```javascript
{
  method: &lsquo;GET&rsquo;,
  path: &lsquo;/&rsquo;,
  handler: function(req, reply) { reply(); },
  config: {</p>

<pre><code>auth: 'another-strategy'
</code></pre>

<p>  }
}
```</p>

<p>Or use the boolean <code>false</code> to skip auth altogether for a route, such as your session creation API.</p>

<p>And we&rsquo;re done! You now have an authenticated API. There are plenty of other points that could be expanded on, but it&rsquo;s getting a little long in the tooth now.</p>

<p><strong>Wait, why not use Bell?</strong></p>

<p>The Hapi organization maintains a project called <a href="https://github.com/hapijs/bell">Bell</a> that is a &ldquo;Third-party login plugin for hapi&rdquo;, including OAuth services. It&rsquo;s great, but the catch is that since half of our authentication takes place in the browser, we can&rsquo;t quite use it the way it is intended to be used.</p>
]]></content>
  </entry>
  
</feed>
