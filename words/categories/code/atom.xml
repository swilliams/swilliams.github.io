<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code, | Scott Williams]]></title>
  <link href="http://blog.swilliams.me/words/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2016-07-24T19:43:13-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Private Extensions in Swift]]></title>
    <link href="http://blog.swilliams.me/words/2015/12/11/private-extensions-in-swift/"/>
    <updated>2015-12-11T11:08:59-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/12/11/private-extensions-in-swift</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a quickie. In Swift, the default <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html">accessor</a> for strcutures is <code>internal</code>, meaning that it is available to everything else within the module. You can change this by adding <code>private</code> or <code>public</code> in front of them like so:</p>

<p><code>swift
private class Foo {
}
</code></p>

<p><code>private</code> means that the construct is only available within the same file. I just &ldquo;discovered&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> that you can also mark an <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html">Extension</a> as <code>private</code>, which I hadn&rsquo;t considered before. This let&rsquo;s you add functionality to a struct or class that may be useful in the current context of everything within that same file, but doesn&rsquo;t make sense elsewhere.</p>

<p>For example, in a <a href="https://developer.apple.com/healthkit/">HealthKit</a> project you may be only dealing with fluid ounces for an <code>HKQuantitySample</code> and converting all the time is a bit of a pain. You don&rsquo;t necessarily want to make a <code>quantityInOunces</code> computed variable  available on the whole app, but in a specific file where you&rsquo;re computed all those ounces, it makes sense.</p>

<p>```swift
private extension HKQuantitySample {</p>

<pre><code>var quantityInOunces: Double? { /* blah */ }
</code></pre>

<p>}</p>

<p>class HealthKitManager {</p>

<pre><code>func doStuff() {
    // Calculate a bunch of ounces easy peasy.
}
</code></pre>

<p>}
```</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>Couldn't think of a better word, but yeah I'm regular Vasco de Gama.</p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
</feed>
