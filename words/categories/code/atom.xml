<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Scott Williams]]></title>
  <link href="http://blog.swilliams.me/words/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2015-07-24T09:07:18-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic GitHub Workflow for Collaboration]]></title>
    <link href="http://blog.swilliams.me/words/2015/06/30/basic-github-workflow-for-collaboration/"/>
    <updated>2015-06-30T12:16:16-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/06/30/basic-github-workflow-for-collaboration</id>
    <content type="html"><![CDATA[<p>When you&rsquo;re a solo developer, you can use Git in nearly any darn way you choose. No branching? Ok. Branch on everything? Sure. Want all your commit messages to consist of &ldquo;stuff&rdquo;? Knock yourself out. You might regret some of that in the long run, but it&rsquo;s not hassling anyone else. But, as soon as you add another person into the mix, things will have to change.</p>

<p>One gigantic benefit from collaboration is having a second set of eyes look at your code. GitHub makes this easy if you follow a few steps.</p>

<p><em>[ed: This might be old hat for some of you, but I don&rsquo;t know if I&rsquo;ve ever read an entire guide for this, so I&rsquo;m writing it all down. Please send me <a href="https://twitter.com/swilliams">feedback</a>, nicely, if there&rsquo;s a problem.]</em></p>

<h2>Create an Organization</h2>

<p>This one is optional, but does help in a few ways. The Organization becomes the face of any projects underneath it. It also makes a few things a little easier with regard to deployments, issue tracking, and documentation.</p>

<h2>Everyone Forks from the Organization</h2>

<p>If the repository is called <code>some-org/project-x</code>, then each developer forks that to create <code>swilliams/project-x</code>, <code>sally-developer/project-x</code>, and so on. If a repository is private on the Organization, your forks will be private too, and won&rsquo;t count against your own private project count.</p>

<h2>Clone Your Fork</h2>

<p>Now get your local copy.</p>

<p><code>git clone https://github.com/swilliams/project-x.git</code></p>

<h2>Set up Remotes</h2>

<p>Your fork on GitHub will automatically be your <code>origin</code> remote. Add a remote for the Organizations repository. By convention this is typically called <code>upstream</code>.</p>

<p><code>git remote add upstream https://github.com/some-org/project-x.git</code></p>

<h2>Work in Branches</h2>

<p>Working on a feature? Create a branch <code>feature-abc</code>. Fixing a bug? Create a branch <code>issue-254-login-done-broke</code>. Keep <code>master</code> clean.</p>

<p><code>git checkout -b feature-abc</code></p>

<h2>Push Branches to Origin</h2>

<p>Done with a feature or an issue? Push it back up to <code>origin</code> (your fork).</p>

<p><code>git push origin feature-abc</code> (you can add a <code>-u</code> flag too to track the remote branch too)</p>

<h2>Create a Pull Request</h2>

<p>Why do we go to the hassle of creating all those branches? Because with branches, you can create multiple outstanding Pull Requests at once. If you did all your development in <code>master</code>, any additional commits you push up will be added to an open Pull Request, which can cause issues.</p>

<p>Multiple small Pull Requests are much easier to review. Would you rather review 3 files over 5 commits or 50 files and 75 commits?</p>

<h2>Someone Else Reviews the Pull Request</h2>

<p>Perhaps my favorite piece of functionality in GitHub is the Pull Request review process. Use it to annotate code and discuss. Merge it in if everything is good.</p>

<h2>Rules for the Road</h2>

<ol>
<li>Keep the master branch clean. That should be ready to go live if necessary. This means tests should be passing, everything compiles, nothing important should be broken, etc.</li>
<li>Never commit directly to <code>upstream</code>. Upstream should only be updated through Pull Requests. Exception: pushing tags.</li>
<li>Pull from <code>upstream</code> regularly. The more codebases diverge, the more likely a nasty merge problem will occur.</li>
<li>Keep branches small. Just reiterating it again.</li>
<li>There are exceptions to every rule. Use them intelligently.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archiving Old GitHub Repositories]]></title>
    <link href="http://blog.swilliams.me/words/2015/05/17/archiving-old-github-repositories/"/>
    <updated>2015-05-17T13:37:51-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/05/17/archiving-old-github-repositories</id>
    <content type="html"><![CDATA[<p>What do you do with a codebase for a client project that ended years ago? Since it&rsquo;s client work it shouldn&rsquo;t be made public, but if you keep it &ldquo;live&rdquo; in GitHub your private repository count will creep up. Deleting the repository outright seems wrong; it&rsquo;s not that unusual to have an old client cold call you with an update, and having that old codebase handy can save some headaches. The lazy way to fix this would be to just give GitHub more money to increase the limit. But I felt the itch to solve the problem with code.</p>

<p>Git itself is flexible. It&rsquo;s trivial to clone a repository, put it in a safe place (or alternate service) and call it a day. But with GitHub, that doesn&rsquo;t include Issues. There could be some solid ideas (or bugs) stored in Open Issues that should be preserved. <a href="https://developer.github.com/v3/issues/">GitHub has a great API</a> to retrieve those, and I decided to create a simple Ruby script to make it a smooth process.</p>

<p>Take a look at <a href="https://github.com/Tallwave/github_issue_exporter">GitHub Issue Exporter</a>. It&rsquo;s pretty basic right now â€” just downloads Issues into a bunch of JSON and will also let you import them back into a new project. The idea is that you clone the repository you want to archive, then export all the open issues, store it all in a safe place, then you can safely delete the repository and free up some space.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The iOS Development Calendarw]]></title>
    <link href="http://blog.swilliams.me/words/2014/12/08/the-ios-development-year/"/>
    <updated>2014-12-08T14:04:40-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/12/08/the-ios-development-year</id>
    <content type="html"><![CDATA[<p><strong>January</strong>: &ldquo;We just had our biggest sales quarter ever!&rdquo; &ndash; Apple, adding another $20B to their bank account.</p>

<p><strong>April</strong>: Speculation of what&rsquo;s gonna be in the next version of iOS.</p>

<p><strong>June</strong>: WWDC. New things! Wow! Ideas abound! Flurries of productivity. &ldquo;Guys, I think Apple&rsquo;s playing nicer with developers now!&rdquo; &ndash; some people.</p>

<p><strong>July</strong>: Wow, this beta is really beta.</p>

<p><strong>September</strong>: iOS Next ships! New iPhone! Ship your app! Bugs!</p>

<p><strong>October</strong>: Weird rejections that don&rsquo;t make any sense.</p>

<p><strong>December</strong>: Blog posts and tweets about how Apple is screwing themselves with the byzantine app review process.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Some rejections are overturned.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p><a href="http://www.panic.com/blog/transmit-ios-1-1-1/">You are here.</a></p>
</li>
  </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing With Xcode and Swift]]></title>
    <link href="http://blog.swilliams.me/words/2014/10/30/dealing-with-xcode-and-swift/"/>
    <updated>2014-10-30T10:46:09-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/10/30/dealing-with-xcode-and-swift</id>
    <content type="html"><![CDATA[<p><a href="http://blog.swilliams.me/words/2014/09/10/thoughts-on-swift/">I like Swift</a>. But Xcode&rsquo;s support of Swift is&hellip; lacking (to be polite).</p>

<p>My biggest woe is that code completion up and vanishes in projects. This is especially problematic when dealing with Cocoa libraries because method names tend to be verbose and descriptive. I find myself thinking &ldquo;I know it&rsquo;s called <a href="https://developer.apple.com/library/ios/DOCUMENTATION/UIKit/Reference/UINavigationController_Class/index.html#//apple_ref/occ/instm/UINavigationController/popToRootViewControllerAnimated:">popToRoot-something-somthing</a> and was it on UIViewController or the navigationController?&rdquo;. What would&rsquo;ve taken two seconds of poking through code-completion to figure that out turned into a solid minute of searching documentation. Multiply this every time you can&rsquo;t explicitly remember every part of a method call (and spell it correctly) and tasks that normally take an hour are now a significant part of a day.</p>

<p>The tools that Apple provides are now hindering development. I&rsquo;m not alone in that sentiment. On Apple&rsquo;s developer forums (account needed to view) there are a few threads with names like <a href="https://devforums.apple.com/message/1067119#1067119">&ldquo;Can SourceKit possibly crash more often on a Swift project?&rdquo;</a> and <a href="https://devforums.apple.com/thread/248397?start=0&amp;tstart=0">&ldquo;Xcode 6.1b3 Swift editing is becoming very difficult&rdquo;</a>.</p>

<p>One of those threads recommends deleting two folders: <code>~/Library/Developer/Xcode/DerivedData</code> and <code>~/Library/Caches/com.apple.dt.Xcode</code>. This does the job for me. It happens often enough that I created a hot key for it with <a href="http://www.keyboardmaestro.com/main/">Keyboard Maestro</a>.</p>

<p><figure class="center"></p>

<pre><code>&lt;img alt="Keyboard Maestro Screenshot" src="http://blog.swilliams.me/images/assets/xcode-swift-maestro.png"&gt;
&lt;figcaption&gt;This will yell at you if those folders don't exist, but I can live with that.&lt;/figcaption&gt;
</code></pre>

<p></figure></p>

<p>You could do something similar with <a href="http://www.alfredapp.com/">Alfred</a> or any other launcher type of app.</p>

<p>It&rsquo;s kind of sad that I have to create this kind of shortcut to maintain my sanity, but I remain hopeful. If Apple is betting big on Swift (and I think they are), then they&rsquo;ll <em>have</em> to improve the tool support for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Swift]]></title>
    <link href="http://blog.swilliams.me/words/2014/09/10/thoughts-on-swift/"/>
    <updated>2014-09-10T08:24:30-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/09/10/thoughts-on-swift</id>
    <content type="html"><![CDATA[<p><figure class="center"></p>

<pre><code>&lt;img src="http://blog.swilliams.me/images/assets/swift-logo.png" alt="Swift Logo" /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
</code></pre>

<p></figure></p>

<p>Swift is a new language developed by Apple. I&rsquo;ve been using for a few side projects.</p>

<p>On my first glance, I thought Swift would be a great language for beginners. I&rsquo;m not 100% sure if that&rsquo;s still the case. A beginner language should push you into a positive feedback loop: do something, see it work, do some more, and so on. Swift and Xcode 6 do some of this with aplomb, especially with playgrounds, but I found some features of the language can be frustrating until you have a deeper understanding of what&rsquo;s going on.</p>

<p>Optionals are the biggest part of that. They&rsquo;re kind of crazy at first. Lot&rsquo;s of ?&rsquo;s and !&rsquo;s running around. When I was starting with Swift, Xcode would constantly complain that I was missing one. Sometimes it would tell me which one was missing, but sometimes it didn&rsquo;t. After reading the documentation a little more and thinking about it, things started to click. Handling nil values is important in any language, and handling them poorly can lead to some truly marvelous bugs or security issues. Swift makes you face them much earlier in the process. I think this is a good thing, though it can make for a frustrating start. It&rsquo;s also made me think if I&rsquo;m handling nils properly in other languages I use.</p>

<p>I&rsquo;m still working on my own personal style, but I think I should be using more computed properties. A rule I&rsquo;m toying with is to keep on making methods for &ldquo;verbs&rdquo; like <code>moveFileToThing</code>, but use properties for &ldquo;nouns&rdquo; like <code>allSampleAssets</code>, even if that property makes several other calls within its implementation. This might require renaming certain methods in order to better comply with that style; if <code>allSampleAssets</code> took a <code>sort</code> parameter it couldn&rsquo;t be a property, so I&rsquo;d rename it to <code>queryAllSampleAssets(sort: NSSortDescriptor)</code>.</p>

<p>Even though it&rsquo;s a brand new thing, there is still a good amount of Objective C and Cocoa baggage. The standard collections use <code>AnyObject</code> where <code>id</code> used to be, which means you&rsquo;ll need to do some explicit casting to the type you need. I found it easier when dealing with an <code>NSDictionary</code> or <code>NSArray</code> to not try to cram all the casting and then manipulating into a single line of code.</p>

<p>Enums have reams of power that could be used for evil. I like the way <a href="http://nsscreencast.com/episodes/130-swift-json-redux-part-1">NSScreencasts uses enums with JSON parsing</a>, but it&rsquo;s hard to comprehend. If you have more of a functional programming background, I suspect this would be easier.</p>

<p>Swift is going to be huge. I think Apple does have a language on its hands that&rsquo;ll last for its next 20 years. There are still some rough edges and potential pitfalls, but It has become the language I prefer when creating iOS apps.</p>
]]></content>
  </entry>
  
</feed>
