<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Scott Williams]]></title>
  <link href="http://blog.swilliams.me/words/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2014-07-27T19:45:36-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Naming Your Stuff]]></title>
    <link href="http://blog.swilliams.me/words/2014/07/10/naming-your-stuff/"/>
    <updated>2014-07-10T13:17:05-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/07/10/naming-your-stuff</id>
    <content type="html"><![CDATA[<p>Names are hard, especially for a framework or library. A good name is memorable, and can be a shot in the arm in terms of discoverability. Finding a good name is nebulous, and too often falls into the I&rsquo;ll-know-it-when-I-see-it category. But a <em>bad</em> name is easier to define. The biggest sin of bad names is that they are impossible to find answers when you run into questions.</p>

<p>I don&rsquo;t like to throw rocks at somebody else&rsquo;s hard work, but I think it&rsquo;s been enough time that I can gently criticize the name of the <a href="http://prototypejs.org/">Prototype JavaScript library</a><sup>1</sup>. Why was this a bad name? Well, what do you do when you run into a problem that isn&rsquo;t quickly found in the official documentation? Search for it on Google. Now, the term <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype">&ldquo;prototype&rdquo; is a core part of the JavaScript language</a>, which meant that every single search result for &ldquo;prototype X&rdquo;, &ldquo;JavaScript prototype X&rdquo;, &ldquo;prototype js X&rdquo; or any other combination only referred to dealing with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain">prototypal inheritance in JavaScript</a>.</p>

<p>You may be the biggest fan of both The Simpsons and Ruby. Don&rsquo;t name your library &ldquo;Homer&rdquo;. Again, what happens if someone runs into a problem when using Homer? They&rsquo;re going to try to search for &ldquo;homer fix json serialization&rdquo; and get a bunch of funnier Simpsons quotes. Your JSON parsing library is never going to be more popular than <a href="https://www.youtube.com/watch?v=khSIYmTzt6U">Mr. Simpson</a>, so please, pick something else.</p>

<p>Common words aren&rsquo;t necessarily bad. <a href="http://backbonejs.org/">Backbone</a>, <a href="http://underscorejs.org/">Underscore</a>, <a href="http://rubyonrails.org/">Rails</a>, <a href="http://nodejs.org/">node</a>, and <a href="http://expressjs.com/">express</a> are all fairly common English words, but none of them are common enough to pollute search results. Spend a few minutes searching around before putting together your splash page.</p>

<p><div class="footnotes">
<p><small>
1. In the war between Prototype and jQuery, I was in the former&rsquo;s camp for a long time. Prototype seemed like magic back in 2006 when I was coding AJAX manually. Searching for jQuery issues was never a problem though.
</small></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Started to Understand Model Binding Magic in Ember]]></title>
    <link href="http://blog.swilliams.me/words/2014/05/12/how-i-started-to-understand-model-binding-magic-in-ember/"/>
    <updated>2014-05-12T13:16:18-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/05/12/how-i-started-to-understand-model-binding-magic-in-ember</id>
    <content type="html"><![CDATA[<p>I&rsquo;m learning <a href="http://emberjs.com/">Ember.js</a> in efforts to stay <a href="http://blog.swilliams.me/words/2014/01/20/keep-your-developer-saw-sharp/">reasonably up to date</a> with client side web technologies. <a href="http://blog.swilliams.me/words/2014/05/06/oh-cool-you-want-to-be-a-web-developer/">This hasn&rsquo;t been the easiest going.</a></p>

<p>Ember&rsquo;s best feature is that it easily binds values in HTML to their corresponding properties on objects. I&rsquo;ve found the implementations of this a little confusing sometimes. Going through the Getting Started guide has been helpful, though <a href="http://emberjs.com/guides/getting-started/displaying-the-number-of-incomplete-todos/">this part tripped</a> me up for a good hour, specifically this snippet:</p>

<p><code>js Within todos_controller.js
remaining: function() {
  return this.filterBy('isCompleted', false).get('length');
}.property('@each.isCompleted'),
</code></p>

<p>That last line turns the associatied method into a <a href="http://emberjs.com/guides/object-model/computed-properties/">computed property</a>.  My understanding of computed properties was as a means to provide a simple call to complex data (eg. a <code>fullName</code> property that joins <code>firstName</code> and <code>lastName</code> properties). This particular method is on a <em>controller</em>, has a previously foreign syntax (<code>@each</code>), and the template that refers to it still uses it&rsquo;s canonical name (<code>remaining</code>).</p>

<p><figure></p>

<pre><code>&lt;img src="http://blog.swilliams.me/images/assets/ember/zoidberg.gif" alt="Wha?" /&gt;
</code></pre>

<p></figure></p>

<p>In order to understand just what was happening, I pumped the brakes and dug into the sample application. My first question was why they were using a computed property altogether. I whipped up another method and added it to my controller:</p>

<p>```js todos_controller.js
remaining: function() {
  return this.filterBy(&lsquo;isCompleted&rsquo;, false).get(&lsquo;length&rsquo;);
}.property(&lsquo;@each.isCompleted&rsquo;),</p>

<p>derp: function() {
  return &lsquo;derp!&rsquo;;
}
```</p>

<p>
```html index.html</p>

<h1>todos {{derp}}</h1>


<p>```
</p>

<p>This resulted in the method body being substituted in the template, which reminded me that <code>{{derp}}</code> was just printing out whatever <code>derp</code> evaluated to, in this case a function.<sup>1</sup> So I made <code>derp</code> a computed property:</p>

<p><code>js todos_controller.js
derp: function() {
  return 'derp!';
}.property('what')
</code></p>

<p>This worked. My <code>&lt;h1&gt;</code> was now &lsquo;todos derp!&rsquo;. In fact, you could simplify it even more by doing this: <code>property()</code> and leaving off a name altogether. It also demonstrated that the first argument to <code>property</code> didn&rsquo;t have a bearing on what goes in the Template. Next step was to substitute my static text with something useful.</p>

<p><code>js todos_controller.js
derp: function() {
  return this.filterBy('isCompleted', false).get('length');
}.property()
</code></p>

<p>And sure enough, the title was now &lsquo;todos 2&rsquo;. I suspected this would work because my controller extended <code>Ember.ArrayController</code>, giving it access to <code>filterBy</code>. This lead me back to one of my original questions: what is the purpose of <code>'@each.isCompleted'</code>?</p>

<p>I played around with the todo app a little more and noticed that my <code>{{derp}}</code> was not automatically updating when todos where checked off while the original <code>{{remaining}}</code> was. Then it hit me: <code>'@each'</code> must be a special directive for an <code>ArrayController</code> that bound that function to the <code>isCompleted</code> property of <a href="http://emberjs.com/api/classes/Ember.ArrayController.html#property__each"><em>each</em></a> object in its array. Putting a <code>console.log('called');</code> confirmed this suspicion — it&rsquo;s called every time <code>isCompleted</code> is accessed.</p>

<p>After this bit of forensics, things make a little more sense now. I do wish this association was a little more spelled out in the documentation though for us thick-headed developers.</p>

<div class="footnotes">
1. This is what JavaScript does. Open the dev tools and log a function without executing it — the body of that function prints out.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oh Cool You Want to Be a Web Developer?]]></title>
    <link href="http://blog.swilliams.me/words/2014/05/06/oh-cool-you-want-to-be-a-web-developer/"/>
    <updated>2014-05-06T11:07:29-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/05/06/oh-cool-you-want-to-be-a-web-developer</id>
    <content type="html"><![CDATA[<p>Just go and learn any or all of these:</p>

<ul>
<li>HTML 5</li>
<li>CSS 3</li>
<li>JavaScript</li>
<li><a href="http://coffeescript.org">CoffeeScript</a></li>
<li><a href="http://sass-lang.com/">SASS</a></li>
<li><a href="http://lesscss.org/">Less</a></li>
<li><a href="http://jquery.com/">jQuery</a></li>
<li><a href="https://angularjs.org/">Angular</a></li>
<li><a href="http://emberjs.com/">Ember</a></li>
<li><a href="http://gruntjs.com/">Grunt</a></li>
<li><a href="http://gulpjs.com/">Gulp</a></li>
<li><a href="http://bower.io/">Bower</a></li>
<li><a href="http://yeoman.io/">Yeoman</a></li>
<li><a href="http://nodejs.org/">node.js</a></li>
<li><a href="http://bourbon.io/">Bourbon</a></li>
<li><a href="http://bitters.bourbon.io/">Bitters</a></li>
<li><a href="http://compass-style.org/">Compass</a></li>
<li><a href="http://getbootstrap.com/">Bootstrap</a></li>
<li><a href="http://foundation.zurb.com/">Foundation</a></li>
<li><a href="http://handlebarsjs.com/">Handlebars</a></li>
<li><a href="http://mustache.github.io/">Mustache</a></li>
</ul>


<p>This list is not exhaustive. Some of those are optional. By the time you are done reading this, another framework or library will have been created.</p>

<p>This is a <a href="http://blog.swilliams.me/words/2013/12/02/the-frustrations-of-the-journeyman/">frustration</a> that I feel with web development these days. I spent about 2 years learning <a href="http://documentcloud.github.io/backbone/">one</a> client-side framework inside and out, but it&rsquo;s already losing relevance. Angular seems to be a good choice for employment these days, but if I go deep in it, will history repeat itself?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating From Squarespace]]></title>
    <link href="http://blog.swilliams.me/words/2014/03/05/migrating-from-squarespace/"/>
    <updated>2014-03-05T09:23:18-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/03/05/migrating-from-squarespace</id>
    <content type="html"><![CDATA[<p>Squarespace is a popular service to host a website or blog. You might have seen their <a href="http://www.youtube.com/watch?v=S0Or1f_RxKQ">Super Bowl commercial</a> or heard about them on one of the hundred podcasts they sponsor. I signed up about a year and a half ago and used it as my main blog. I&rsquo;ve decided to move away and use <a href="http://octopress.org">Octopress</a> to host my blog on <a href="http://octopress.org/">GitHub Pages</a> instead.</p>

<p>Why? Well, for starters, it&rsquo;s slow to use. I think it&rsquo;s a byproduct of the way they organized their <a href="http://en.wikipedia.org/wiki/Single-page_application">single-page application</a> architecture. I find myself having to wait for things to open in modal windows, or to load another menu.</p>

<p>The layout tools are bad. If all you do is write text and link to stuff, this doesn&rsquo;t matter. Sometimes I like to have <a href="/words/2014/01/26/demystifying-ruby-dsls">in depth coding posts</a> that have multiple blocks of code within them. This is incredibly painful to do with the Squarespace layout tools. Here&rsquo;s the process:</p>

<ol>
<li>Hover over an existing text block.</li>
<li>Click the appropriate &ldquo;+&rdquo; button.</li>
<li>Scroll down to find the &ldquo;CODE&rdquo; button.</li>
<li>Paste in the code (after making sure the indentation is correct)</li>
<li>Go to step 1 and this time, select Markdown.</li>
<li>Rinse and repeat for <em>every</em> block and image you want.</li>
</ol>


<p>What you see is <em>definitely not</em> what you get. Sizing images to align to the left or right of a paragraph is awful. For some reason, the editing font on the admin page is different than the one on the actual site. This means that even if everything lines up on the admin page, it might not on the live site. Fixing this is tedious. Again, due to the single-pagedness of the admin site, you can&rsquo;t easiliy open the preview in a new tab or window (&lsquo;Open in new page&rsquo; does nothing). You need to open a brand new browser window, navigate to your admin site, then click on the preview button there.</p>

<p>Saving a post in the editor closes the modal that contains it. This means that the workflow for making any kind of adjustment is:</p>

<ol>
<li>Do the thing above to get a second window open to look at the preview.</li>
<li>Click the post in the first window to edit.</li>
<li>Wait a second.</li>
<li>Find the typo to fix. This is extra fun if you have multiple blocks of text.</li>
<li>Fix the typo and hit save. (Modal closes)</li>
<li>Switch over to the preview in the second window and refresh.</li>
<li>If it&rsquo;s not right, repeat steps 2-6 until it is.</li>
</ol>


<p>All of this for about $100/year (or more).</p>

<p>Octopress is a static site generator that is aimed at developers. If you don&rsquo;t know <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, <a href="http://git-scm.com/">git</a>, as well as HTML + CSS consider something else. However, since I am familiar with all of those, it works for me.</p>

<p>The problem is exporting my content from Squarespace. The only export option available is one for <a href="http://wordpress.org/">Wordpress</a>, which dumps everything into an XML file. Since I&rsquo;m not using Wordpress, this didn&rsquo;t work for me. My blog has been quite the sojourner, created orginally on Wordpress, then to Posterous (lol), and finally Squarespace. It&rsquo;s accumulated a bit of cruft. For some reason, older posts did not export properly; if they contained an image and text, the text was deleted.</p>

<p>After some fiddling, I put together a <a href="https://github.com/swilliams/squarespace-exporter">script</a> that would walk each post on the blog, download everything and then move onto the next. I did run into some gotchas though:</p>

<ul>
<li>Some of the older images were named &ldquo;#img.jpg&rdquo;. I ended up <a href="https://github.com/swilliams/squarespace-exporter/blob/master/script.rb#L151">generating</a> a random string for the filename and removing the hashtag.</li>
<li><code>&lt;img&gt;</code> tags used a <code>data-src</code> attribute instead of a standard <code>src</code> attribute. <a href="https://github.com/swilliams/squarespace-exporter/blob/master/script.rb#L181">The fix was to rename the attribute</a>.</li>
<li>There was a veritable boatload of extra markup and attributes on each post, which made things look weird. I ended up parsing the entire HTML of each post and <a href="https://github.com/swilliams/squarespace-exporter/blob/master/script.rb#L223">stripping</a> out all the unnecessary stuff.</li>
</ul>


<p>There are still some issues that I&rsquo;ll need to address on a case by case basis, but it&rsquo;s a good 80% solution right now.</p>

<p><figure></p>

<pre><code>&lt;img src="http://blog.swilliams.me/images/assets/octopress.png" alt="Octopress" /&gt;
</code></pre>

<p></figure></p>

<p>I like Octopress because it is fast, easy for me to manage, and keeps my content in a simple (and portable) format. I just hope that this will last me for a while. It doesn&rsquo;t do nearly as many things as Squarespace, but most of those I don&rsquo;t need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demystifying Ruby DSLs — Part 2]]></title>
    <link href="http://blog.swilliams.me/words/2014/02/21/demystifying-ruby-dsls-part-2/"/>
    <updated>2014-02-21T00:00:00-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/02/21/demystifying-ruby-dsls-part-2</id>
    <content type="html"><![CDATA[<p><a href="/words/2014/01/26/demystifying-ruby-dsls">Last time we learned about how to use modules to dynamically add functionality to a class</a>. This time let&rsquo;s take a look at doing that, but customizing our extensions at runtime.</p>

<p>What helped me ultimately understand how these things work is that you are building up classes on the fly. It&rsquo;s kind of like when you <code>include</code> a module, it&rsquo;s editing that class to add more methods to it. Think of a bunch of Legos. Each Lego is a module with various methods on it. At runtime they assemble together to build a castle.</p>

<p><figure></p>

<pre><code>&lt;img alt="Lego Castle by InSapphoWeTrust on Flickr." src="http://blog.swilliams.me/images/assets/lego-annotated.png"&gt;
&lt;figcaption&gt;&lt;a href="http://www.flickr.com/photos/56619626@N05/7406185206/in/photolist-chsCQo-chsDcG-chsCVb-chsD97-chsBY3-chsCeN-chsDid-bgETZB-8FZGC9-9nsJ9P-8oTk1n-dCdMj4-f8b3QR-7J1LqD-7BnYDa-7BnZmZ-7BrJZw-7BrLsb-7BnVLP-9XN1mi-cnFar5-chsCy7-gC3qkX-chsCKW-chsCs1-chsCoN-aCZJqe-aCZJe4-chsCcf-chsC41-aCcgjW-aC9BwX-aCcgf3-aC9BE6-aC9BKr-aCcgUf-aCcgRw-aC9C9v-aCcgXo-chsC7J-chsBZw-a5YVbT-em9rGR-em9ru8-emfdMW-em9tEg-emfewq-emfeEm-emfdxf-emfeh9-emfdi5"&gt;Lego Castle&lt;/a&gt; by &lt;a href="http://www.flickr.com/photos/skinnylawyer/"&gt;InSapphoWeTrust&lt;/a&gt; on Flickr.&lt;/figcaption&gt;
</code></pre>

<p></figure></p>

<h3>Dynamically Adding</h3>

<p>What if those Legos could generate even more Legos as you were building with them, and then intelligently join themselves together?</p>

<p>If you&rsquo;re familiar with Rails, you&rsquo;ve seen that you can just declare associations within a model — <code>:has_many</code>, <code>:has_one</code>, and so on. Once you add those directives to your class, suddenly you have access to brand spanking new methods. Have you ever wondered how that worked? Let&rsquo;s implement a rudimentary version.</p>

<p>Think for a moment about <code>:has_many</code>. What would you expect the line <code>has_many :gerbils</code> methods to do?  You would have to have a <code>gerbils</code> method to retrieve the little fellas, and another one, <code>gerbils=(new_value)</code> to set them (and others to add them and so on, but <a href="http://en.wikipedia.org/wiki/Keep_it_simple_stupid">KISS</a>). You implement that with a generic <code>get_child_models(child_name)</code> method, but that feels like the Java (™ Oracle Corporation) way&hellip; and I have too much self respect to go down that path. Instead we can take advantage of Ruby&rsquo;s metaprogramming capabilities and generate them dynamically.</p>

<p>One way to do this is with <code>eval</code>.</p>

<h3>A Word on Eval</h3>

<p>Ruby has a few versions of <code>eval</code>. They all take strings or blocks and turn them in code that is executed.</p>

<ul>
<li>There&rsquo;s the <a href="http://www.ruby-doc.org/core-2.1.0/Kernel.html#method-i-eval">standard one</a> that executes arbitrary code.</li>
<li><a href="http://ruby-doc.org/core-2.1.0/Module.html#method-i-class_eval">class_eval</a> — similar to vanilla <code>eval</code>, but executes the code in the context of the Class itself. There&rsquo;s also <code>module_eval</code> which does the same thing (more or less). Example:</li>
</ul>


<p>``` ruby
class Monkey
end</p>

<p>m = Monkey.new
Monkey.class_eval %q(def screech() &lsquo;Eek Eek&rsquo; end)
m.screech # Eek Eek
```</p>

<ul>
<li><a href="">instance_eval</a> — modifies a class, but from an instance point of view, <em>and only for that particular instance</em> (this is called a <a href="http://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/39-ruby-s-object-model/lessons/131-singleton-methods-and-metaclasses">Singleton method</a>).</li>
</ul>


<p>``` ruby
class Monkey
end</p>

<p>m = Monkey.new
m2 = Monkey.new
m.instance_eval %q(def screech() &lsquo;Eek Eek&rsquo; end)
m.screech # Eek Eek
m2.screech # NoMethodError: undefined method `screech' for #&lt;Monkey:0x007fa6f768bac8>
```</p>

<p>Using these techniques you can generate the set of methods for our <code>:has_many</code> implementation.</p>

<p>``` ruby
module Associations
  class &lt;&lt; self</p>

<pre><code>def included(base)
  base.extend Associations::ClassMethods
end
</code></pre>

<p>  end</p>

<p>  module ClassMethods</p>

<pre><code>def has_many(thingies)
  code = %(
    def #{thingies}
        # retrieve stuff from here
    end

    def #{thingies}=(new_value)
        # set new_value here
    end
  )
  class_eval code
end
</code></pre>

<p>  end
end
```</p>

<p>Now, if you <code>include Associations</code> in your class, you can call <code>has_many :hamsters</code> or <code>has_many :gerbils</code> or <code>has_many :guinea_pigs</code> and have all of your getters and setters created.</p>

<p><figure></p>

<pre><code>&lt;img alt="This is you with all the gerbil methods." src="http://blog.swilliams.me/images/assets/cashew.jpg"&gt;
&lt;figcaption&gt;This is you with all the gerbil methods.&lt;/figcaption&gt;
</code></pre>

<p></figure></p>

<h3>Caution</h3>

<p>I&rsquo;m not a big fan of <code>eval</code>, at least when using it with strings. The biggest reason is that it makes bugs harder to find. The Ruby interpreter will point out syntax errors when the file loads, but a typo in an evalled string won&rsquo;t get caught until runtime. The longer the string, the more likely something bad will creep in there. And some of these dynamically created methods will be long. I&rsquo;m talking <a href="http://www.amazon.com/gp/product/B0026L7H20/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0026L7H20&amp;linkCode=as2&amp;tag=thepetzoo-20">Lord of the Rings Extended Edition</a> long.</p>

<p>Fortunately there is a better way. The eval methods also take blocks, which work pretty well in most cases. For the purposes of dynamically generating methods, I prefer using <code>define_method</code> <a href="http://ruby-doc.org/core-2.1.0/Module.html#method-i-define_method">source</a>. It&rsquo;s available on <code>Module</code> (and therefore classes too) and, just like it says on the tin, is designed to create methods on the fly and add them to a class.</p>

<p>``` ruby
def has_many(thingies)
  define_method thingies.to_s do</p>

<pre><code># retrieve stuff from here
</code></pre>

<p>  end</p>

<p>  define_method &ldquo;#{thingies}=&rdquo; do</p>

<pre><code># set new_value here
</code></pre>

<p>  end
end
```</p>

<p>It&rsquo;s kinda similar to the eval code, in fact, <code>define_method</code> passes itself along to <code>instance_eval</code>, so when all is said and done, it&rsquo;s merely for our convenience. But is easier to test, and will complain loudly if there&rsquo;s a syntax error.</p>

<p>Working with actual code rather than a string makes refactoring easier too. Let&rsquo;s say you want to enable your users to define their own implementations of the generated rodent methods. Pulling that out into its own method is simple:</p>

<p>``` ruby
def add_method_without_clobbering (method_name, &amp;method_definition)
  unless method_defined? method_name</p>

<pre><code>define_method method_name, method_definition
</code></pre>

<p>  end
end</p>

<p>def has_many(thingies)
  add_method_without_clobbering thingies.to_s do</p>

<pre><code># retrieve stuff from here
</code></pre>

<p>  end</p>

<p>  add_method_without_clobbering &ldquo;#{thingies}=&rdquo; do</p>

<pre><code># set new_value here
</code></pre>

<p>  end
end
```</p>

<p>That&rsquo;s still possible with string evals, but is easier to read in my eyes.</p>

<p>That&rsquo;ll wrap up this entry on DSLs. There&rsquo;s only one other big piece of the pie I&rsquo;d like to cover — blocks, but you can do a whole lot without them.</p>

<p>One thing to keep in mind when writing DSLs is that it can be hard to follow along. Document everything, especially the esoteric parts. It might even be a good idea to diagram the path of all the <code>include</code> chain. DSLs can make client code easier to write, but usually at the expense of crazy complexity within the DSL itself.</p>
]]></content>
  </entry>
  
</feed>
