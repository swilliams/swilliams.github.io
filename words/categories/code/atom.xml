<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Scott Williams]]></title>
  <link href="http://blog.swilliams.me/words/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2014-11-11T20:01:22-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dealing With Xcode and Swift]]></title>
    <link href="http://blog.swilliams.me/words/2014/10/30/dealing-with-xcode-and-swift/"/>
    <updated>2014-10-30T10:46:09-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/10/30/dealing-with-xcode-and-swift</id>
    <content type="html"><![CDATA[<p><a href="http://blog.swilliams.me/words/2014/09/10/thoughts-on-swift/">I like Swift</a>. But Xcode&rsquo;s support of Swift is&hellip; lacking (to be polite).</p>

<p>My biggest woe is that code completion up and vanishes in projects. This is especially problematic when dealing with Cocoa libraries because method names tend to be verbose and descriptive. I find myself thinking &ldquo;I know it&rsquo;s called <a href="https://developer.apple.com/library/ios/DOCUMENTATION/UIKit/Reference/UINavigationController_Class/index.html#//apple_ref/occ/instm/UINavigationController/popToRootViewControllerAnimated:">popToRoot-something-somthing</a> and was it on UIViewController or the navigationController?&rdquo;. What would&rsquo;ve taken two seconds of poking through code-completion to figure that out turned into a solid minute of searching documentation. Multiply this every time you can&rsquo;t explicitly remember every part of a method call (and spell it correctly) and tasks that normally take an hour are now a significant part of a day.</p>

<p>The tools that Apple provides are now hindering development. I&rsquo;m not alone in that sentiment. On Apple&rsquo;s developer forums (account needed to view) there are a few threads with names like <a href="https://devforums.apple.com/message/1067119#1067119">&ldquo;Can SourceKit possibly crash more often on a Swift project?&rdquo;</a> and <a href="https://devforums.apple.com/thread/248397?start=0&amp;tstart=0">&ldquo;Xcode 6.1b3 Swift editing is becoming very difficult&rdquo;</a>.</p>

<p>One of those threads recommends deleting two folders: <code>~/Library/Developer/Xcode/DerivedData</code> and <code>~/Library/Caches/com.apple.dt.Xcode</code>. This does the job for me. It happens often enough that I created a hot key for it with <a href="http://www.keyboardmaestro.com/main/">Keyboard Maestro</a>.</p>

<p><figure class="center"></p>

<pre><code>&lt;img alt="Keyboard Maestro Screenshot" src="http://blog.swilliams.me/images/assets/xcode-swift-maestro.png"&gt;
&lt;figcaption&gt;This will yell at you if those folders don't exist, but I can live with that.&lt;/figcaption&gt;
</code></pre>

<p></figure></p>

<p>You could do something similar with <a href="http://www.alfredapp.com/">Alfred</a> or any other launcher type of app.</p>

<p>It&rsquo;s kind of sad that I have to create this kind of shortcut to maintain my sanity, but I remain hopeful. If Apple is betting big on Swift (and I think they are), then they&rsquo;ll <em>have</em> to improve the tool support for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Swift]]></title>
    <link href="http://blog.swilliams.me/words/2014/09/10/thoughts-on-swift/"/>
    <updated>2014-09-10T08:24:30-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/09/10/thoughts-on-swift</id>
    <content type="html"><![CDATA[<p><figure class="center"></p>

<pre><code>&lt;img src="http://blog.swilliams.me/images/assets/swift-logo.png" alt="Swift Logo" /&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
</code></pre>

<p></figure></p>

<p>Swift is a new language developed by Apple. I&rsquo;ve been using for a few side projects.</p>

<p>On my first glance, I thought Swift would be a great language for beginners. I&rsquo;m not 100% sure if that&rsquo;s still the case. A beginner language should push you into a positive feedback loop: do something, see it work, do some more, and so on. Swift and Xcode 6 do some of this with aplomb, especially with playgrounds, but I found some features of the language can be frustrating until you have a deeper understanding of what&rsquo;s going on.</p>

<p>Optionals are the biggest part of that. They&rsquo;re kind of crazy at first. Lot&rsquo;s of ?&rsquo;s and !&rsquo;s running around. When I was starting with Swift, Xcode would constantly complain that I was missing one. Sometimes it would tell me which one was missing, but sometimes it didn&rsquo;t. After reading the documentation a little more and thinking about it, things started to click. Handling nil values is important in any language, and handling them poorly can lead to some truly marvelous bugs or security issues. Swift makes you face them much earlier in the process. I think this is a good thing, though it can make for a frustrating start. It&rsquo;s also made me think if I&rsquo;m handling nils properly in other languages I use.</p>

<p>I&rsquo;m still working on my own personal style, but I think I should be using more computed properties. A rule I&rsquo;m toying with is to keep on making methods for &ldquo;verbs&rdquo; like <code>moveFileToThing</code>, but use properties for &ldquo;nouns&rdquo; like <code>allSampleAssets</code>, even if that property makes several other calls within its implementation. This might require renaming certain methods in order to better comply with that style; if <code>allSampleAssets</code> took a <code>sort</code> parameter it couldn&rsquo;t be a property, so I&rsquo;d rename it to <code>queryAllSampleAssets(sort: NSSortDescriptor)</code>.</p>

<p>Even though it&rsquo;s a brand new thing, there is still a good amount of Objective C and Cocoa baggage. The standard collections use <code>AnyObject</code> where <code>id</code> used to be, which means you&rsquo;ll need to do some explicit casting to the type you need. I found it easier when dealing with an <code>NSDictionary</code> or <code>NSArray</code> to not try to cram all the casting and then manipulating into a single line of code.</p>

<p>Enums have reams of power that could be used for evil. I like the way <a href="http://nsscreencast.com/episodes/130-swift-json-redux-part-1">NSScreencasts uses enums with JSON parsing</a>, but it&rsquo;s hard to comprehend. If you have more of a functional programming background, I suspect this would be easier.</p>

<p>Swift is going to be huge. I think Apple does have a language on its hands that&rsquo;ll last for its next 20 years. There are still some rough edges and potential pitfalls, but It has become the language I prefer when creating iOS apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Porting DB5 to Swift]]></title>
    <link href="http://blog.swilliams.me/words/2014/08/12/porting-db5-to-swift/"/>
    <updated>2014-08-12T16:41:51-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/08/12/porting-db5-to-swift</id>
    <content type="html"><![CDATA[<p>I&rsquo;m a big fan of using the <a href="https://github.com/quartermaster/DB5">DB5 library</a> for customizing an iOS app via a <a href="http://en.wikipedia.org/wiki/Plist">plist configuration file</a>, and I&rsquo;ve used it in several projects so far. I&rsquo;ve also  been digging more into Swift and iOS 8 and thought it would be a good exercise to familiarize myself more with Swift to port DB5 from its original Objective C codebase to Swift.</p>

<p>The result is over on Github: <a href="https://github.com/swilliams/DB5-Swift">DB5-Swift</a>.</p>

<p>For grins, I wanted to go with a purely Swift approach, no NSWhatever classes unless there was no alternative. This meant using <code>Dictionary</code> instead of <code>NSDictionary</code>. Which turned into a bit of a headache. The biggest issue I ran into was that Swift&rsquo;s Dictionary doesn&rsquo;t seem to have an equivalent of NSDictionary&rsquo;s <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDictionary_Class/Reference/Reference.html#//apple_ref/doc/uid/20000140-CBHBABID"><code>initWithContentsOfFile:</code></a><sup>1</sup>. Rather than try to parse the plist by hand, I just went back with good ole NSDictionary.</p>

<p>Two of Swift&rsquo;s headlining features are <a href="https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_468">type inference</a> and <a href="https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_478">optional values</a>. I&rsquo;ve used both of these features before in C# for several years and have appreciated what they bring to the table. Swift is a little bit different though because it comes with the history of Objective C and Cocoa. NSDictionary was built to take advantage of Objective C&rsquo;s type system, and using it with Swift involved more casting and ? and ! operators than I expected. It didn&rsquo;t help that Xcode would often be wrong in its helper tooltips, suggesting addtional !&rsquo;s which wouldn&rsquo;t fix the problem.</p>

<p>I&rsquo;m not entirely sure if DB5-Swift is 100% up to snuff right now. I think some of the methods should have better handling for nil values. I still have plenty of learning left before I&rsquo;d consider myself adept at Swift. Overall, it was  a good exercise, and I will use it in future apps.</p>

<p><div class="footnotes">
<p><small>
1. Not necessarily true according to <a href="https://twitter.com/_lanceparker/status/499368493209239552">@_lanceparker</a> on Twitter.
</small></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming Your Stuff]]></title>
    <link href="http://blog.swilliams.me/words/2014/07/10/naming-your-stuff/"/>
    <updated>2014-07-10T13:17:05-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/07/10/naming-your-stuff</id>
    <content type="html"><![CDATA[<p>Names are hard, especially for a framework or library. A good name is memorable, and can be a shot in the arm in terms of discoverability. Finding a good name is nebulous, and too often falls into the I&rsquo;ll-know-it-when-I-see-it category. But a <em>bad</em> name is easier to define. The biggest sin of bad names is that they are impossible to find answers when you run into questions.</p>

<p>I don&rsquo;t like to throw rocks at somebody else&rsquo;s hard work, but I think it&rsquo;s been enough time that I can gently criticize the name of the <a href="http://prototypejs.org/">Prototype JavaScript library</a><sup>1</sup>. Why was this a bad name? Well, what do you do when you run into a problem that isn&rsquo;t quickly found in the official documentation? Search for it on Google. Now, the term <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype">&ldquo;prototype&rdquo; is a core part of the JavaScript language</a>, which meant that every single search result for &ldquo;prototype X&rdquo;, &ldquo;JavaScript prototype X&rdquo;, &ldquo;prototype js X&rdquo; or any other combination only referred to dealing with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain">prototypal inheritance in JavaScript</a>.</p>

<p>You may be the biggest fan of both The Simpsons and Ruby. Don&rsquo;t name your library &ldquo;Homer&rdquo;. Again, what happens if someone runs into a problem when using Homer? They&rsquo;re going to try to search for &ldquo;homer fix json serialization&rdquo; and get a bunch of funnier Simpsons quotes. Your JSON parsing library is never going to be more popular than <a href="https://www.youtube.com/watch?v=khSIYmTzt6U">Mr. Simpson</a>, so please, pick something else.</p>

<p>Common words aren&rsquo;t necessarily bad. <a href="http://backbonejs.org/">Backbone</a>, <a href="http://underscorejs.org/">Underscore</a>, <a href="http://rubyonrails.org/">Rails</a>, <a href="http://nodejs.org/">node</a>, and <a href="http://expressjs.com/">express</a> are all fairly common English words, but none of them are common enough to pollute search results. Spend a few minutes searching around before putting together your splash page.</p>

<p><div class="footnotes">
<p><small>
1. In the war between Prototype and jQuery, I was in the former&rsquo;s camp for a long time. Prototype seemed like magic back in 2006 when I was coding AJAX manually. Searching for jQuery issues was never a problem though.
</small></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Started to Understand Model Binding Magic in Ember]]></title>
    <link href="http://blog.swilliams.me/words/2014/05/12/how-i-started-to-understand-model-binding-magic-in-ember/"/>
    <updated>2014-05-12T13:16:18-07:00</updated>
    <id>http://blog.swilliams.me/words/2014/05/12/how-i-started-to-understand-model-binding-magic-in-ember</id>
    <content type="html"><![CDATA[<p>I&rsquo;m learning <a href="http://emberjs.com/">Ember.js</a> in efforts to stay <a href="http://blog.swilliams.me/words/2014/01/20/keep-your-developer-saw-sharp/">reasonably up to date</a> with client side web technologies. <a href="http://blog.swilliams.me/words/2014/05/06/oh-cool-you-want-to-be-a-web-developer/">This hasn&rsquo;t been the easiest going.</a></p>

<p>Ember&rsquo;s best feature is that it easily binds values in HTML to their corresponding properties on objects. I&rsquo;ve found the implementations of this a little confusing sometimes. Going through the Getting Started guide has been helpful, though <a href="http://emberjs.com/guides/getting-started/displaying-the-number-of-incomplete-todos/">this part tripped</a> me up for a good hour, specifically this snippet:</p>

<p><code>js Within todos_controller.js
remaining: function() {
  return this.filterBy('isCompleted', false).get('length');
}.property('@each.isCompleted'),
</code></p>

<p>That last line turns the associatied method into a <a href="http://emberjs.com/guides/object-model/computed-properties/">computed property</a>.  My understanding of computed properties was as a means to provide a simple call to complex data (eg. a <code>fullName</code> property that joins <code>firstName</code> and <code>lastName</code> properties). This particular method is on a <em>controller</em>, has a previously foreign syntax (<code>@each</code>), and the template that refers to it still uses it&rsquo;s canonical name (<code>remaining</code>).</p>

<p><figure></p>

<pre><code>&lt;img src="http://blog.swilliams.me/images/assets/ember/zoidberg.gif" alt="Wha?" /&gt;
</code></pre>

<p></figure></p>

<p>In order to understand just what was happening, I pumped the brakes and dug into the sample application. My first question was why they were using a computed property altogether. I whipped up another method and added it to my controller:</p>

<p>```js todos_controller.js
remaining: function() {
  return this.filterBy(&lsquo;isCompleted&rsquo;, false).get(&lsquo;length&rsquo;);
}.property(&lsquo;@each.isCompleted&rsquo;),</p>

<p>derp: function() {
  return &lsquo;derp!&rsquo;;
}
```</p>

<p>
```html index.html</p>

<h1>todos {{derp}}</h1>


<p>```
</p>

<p>This resulted in the method body being substituted in the template, which reminded me that <code>{{derp}}</code> was just printing out whatever <code>derp</code> evaluated to, in this case a function.<sup>1</sup> So I made <code>derp</code> a computed property:</p>

<p><code>js todos_controller.js
derp: function() {
  return 'derp!';
}.property('what')
</code></p>

<p>This worked. My <code>&lt;h1&gt;</code> was now &lsquo;todos derp!&rsquo;. In fact, you could simplify it even more by doing this: <code>property()</code> and leaving off a name altogether. It also demonstrated that the first argument to <code>property</code> didn&rsquo;t have a bearing on what goes in the Template. Next step was to substitute my static text with something useful.</p>

<p><code>js todos_controller.js
derp: function() {
  return this.filterBy('isCompleted', false).get('length');
}.property()
</code></p>

<p>And sure enough, the title was now &lsquo;todos 2&rsquo;. I suspected this would work because my controller extended <code>Ember.ArrayController</code>, giving it access to <code>filterBy</code>. This lead me back to one of my original questions: what is the purpose of <code>'@each.isCompleted'</code>?</p>

<p>I played around with the todo app a little more and noticed that my <code>{{derp}}</code> was not automatically updating when todos where checked off while the original <code>{{remaining}}</code> was. Then it hit me: <code>'@each'</code> must be a special directive for an <code>ArrayController</code> that bound that function to the <code>isCompleted</code> property of <a href="http://emberjs.com/api/classes/Ember.ArrayController.html#property__each"><em>each</em></a> object in its array. Putting a <code>console.log('called');</code> confirmed this suspicion — it&rsquo;s called every time <code>isCompleted</code> is accessed.</p>

<p>After this bit of forensics, things make a little more sense now. I do wish this association was a little more spelled out in the documentation though for us thick-headed developers.</p>

<div class="footnotes">
1. This is what JavaScript does. Open the dev tools and log a function without executing it — the body of that function prints out.
</div>

]]></content>
  </entry>
  
</feed>
