<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding | Scott Williams]]></title>
  <link href="http://blog.swilliams.me/words/categories/coding/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2018-11-02T10:55:48-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WatchKit Connectivity and File Transfers]]></title>
    <link href="http://blog.swilliams.me/words/2015/07/02/watchkit-connectivity-and-file-transfers/"/>
    <updated>2015-07-02T13:51:36-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/07/02/watchkit-connectivity-and-file-transfers</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been noodling with an idea for a <a href="https://developer.apple.com/watchos/pre-release/">watchOS 2</a> app. It involves <a href="https://developer.apple.com/library/prerelease/watchos/documentation/WatchConnectivity/Reference/WatchConnectivity_framework/index.html#//apple_ref/doc/uid/TP40015269">Connectivity</a> &ndash; transferring files from the Watch to its paired iOS device. The WWDC sessions are very good, but I ran into a couple of snags with the framework. I had <a href="https://twitter.com/swilliams/status/616671359557599232">tweeted something that I thought was a bug</a>, but on closer inspection of the docs it actually wasn&rsquo;t. I <a href="https://twitter.com/swilliams/status/616673013417803776">tweeted another message stating as much</a>, but it hasn&rsquo;t gotten the notice that the original did.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Anyways, here&rsquo;s what I learned.</p>

<p><em>[ed: This is with iOS 9, watchOS 2, and Xcode 7, all in beta 2. Stuff might change.]</em></p>

<h2>You can run both simulators at once</h2>

<p>But it&rsquo;s not obvious. First, run the watchOS simulator. In the scheme control, it&rsquo;s the &ldquo;[App Name] WatchKit App&rdquo; scheme, which has both the iPhone and Apple Watch available (for example, &ldquo;iPhone 6 + Apple Watch &ndash; 38mm&rdquo;), and run it.</p>

<p><figure class="center"></p>

<pre><code>&lt;img alt="Xcode Scheme for iPhone6 and Watch" src="http://blog.swilliams.me/images/assets/conn-iphone-6-and-watch.png"&gt;
</code></pre>

<p></figure></p>

<p>When it&rsquo;s running, change the scheme (without stopping the simulator) to the normal iPhone scheme. In this case &ldquo;[App Name] > iPhone 6&rdquo;.</p>

<p><figure class="center"></p>

<pre><code>&lt;img alt="Xcode Scheme for iPhone6 and Watch" src="http://blog.swilliams.me/images/assets/conn-iphone-6.png"&gt;
</code></pre>

<p></figure></p>

<p>Now, run this scheme <em>without</em> compiling: hold down ⌘ and click the Run button. The iOS app will now be running in the simulator. Sometimes the watch app will close, but you can open it back up again.</p>

<p>The console and breakpoints may get a little squirrelly, so you probably won&rsquo;t be able to depend on them so well.</p>

<h2>WCSessionDelegate</h2>

<p>Connectivity has one main delegate to implement: <a href="https://developer.apple.com/library/prerelease/watchos/documentation/WatchConnectivity/Reference/WCSessionDelegate_protocol/"><code>WCSessionDelegate</code></a>. This can be implemented on <em>both</em> the iOS and watchOS apps, and different behavior will happen. For example, when you transfer a file, the <strong>receiver</strong> will need to implement <code>session:didReceiveFile:</code>. If you want to receive some kind of notification that the file was sent the <strong>sender</strong> needs to implement <code>session:didFinishFileTransfer:error:</code>.</p>

<p>This seemed counter-intuitive to me at first, but on further reflection, it makes sense. I do wish the docs more clearly illustrated this though.</p>

<h2>You&rsquo;re in the background</h2>

<p>Don&rsquo;t forget that your iOS app is <strong>not</strong> guaranteed to be running when these notifications come in. And they will come in on a background queue too, so don&rsquo;t immediately try to update the UI without getting over to the main queue first.</p>

<h2>Demo</h2>

<p>I created a simple demo app to illustrate all of this. <a href="https://github.com/swilliams/watchkit-connectivity-demo">It&rsquo;s up on GitHub</a>. Take a look at the <code>AppDelegate</code> for the iOS app, the <code>ExtensionDelegate</code> and <code>InterfaceController</code> in the watchOS extension target. This demo was thrown together quickly without regard for best practices, blah blah blah.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>Such is the nature of Twitter, alas.</p>
</li>
  </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Madness of Errors in Swift]]></title>
    <link href="http://blog.swilliams.me/words/2015/01/21/the-madness-of-errors-in-swift/"/>
    <updated>2015-01-21T20:18:43-07:00</updated>
    <id>http://blog.swilliams.me/words/2015/01/21/the-madness-of-errors-in-swift</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s take a common scenario. You are making an HTTP request and are checking the response for an error. If there is one, you&rsquo;d like to post a notification and let some error handler deal with it.</p>

<p>```</p>

<pre><code>    Alamofire.request(.GET, someURL).response { (request, response, data, error) in
        if error != nil {
            let userInfo = ["error": error]
            let nc = NSNotificationCenter.defaultCenter()
            nc.postNotificationName("HTTPERROR", object: nil, userInfo: userInfo)
        }
    }
</code></pre>

<p><code>``
Uh oh, there's a compiler error on the</code>userInfo<code>argument with the message "Extra argument 'userInfo' in call". Huh? [</code>postNotificationName<code>definitely allows for a</code>userInfo<code>parameter](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/index.html#//apple_ref/occ/instm/NSNotificationCenter/postNotificationName:object:userInfo:). Maybe it's a hidden typing error? According to the docs</code>userInfo<code>is supposed to be an optional dictionary like of type:</code>[NSObject : AnyObject]<code>. My key is a String which is bridged from</code>NSString<code>, which is an</code>NSObject<code>and</code>NSError<code>is also an</code>AnyObject`, so what gives?</p>

<p><figure class="center"></p>

<pre><code>&lt;img alt="Lying" src="http://blog.swilliams.me/images/assets/xcode-lying-cat.jpg"&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
</code></pre>

<p></figure></p>

<p>After banging my head on the wall for a while I remembered that the <code>error</code> variable from <a href="https://github.com/Alamofire/Alamofire">AlamoFire</a> is an optional. Therefore, the correct declaration for <code>userInfo</code> is to unwrap the error:</p>

<p><code>
let userInfo = ["error": error!]
</code></p>

<p>And voilà, no more compilation errors.</p>

<p>&ldquo;Extra argument &lsquo;userInfo&rsquo; in call&rdquo; is a crappy error message. The proper one should have been something about values in the <code>userInfo</code> dictionary not being optional.</p>

<p>Swift is full of these unfortunately. Between these and your friendly SourceKit crashes it&rsquo;s getting untenable. My wish for 2015 is for Apple to address these shortcomings.</p>
]]></content>
  </entry>
  
</feed>
