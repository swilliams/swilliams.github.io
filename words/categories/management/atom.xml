<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Management | Scott Williams]]></title>
  <link href="http://blog.swilliams.me/words/categories/management/atom.xml" rel="self"/>
  <link href="http://blog.swilliams.me/"/>
  <updated>2018-11-21T12:12:45-07:00</updated>
  <id>http://blog.swilliams.me/</id>
  <author>
    <name><![CDATA[Scott Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deciding When a Fix Is Worthwhile]]></title>
    <link href="http://blog.swilliams.me/words/2018/11/21/deciding-when-a-fix-is-worthwhile/"/>
    <updated>2018-11-21T09:56:10-07:00</updated>
    <id>http://blog.swilliams.me/words/2018/11/21/deciding-when-a-fix-is-worthwhile</id>
    <content type="html"><![CDATA[<p>Beth had asked for my opinion on a feature she was finalizing. The project was a biggie — year long, 20+ engineers, many different tech stacks that had to integrate with legacy code, etc. I sat down and she showed me her laptop screen and then groaned. “I forgot to turn on the Product Set feature flag. Hang on.” She sighed. She tapped out a few keys and then sat there. We waited. And waited. A minute and a half went by, which is an <a href="https://xkcd.com/303/">eternity when you’re waiting for code</a>. Finally it launched. Then she had to click around a few times to get back to the screen that had the thing she was demoing.</p>

<p>The feature was fine, in fact I don’t even remember what it was. What concerned me was how long the feedback loop was between changing code and then seeing the effect of that change. The longer that delay is, the less productive people are. I decided to bring it up.</p>

<p>“Uh, so that build time seems pretty long… what happened to the automatic reloading?”</p>

<p>“Oh, that’s been broken for weeks. The only way to bring up the site is to run it in prod.”</p>

<p>&lt;strange high-pitched sound I make when I’m trying to remain calm but not doing so great at it></p>

<p>This was bad. Not <a href="/words/2018/11/18/failure-and-ultimately-fixing-it/">“we’re screwed”</a> bad, but still, not good. A production build on this app meant that even if a change was small, the build system would need to process all tens of thousands of lines of code to implement the change. A developer will make hundreds of changes to code in a day, and then compound that by the number of people on the team and pretty soon you’re talking a big chunk of time. Further, production mode meant that a lot of debugging tools weren’t available. This was a React app, and there was a <a href="https://github.com/facebook/react-devtools">rich ecosystem of tooling</a> that couldn’t be used.</p>

<p>After a little more prodding it turned out that this started happening when we had to consolidate both the back-end API and the front-end React code into a single repository<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, and the developer who did that was in a time crunch and did it quickly, which broke the automated build. The fix was spending a little bit of time to update the build scripts to allow both the API and front-end to run in debug mode concurrently. It took about four hours to research, implement, and test. That response loop dropped to just a few seconds, debug tools were available again, and there was much rejoicing.</p>

<p>Four hours is not much time in the grand scheme of things. But, that time was never budgeted in any sprint planning, triage, or any other kind of scheduling meeting. A common trap that developers can fall into is tunnel vision. “Just get the task done. Just get the task done. Just get…” and lose sight of the forest because of the trees. To go back up in the story briefly, I should say that Beth is a <em>fantastic</em> developer and consistently built systems quickly and at a high standard of quality, but even someone like that can slip into an anti-pattern.</p>

<p>A management super-power that is worth developing is to identify tunnel vision when it happens and correct it. This can be tricky because another common trap is to spend far more time automating a process than time spent dealing with the <a href="https://xkcd.com/1319/">“problem”</a> manually. Here’s the criteria I use when making this determination:</p>

<ol>
<li>How much time is wasted each time the problem occurs? And what’s the frequency?</li>
<li>How many people encounter this?</li>
<li>Will either of those numbers increase or decrease over time?</li>
<li>How much time will the fix take? (This assumes the fix is a known quantity.)</li>
</ol>


<p>In this case, #1 was a trivial amount of time compounded by its frequency, then compounded by #2. And since code has a tendency to only grow over time, which increases build time, #3 is going in the wrong direction too. Based on that, adding more people to the project will <em>increase</em> the time spent dealing with the issue. Unless the fix was gonna take months this was a no-brained. Fortunately, I was familiar enough with the build system that I could take a reasonable stab at estimating #4 and knew it wouldn’t take long.</p>

<p>If you’ve answered those questions and are still unsure of the direction to go, I recommend following <a href="https://pragdave.me/blog/2014/03/04/time-to-kill-agile.html">Dave Thomas’s advice about working with agility</a> (little A). I have a lot of criticisms about the <a href="https://pragmaticmarketing.com/resources/articles/getting-back-to-the-roots-of-agile">state of Agile</a> (capital A) these days, but this is gold:</p>

<blockquote><p>When faced with two or more alternatives that deliver roughly the same value, take the path that makes future change easier.</p></blockquote>

<p>In this case, the tradeoff was simple. Speeding up the build and the evaluation loop of software development will absolutely make future changes easier, and it’s almost always worth putting in extra effort to improve those.</p>

<p>I like situations like these. I mean, I don’t seek them out, but when they happen, it feels great to solve them. The solution wasn’t painful, and the result made the team faster and better. That’s a big win.</p>

<div class="footnotes">
  <ol>
    <li class="footnote" id="fn:1">
  <p>Sometimes clients like to throw wrenches into things. It’s fun.</p>
</li>
  </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Failure and Ultimately Fixing It]]></title>
    <link href="http://blog.swilliams.me/words/2018/11/18/failure-and-ultimately-fixing-it/"/>
    <updated>2018-11-18T13:42:04-07:00</updated>
    <id>http://blog.swilliams.me/words/2018/11/18/failure-and-ultimately-fixing-it</id>
    <content type="html"><![CDATA[<p>I’ve been debating writing this because it requires me to open up in a way that isn’t all that comfortable for me. Specifically, I want to talk about making mistakes and then dealing with the fallout from them. It’s good to talk about this—“Tell me about a time you screwed up and how you overcame it” has been asked in every single management interview ever since the dawn of time. But, while knowing how to answer interview questions well is more theater than reality, it’s good to address the hard questions for personal growth’s sake.</p>

<p>Here’s how it went down. I was juggling many projects, and to borrow a flight metaphor, operating each from about 50,000 feet. That in itself isn’t bad. In fact in my opinion if managers are too low to the ground then they aren’t managing, or are teetering too close to micro-management range. But, and here’s where my mistake was, I didn’t have a timely way to know when I needed to get closer to the ground. The only mechanism was for someone to say, “Hey Scott, how’re your kids? Getting big huh, wow. Oh, you know that year long project that makes up a big chunk of our revenue? Yeah, there’s no way that’ll ever ship. K, byyyye.”</p>

<p>Uh oh. I obviously had a mess on my hands and needed to jump in and coordinate the effort. The specific actions to land that sucker aren&rsquo;t necessary to list out so I&rsquo;ll skip ahead to the ending, which was a mixed bag. The thing did ultimately ship, but at a great cost. Many extra, stressful weeks were needed (which meant our bottom line was garbage) but even worse was that there was turnover directly associated with it. People left the company because of this. Ugh.</p>

<p>Failure can be a <a href="https://youtu.be/WlxRwGwRS4w">great teacher</a>, so here’s what I was able to pull from that in the hopes of not doing it again.</p>

<p>Many things went wrong, but here&rsquo;s where I think my failure was. I needed better tools to know the state of my team and my projects. Word of mouth is a lousy way for critical information to be relayed. It gets changed, filtered, and takes too long to propagate. I want to be clear that the mistake was not that there was a cluster of a project brewing. As long as you have people, <a href="https://arresteddevelopment.fandom.com/wiki/Hop-ons">you’re gonna get some clusters</a>. The mistake was that it took me too long to see the need to get closer to the ground to coordinate the effort. I needed to be at 10,000 feet months earlier. Had I done that, the actions would have been more course corrections than dire changes. The impact would have been smaller.</p>

<p>The solution to that is hard. Better intel can come from automated reports. Getting reports is easy, but getting the <em>right</em> information out of reports is not. For example, a <a href="https://en.wikipedia.org/wiki/Burn_down_chart">burn down chart</a> can offer a valuable data point, but if the slope of the graph doesn’t perfectly match the ideal scenario, you can’t immediately parachute in to “fix” things.</p>

<p>Further, any additional processes or tools introduced <strong>cannot</strong> introduce friction. As a manager you need to reduce that. At one point some years ago I was on one project where every single commit to source control had to have an issue tied to it. There ended up being multiple “Stuff” or “Misc” issues that junked up the system, negating any info that a report could provide.</p>

<p>Fixing a problem like this is gonna take some iteration. It’s like a mini-project all on its own, so don your project management hoodie and get to work. You have stakeholders (your team), and you need to solicit their feedback and understand the problem and what the ultimate solution looks like. And like software, this is never done.</p>

<p>I&rsquo;m pretty sure this won&rsquo;t be my last failure. But as I do fail I will continue to seek to understand what my part in it was and push myself to improve. Once I do have it all figured out I&rsquo;ll be sure to share the results.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whining vs Venting]]></title>
    <link href="http://blog.swilliams.me/words/2018/11/13/whining-vs-venting/"/>
    <updated>2018-11-13T08:14:11-07:00</updated>
    <id>http://blog.swilliams.me/words/2018/11/13/whining-vs-venting</id>
    <content type="html"><![CDATA[<p>It was time for my one-on-one with Ron and I could tell it would be a doozy. He slumped into a chair and before I could even start with a basic “how’s it going?” he launched into a tirade about Sales and how they were screwing us over <em>again</em> and that he had to pick up the extra load. This is a not exactly a unique case—there’s a natural tension between promise and delivery and there’s more than a kernel of truth to it. Ron was really steamed this time though. It could be he needed to vent, but maybe he was just whining.</p>

<p>I don’t like whining. I have two kids who are approaching teenage-dom, and I have enough of it in my life already, thank you very much. Whining from adults is especially grating—they should know better, but it still happens.</p>

<p>I view whining as subtly but distinctly different from venting. And what is that difference you ask? Whining focuses on “woe is me!” and doesn’t lend itself to finding solutions. A whiner wants everything and everyone around them to change to accommodate themselves and their needs. Further, whining tends to beget more whining; whereas when a good old fashion vent is complete, progress can be made. Venting can be healthy.</p>

<p>I actually kinda like hearing a good <a href="http://randsinrepose.com/archives/the-update-the-vent-and-the-disaster/">vent</a> session. If someone is venting to me directly, then it means they have some level of <a href="http://blog.swilliams.me/words/2018/11/01/building-trust-on-teams/">trust</a> with me. They’re opening up and spilling out a little bit of themselves. This means you need to be wearing your listening hat. Vents can get emotional—this is good—it means the venter is invested deeply in something and that they care. So, listen! With empathy!</p>

<p>As you’re listening (with empathy), consider the context. They have their point of view and you have yours. They are much closer to the ground floor of the situation they are experiencing, but as a manager you Know Things that they may not. You can use this knowledge to nudge the conversation and keep it a vent rather than a whine, but don’t try to fix the problem. Something incredible can happen when someone is venting: by talking through it they may discover a solution all on their own. This is good. If it sounds like therapy, it kind of is!</p>

<p>Can you turn a whine into a vent? I think you can, but it may be a struggle. Sometimes it may be asking a pointed question: “Oh wow, that <em>is</em> a mess… what can we do to tweak it a bit?” Dig in and ask constructive questions, though try to steer things towards the realm of productivity. If you have a strong enough relationship consider plainly stating it, “this almost sounds like a whine. Is there a way to frame it so that there is the potential for a solution here?” It may not work, but that’s a whole other ball of wax.</p>

<p>Fortunately, once Ron got it all off his chest he calmed down a bit and evaluated his own communication with the sales team. It wasn’t actually the end of the world (this time), and he picked up a few pointers for how to work a little more effectively with them in the next go around.</p>

<hr />

<p><em>Shout out to <a href="http://jeffmueller.net">Jeff Mueller</a> for helping edit this.</em></p>
]]></content>
  </entry>
  
</feed>
